
USB_HID_MouseDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008508  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08008618  08008618  00009618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008860  08008860  0000a164  2**0
                  CONTENTS
  4 .ARM          00000000  08008860  08008860  0000a164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008860  08008860  0000a164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008860  08008860  00009860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008864  08008864  00009864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08008868  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000168  080089cc  0000a168  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000958  080089cc  0000a958  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aab0  00000000  00000000  0000a18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002556  00000000  00000000  00014c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00017198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000070e  00000000  00000000  00017b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c6c  00000000  00000000  00018256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cea9  00000000  00000000  00030ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008483e  00000000  00000000  0003dd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c25a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d0  00000000  00000000  000c25ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000c4ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000168 	.word	0x20000168
 800012c:	00000000 	.word	0x00000000
 8000130:	08008600 	.word	0x08008600

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000016c 	.word	0x2000016c
 800014c:	08008600 	.word	0x08008600

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2iz>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000834:	d215      	bcs.n	8000862 <__aeabi_d2iz+0x36>
 8000836:	d511      	bpl.n	800085c <__aeabi_d2iz+0x30>
 8000838:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800083c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000840:	d912      	bls.n	8000868 <__aeabi_d2iz+0x3c>
 8000842:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800084a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800084e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000852:	fa23 f002 	lsr.w	r0, r3, r2
 8000856:	bf18      	it	ne
 8000858:	4240      	negne	r0, r0
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d105      	bne.n	8000874 <__aeabi_d2iz+0x48>
 8000868:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800086c:	bf08      	it	eq
 800086e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	0000      	movs	r0, r0
	...

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 f982 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f86a 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 f8c2 	bl	8000a14 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000890:	f006 fab4 	bl	8006dfc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
buffer[1]=10;
 8000894:	4b2c      	ldr	r3, [pc, #176]	@ (8000948 <main+0xc8>)
 8000896:	220a      	movs	r2, #10
 8000898:	705a      	strb	r2, [r3, #1]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	 x=sin(i)*5;
 800089a:	4b2c      	ldr	r3, [pc, #176]	@ (800094c <main+0xcc>)
 800089c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008a0:	4610      	mov	r0, r2
 80008a2:	4619      	mov	r1, r3
 80008a4:	f006 fed4 	bl	8007650 <sin>
 80008a8:	f04f 0200 	mov.w	r2, #0
 80008ac:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <main+0xd0>)
 80008ae:	f7ff fc4f 	bl	8000150 <__aeabi_dmul>
 80008b2:	4602      	mov	r2, r0
 80008b4:	460b      	mov	r3, r1
 80008b6:	4927      	ldr	r1, [pc, #156]	@ (8000954 <main+0xd4>)
 80008b8:	e9c1 2300 	strd	r2, r3, [r1]
	  	 y=cos(i)*5;
 80008bc:	4b23      	ldr	r3, [pc, #140]	@ (800094c <main+0xcc>)
 80008be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	f006 fe7d 	bl	80075c4 <cos>
 80008ca:	f04f 0200 	mov.w	r2, #0
 80008ce:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <main+0xd0>)
 80008d0:	f7ff fc3e 	bl	8000150 <__aeabi_dmul>
 80008d4:	4602      	mov	r2, r0
 80008d6:	460b      	mov	r3, r1
 80008d8:	491f      	ldr	r1, [pc, #124]	@ (8000958 <main+0xd8>)
 80008da:	e9c1 2300 	strd	r2, r3, [r1]
	  	 buffer[1]=(int8_t) x;
 80008de:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <main+0xd4>)
 80008e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008e4:	4610      	mov	r0, r2
 80008e6:	4619      	mov	r1, r3
 80008e8:	f7ff ffa0 	bl	800082c <__aeabi_d2iz>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <main+0xc8>)
 80008f4:	705a      	strb	r2, [r3, #1]
	  	 buffer[2]=(int8_t) y;
 80008f6:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <main+0xd8>)
 80008f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008fc:	4610      	mov	r0, r2
 80008fe:	4619      	mov	r1, r3
 8000900:	f7ff ff94 	bl	800082c <__aeabi_d2iz>
 8000904:	4603      	mov	r3, r0
 8000906:	b25b      	sxtb	r3, r3
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <main+0xc8>)
 800090c:	709a      	strb	r2, [r3, #2]
	  	 i+=0.01;
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <main+0xcc>)
 8000910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000914:	a30a      	add	r3, pc, #40	@ (adr r3, 8000940 <main+0xc0>)
 8000916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800091a:	f7ff fd49 	bl	80003b0 <__adddf3>
 800091e:	4602      	mov	r2, r0
 8000920:	460b      	mov	r3, r1
 8000922:	490a      	ldr	r1, [pc, #40]	@ (800094c <main+0xcc>)
 8000924:	e9c1 2300 	strd	r2, r3, [r1]
	  	 USBD_HID_SendReport(&hUsbDeviceFS,  buffer, 4);
 8000928:	2204      	movs	r2, #4
 800092a:	4907      	ldr	r1, [pc, #28]	@ (8000948 <main+0xc8>)
 800092c:	480b      	ldr	r0, [pc, #44]	@ (800095c <main+0xdc>)
 800092e:	f005 f979 	bl	8005c24 <USBD_HID_SendReport>
	  	 HAL_Delay(1);
 8000932:	2001      	movs	r0, #1
 8000934:	f000 f98c 	bl	8000c50 <HAL_Delay>
	  	 x=sin(i)*5;
 8000938:	bf00      	nop
 800093a:	e7ae      	b.n	800089a <main+0x1a>
 800093c:	f3af 8000 	nop.w
 8000940:	47ae147b 	.word	0x47ae147b
 8000944:	3f847ae1 	.word	0x3f847ae1
 8000948:	20000184 	.word	0x20000184
 800094c:	20000188 	.word	0x20000188
 8000950:	40140000 	.word	0x40140000
 8000954:	20000190 	.word	0x20000190
 8000958:	20000198 	.word	0x20000198
 800095c:	200001a8 	.word	0x200001a8

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	@ 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800096a:	2228      	movs	r2, #40	@ 0x28
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f006 fdfc 	bl	800756c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000990:	2301      	movs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800099e:	2301      	movs	r3, #1
 80009a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80009ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80009b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 ffc4 	bl	8002944 <HAL_RCC_OscConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009c2:	f000 f849 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c6:	230f      	movs	r3, #15
 80009c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80009ce:	2380      	movs	r3, #128	@ 0x80
 80009d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2101      	movs	r1, #1
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 fa31 	bl	8002e48 <HAL_RCC_ClockConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009ec:	f000 f834 	bl	8000a58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80009f0:	2310      	movs	r3, #16
 80009f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80009f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009f8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fb7f 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a08:	f000 f826 	bl	8000a58 <Error_Handler>
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3750      	adds	r7, #80	@ 0x50
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_GPIO_Init+0x40>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <MX_GPIO_Init+0x40>)
 8000a20:	f043 0320 	orr.w	r3, r3, #32
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <MX_GPIO_Init+0x40>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f003 0320 	and.w	r3, r3, #32
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <MX_GPIO_Init+0x40>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <MX_GPIO_Init+0x40>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <MX_GPIO_Init+0x40>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <HAL_MspInit+0x60>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <HAL_MspInit+0x60>)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <NMI_Handler+0x4>

08000ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <MemManage_Handler+0x4>

08000ae0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <UsageFault_Handler+0x4>

08000af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f87e 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b26:	f000 fae0 	bl	80010ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000066c 	.word	0x2000066c

08000b34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b40:	f7ff fff8 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480b      	ldr	r0, [pc, #44]	@ (8000b74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b46:	490c      	ldr	r1, [pc, #48]	@ (8000b78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b48:	4a0c      	ldr	r2, [pc, #48]	@ (8000b7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a09      	ldr	r2, [pc, #36]	@ (8000b80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b5c:	4c09      	ldr	r4, [pc, #36]	@ (8000b84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f006 fd07 	bl	800757c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6e:	f7ff fe87 	bl	8000880 <main>
  bx lr
 8000b72:	4770      	bx	lr
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000b7c:	08008868 	.word	0x08008868
  ldr r2, =_sbss
 8000b80:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000b84:	20000958 	.word	0x20000958

08000b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_2_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <HAL_Init+0x28>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a07      	ldr	r2, [pc, #28]	@ (8000bb4 <HAL_Init+0x28>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f947 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	f000 f808 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba8:	f7ff ff5c 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40022000 	.word	0x40022000

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <HAL_InitTick+0x54>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <HAL_InitTick+0x58>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f95f 	bl	8000e9a <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00e      	b.n	8000c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d80a      	bhi.n	8000c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f000 f927 	bl	8000e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4a06      	ldr	r2, [pc, #24]	@ (8000c14 <HAL_InitTick+0x5c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a03      	ldr	r2, [pc, #12]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20000008 	.word	0x20000008
 8000c38:	200001a0 	.word	0x200001a0

08000c3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b02      	ldr	r3, [pc, #8]	@ (8000c4c <HAL_GetTick+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	200001a0 	.word	0x200001a0

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c58:	f7ff fff0 	bl	8000c3c <HAL_GetTick>
 8000c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c68:	d005      	beq.n	8000c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <HAL_Delay+0x44>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c76:	bf00      	nop
 8000c78:	f7ff ffe0 	bl	8000c3c <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d8f7      	bhi.n	8000c78 <HAL_Delay+0x28>
  {
  }
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4906      	ldr	r1, [pc, #24]	@ (8000d30 <__NVIC_EnableIRQ+0x34>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	@ (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	@ 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dfc:	d301      	bcc.n	8000e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00f      	b.n	8000e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e02:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <SysTick_Config+0x40>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f7ff ff90 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <SysTick_Config+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <SysTick_Config+0x40>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff2d 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e58:	f7ff ff42 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff ff90 	bl	8000d88 <NVIC_EncodePriority>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff5f 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff35 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffa2 	bl	8000dec <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e0e8      	b.n	8001096 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d106      	bne.n	8000ede <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f006 f8c3 	bl	8007064 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 f9de 	bl	80032b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3304      	adds	r3, #4
 8000efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f00:	f002 f9b4 	bl	800326c <USB_CoreInit>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e0bf      	b.n	8001096 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 f9e2 	bl	80032e6 <USB_SetCurrentMode>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d005      	beq.n	8000f34 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e0b0      	b.n	8001096 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e03e      	b.n	8000fb8 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	440b      	add	r3, r1
 8000f48:	3311      	adds	r3, #17
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3310      	adds	r3, #16
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	440b      	add	r3, r1
 8000f70:	3313      	adds	r3, #19
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	440b      	add	r3, r1
 8000f84:	3320      	adds	r3, #32
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	3324      	adds	r3, #36	@ 0x24
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	791b      	ldrb	r3, [r3, #4]
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d3bb      	bcc.n	8000f3a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e044      	b.n	8001052 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	440b      	add	r3, r1
 8000fec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	440b      	add	r3, r1
 8001018:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	3301      	adds	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	791b      	ldrb	r3, [r3, #4]
 8001056:	7bfa      	ldrb	r2, [r7, #15]
 8001058:	429a      	cmp	r2, r3
 800105a:	d3b5      	bcc.n	8000fc8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3304      	adds	r3, #4
 8001064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001066:	f002 f94a 	bl	80032fe <USB_DevInit>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e00c      	b.n	8001096 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f004 fbc9 	bl	8005826 <USB_DevDisconnect>

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_PCD_Start+0x16>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e016      	b.n	80010e2 <HAL_PCD_Start+0x44>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 f8e0 	bl	8003286 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80010c6:	2101      	movs	r1, #1
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f006 fa18 	bl	80074fe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 fb9d 	bl	8005812 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b088      	sub	sp, #32
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 fb9f 	bl	800583a <USB_ReadInterrupts>
 80010fc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 fb03 	bl	8001714 <PCD_EP_ISR_Handler>

    return;
 800110e:	e119      	b.n	8001344 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001116:	2b00      	cmp	r3, #0
 8001118:	d013      	beq.n	8001142 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001122:	b29a      	uxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800112c:	b292      	uxth	r2, r2
 800112e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f006 f811 	bl	800715a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001138:	2100      	movs	r1, #0
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f905 	bl	800134a <HAL_PCD_SetAddress>

    return;
 8001140:	e100      	b.n	8001344 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00c      	beq.n	8001166 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001154:	b29a      	uxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800115e:	b292      	uxth	r2, r2
 8001160:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001164:	e0ee      	b.n	8001344 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00c      	beq.n	800118a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001178:	b29a      	uxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001182:	b292      	uxth	r2, r2
 8001184:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001188:	e0dc      	b.n	8001344 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d027      	beq.n	80011e4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800119c:	b29a      	uxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0204 	bic.w	r2, r2, #4
 80011a6:	b292      	uxth	r2, r2
 80011a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0208 	bic.w	r2, r2, #8
 80011be:	b292      	uxth	r2, r2
 80011c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f006 f801 	bl	80071cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011dc:	b292      	uxth	r2, r2
 80011de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80011e2:	e0af      	b.n	8001344 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8083 	beq.w	80012f6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	77fb      	strb	r3, [r7, #31]
 80011f4:	e010      	b.n	8001218 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	7ffb      	ldrb	r3, [r7, #31]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	441a      	add	r2, r3
 8001202:	7ffb      	ldrb	r3, [r7, #31]
 8001204:	8812      	ldrh	r2, [r2, #0]
 8001206:	b292      	uxth	r2, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	3320      	adds	r3, #32
 800120c:	443b      	add	r3, r7
 800120e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001212:	7ffb      	ldrb	r3, [r7, #31]
 8001214:	3301      	adds	r3, #1
 8001216:	77fb      	strb	r3, [r7, #31]
 8001218:	7ffb      	ldrb	r3, [r7, #31]
 800121a:	2b07      	cmp	r3, #7
 800121c:	d9eb      	bls.n	80011f6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001226:	b29a      	uxth	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0201 	orr.w	r2, r2, #1
 8001230:	b292      	uxth	r2, r2
 8001232:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800123e:	b29a      	uxth	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0201 	bic.w	r2, r2, #1
 8001248:	b292      	uxth	r2, r2
 800124a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800124e:	bf00      	nop
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001258:	b29b      	uxth	r3, r3
 800125a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f6      	beq.n	8001250 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001274:	b292      	uxth	r2, r2
 8001276:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800127a:	2300      	movs	r3, #0
 800127c:	77fb      	strb	r3, [r7, #31]
 800127e:	e00f      	b.n	80012a0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001280:	7ffb      	ldrb	r3, [r7, #31]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	4611      	mov	r1, r2
 8001288:	7ffa      	ldrb	r2, [r7, #31]
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	440a      	add	r2, r1
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	3320      	adds	r3, #32
 8001292:	443b      	add	r3, r7
 8001294:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001298:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800129a:	7ffb      	ldrb	r3, [r7, #31]
 800129c:	3301      	adds	r3, #1
 800129e:	77fb      	strb	r3, [r7, #31]
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	d9ec      	bls.n	8001280 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 0208 	orr.w	r2, r2, #8
 80012b8:	b292      	uxth	r2, r2
 80012ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012d0:	b292      	uxth	r2, r2
 80012d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012de:	b29a      	uxth	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0204 	orr.w	r2, r2, #4
 80012e8:	b292      	uxth	r2, r2
 80012ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f005 ff52 	bl	8007198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80012f4:	e026      	b.n	8001344 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00f      	beq.n	8001320 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001312:	b292      	uxth	r2, r2
 8001314:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f005 ff10 	bl	800713e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800131e:	e011      	b.n	8001344 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00c      	beq.n	8001344 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001332:	b29a      	uxth	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800133c:	b292      	uxth	r2, r2
 800133e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001342:	bf00      	nop
  }
}
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_PCD_SetAddress+0x1a>
 8001360:	2302      	movs	r3, #2
 8001362:	e012      	b.n	800138a <HAL_PCD_SetAddress+0x40>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	78fa      	ldrb	r2, [r7, #3]
 8001370:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	78fa      	ldrb	r2, [r7, #3]
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f004 fa36 	bl	80057ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	4608      	mov	r0, r1
 800139c:	4611      	mov	r1, r2
 800139e:	461a      	mov	r2, r3
 80013a0:	4603      	mov	r3, r0
 80013a2:	70fb      	strb	r3, [r7, #3]
 80013a4:	460b      	mov	r3, r1
 80013a6:	803b      	strh	r3, [r7, #0]
 80013a8:	4613      	mov	r3, r2
 80013aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	da0e      	bge.n	80013d6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	f003 0207 	and.w	r2, r3, #7
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	3310      	adds	r3, #16
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2201      	movs	r2, #1
 80013d2:	705a      	strb	r2, [r3, #1]
 80013d4:	e00e      	b.n	80013f4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	f003 0207 	and.w	r2, r3, #7
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001400:	883a      	ldrh	r2, [r7, #0]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	78ba      	ldrb	r2, [r7, #2]
 800140a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800140c:	78bb      	ldrb	r3, [r7, #2]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d102      	bne.n	8001418 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_PCD_EP_Open+0x94>
 8001422:	2302      	movs	r3, #2
 8001424:	e00e      	b.n	8001444 <HAL_PCD_EP_Open+0xb2>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68f9      	ldr	r1, [r7, #12]
 8001434:	4618      	mov	r0, r3
 8001436:	f001 ff7f 	bl	8003338 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001442:	7afb      	ldrb	r3, [r7, #11]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800145c:	2b00      	cmp	r3, #0
 800145e:	da0e      	bge.n	800147e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	f003 0207 	and.w	r2, r3, #7
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	3310      	adds	r3, #16
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2201      	movs	r2, #1
 800147a:	705a      	strb	r2, [r3, #1]
 800147c:	e00e      	b.n	800149c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	f003 0207 	and.w	r2, r3, #7
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_PCD_EP_Close+0x6a>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e00e      	b.n	80014d4 <HAL_PCD_EP_Close+0x88>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68f9      	ldr	r1, [r7, #12]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 faf7 	bl	8003ab8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	460b      	mov	r3, r1
 80014ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	f003 0207 	and.w	r2, r3, #7
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2200      	movs	r2, #0
 800151a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800151c:	7afb      	ldrb	r3, [r7, #11]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	b2da      	uxtb	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6979      	ldr	r1, [r7, #20]
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fcae 	bl	8003e90 <USB_EPStartXfer>

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	460b      	mov	r3, r1
 800154c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	f003 0207 	and.w	r2, r3, #7
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	3310      	adds	r3, #16
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2201      	movs	r2, #1
 8001588:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	b2da      	uxtb	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6979      	ldr	r1, [r7, #20]
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fc77 	bl	8003e90 <USB_EPStartXfer>

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	7912      	ldrb	r2, [r2, #4]
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e04c      	b.n	8001664 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da0e      	bge.n	80015f0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	f003 0207 	and.w	r2, r3, #7
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	3310      	adds	r3, #16
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	705a      	strb	r2, [r3, #1]
 80015ee:	e00c      	b.n	800160a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2201      	movs	r2, #1
 800160e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	b2da      	uxtb	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_PCD_EP_SetStall+0x7e>
 8001626:	2302      	movs	r3, #2
 8001628:	e01c      	b.n	8001664 <HAL_PCD_EP_SetStall+0xb8>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68f9      	ldr	r1, [r7, #12]
 8001638:	4618      	mov	r0, r3
 800163a:	f003 ffda 	bl	80055f2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	2b00      	cmp	r3, #0
 8001646:	d108      	bne.n	800165a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001652:	4619      	mov	r1, r3
 8001654:	4610      	mov	r0, r2
 8001656:	f004 f8ff 	bl	8005858 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	7912      	ldrb	r2, [r2, #4]
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e040      	b.n	800170c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800168a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800168e:	2b00      	cmp	r3, #0
 8001690:	da0e      	bge.n	80016b0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	f003 0207 	and.w	r2, r3, #7
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	3310      	adds	r3, #16
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	705a      	strb	r2, [r3, #1]
 80016ae:	e00e      	b.n	80016ce <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	f003 0207 	and.w	r2, r3, #7
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_PCD_EP_ClrStall+0x82>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e00e      	b.n	800170c <HAL_PCD_EP_ClrStall+0xa0>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68f9      	ldr	r1, [r7, #12]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 ffc8 	bl	8005692 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b096      	sub	sp, #88	@ 0x58
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800171c:	e3bb      	b.n	8001e96 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001726:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800172a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001738:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800173c:	2b00      	cmp	r3, #0
 800173e:	f040 8175 	bne.w	8001a2c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001742:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b00      	cmp	r3, #0
 800174c:	d14e      	bne.n	80017ec <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800175a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800175e:	81fb      	strh	r3, [r7, #14]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	89fb      	ldrh	r3, [r7, #14]
 8001766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800176a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800176e:	b29b      	uxth	r3, r3
 8001770:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3310      	adds	r3, #16
 8001776:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001780:	b29b      	uxth	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4413      	add	r3, r2
 800178c:	3302      	adds	r3, #2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	441a      	add	r2, r3
 80017ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017b2:	2100      	movs	r1, #0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f005 fca8 	bl	800710a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7b5b      	ldrb	r3, [r3, #13]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 8368 	beq.w	8001e96 <PCD_EP_ISR_Handler+0x782>
 80017c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 8363 	bne.w	8001e96 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7b5b      	ldrb	r3, [r3, #13]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	735a      	strb	r2, [r3, #13]
 80017ea:	e354      	b.n	8001e96 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017f2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001806:	2b00      	cmp	r3, #0
 8001808:	d034      	beq.n	8001874 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001812:	b29b      	uxth	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	3306      	adds	r3, #6
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001834:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001842:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001846:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001848:	b29b      	uxth	r3, r3
 800184a:	f004 f855 	bl	80058f8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	b29a      	uxth	r2, r3
 8001856:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800185a:	4013      	ands	r3, r2
 800185c:	823b      	strh	r3, [r7, #16]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	8a3a      	ldrh	r2, [r7, #16]
 8001864:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001868:	b292      	uxth	r2, r2
 800186a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f005 fc1f 	bl	80070b0 <HAL_PCD_SetupStageCallback>
 8001872:	e310      	b.n	8001e96 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001874:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001878:	2b00      	cmp	r3, #0
 800187a:	f280 830c 	bge.w	8001e96 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	b29a      	uxth	r2, r3
 8001886:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800188a:	4013      	ands	r3, r2
 800188c:	83fb      	strh	r3, [r7, #30]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	8bfa      	ldrh	r2, [r7, #30]
 8001894:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001898:	b292      	uxth	r2, r2
 800189a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	3306      	adds	r3, #6
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d019      	beq.n	8001904 <PCD_EP_ISR_Handler+0x1f0>
 80018d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d015      	beq.n	8001904 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018de:	6959      	ldr	r1, [r3, #20]
 80018e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	f004 f805 	bl	80058f8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	441a      	add	r2, r3
 80018f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018fa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018fc:	2100      	movs	r1, #0
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f005 fbe8 	bl	80070d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800190e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 82bd 	bne.w	8001e96 <PCD_EP_ISR_Handler+0x782>
 800191c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001920:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001924:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001928:	f000 82b5 	beq.w	8001e96 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800193a:	b29b      	uxth	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	4413      	add	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	b29b      	uxth	r3, r3
 8001952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001956:	b29a      	uxth	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	801a      	strh	r2, [r3, #0]
 800195c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	2b3e      	cmp	r3, #62	@ 0x3e
 8001962:	d91d      	bls.n	80019a0 <PCD_EP_ISR_Handler+0x28c>
 8001964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	095b      	lsrs	r3, r3, #5
 800196a:	647b      	str	r3, [r7, #68]	@ 0x44
 800196c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <PCD_EP_ISR_Handler+0x26a>
 8001978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800197a:	3b01      	subs	r3, #1
 800197c:	647b      	str	r3, [r7, #68]	@ 0x44
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	b29a      	uxth	r2, r3
 8001984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001986:	b29b      	uxth	r3, r3
 8001988:	029b      	lsls	r3, r3, #10
 800198a:	b29b      	uxth	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	b29b      	uxth	r3, r3
 8001990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001998:	b29a      	uxth	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	e026      	b.n	80019ee <PCD_EP_ISR_Handler+0x2da>
 80019a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10a      	bne.n	80019be <PCD_EP_ISR_Handler+0x2aa>
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	801a      	strh	r2, [r3, #0]
 80019bc:	e017      	b.n	80019ee <PCD_EP_ISR_Handler+0x2da>
 80019be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80019c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <PCD_EP_ISR_Handler+0x2c4>
 80019d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019d4:	3301      	adds	r3, #1
 80019d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	b29a      	uxth	r2, r3
 80019de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	029b      	lsls	r3, r3, #10
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019fe:	827b      	strh	r3, [r7, #18]
 8001a00:	8a7b      	ldrh	r3, [r7, #18]
 8001a02:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001a06:	827b      	strh	r3, [r7, #18]
 8001a08:	8a7b      	ldrh	r3, [r7, #18]
 8001a0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001a0e:	827b      	strh	r3, [r7, #18]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	8a7b      	ldrh	r3, [r7, #18]
 8001a16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	8013      	strh	r3, [r2, #0]
 8001a2a:	e234      	b.n	8001e96 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a40:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f280 80fc 	bge.w	8001c42 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a60:	4013      	ands	r3, r2
 8001a62:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001a78:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a80:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a98:	7b1b      	ldrb	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d125      	bne.n	8001aea <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3306      	adds	r3, #6
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001aca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8092 	beq.w	8001bf8 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ada:	6959      	ldr	r1, [r3, #20]
 8001adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ade:	88da      	ldrh	r2, [r3, #6]
 8001ae0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ae4:	f003 ff08 	bl	80058f8 <USB_ReadPMA>
 8001ae8:	e086      	b.n	8001bf8 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aec:	78db      	ldrb	r3, [r3, #3]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d10a      	bne.n	8001b08 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001af2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001af6:	461a      	mov	r2, r3
 8001af8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f9d9 	bl	8001eb2 <HAL_PCD_EP_DB_Receive>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001b06:	e077      	b.n	8001bf8 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b22:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	441a      	add	r2, r3
 8001b34:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d024      	beq.n	8001bb0 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b8e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001b92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d02e      	beq.n	8001bf8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba0:	6959      	ldr	r1, [r3, #20]
 8001ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba4:	891a      	ldrh	r2, [r3, #8]
 8001ba6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001baa:	f003 fea5 	bl	80058f8 <USB_ReadPMA>
 8001bae:	e023      	b.n	8001bf8 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3306      	adds	r3, #6
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001bdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d009      	beq.n	8001bf8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bea:	6959      	ldr	r1, [r3, #20]
 8001bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bee:	895a      	ldrh	r2, [r3, #10]
 8001bf0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bf4:	f003 fe80 	bl	80058f8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c00:	441a      	add	r2, r3
 8001c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c04:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c0e:	441a      	add	r2, r3
 8001c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c12:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <PCD_EP_ISR_Handler+0x514>
 8001c1c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d206      	bcs.n	8001c36 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f005 fa50 	bl	80070d4 <HAL_PCD_DataOutStageCallback>
 8001c34:	e005      	b.n	8001c42 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 f927 	bl	8003e90 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8123 	beq.w	8001e96 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c50:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	3310      	adds	r3, #16
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c7e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	441a      	add	r2, r3
 8001c90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca2:	78db      	ldrb	r3, [r3, #3]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	f040 80a2 	bne.w	8001dee <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb2:	7b1b      	ldrb	r3, [r3, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 8093 	beq.w	8001de0 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d046      	beq.n	8001d54 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc8:	785b      	ldrb	r3, [r3, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d126      	bne.n	8001d1c <PCD_EP_ISR_Handler+0x608>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	4413      	add	r3, r2
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	011a      	lsls	r2, r3, #4
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	4413      	add	r3, r2
 8001cf0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001cf4:	623b      	str	r3, [r7, #32]
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	801a      	strh	r2, [r3, #0]
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	e061      	b.n	8001de0 <PCD_EP_ISR_Handler+0x6cc>
 8001d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1e:	785b      	ldrb	r3, [r3, #1]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d15d      	bne.n	8001de0 <PCD_EP_ISR_Handler+0x6cc>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d38:	4413      	add	r3, r2
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	011a      	lsls	r2, r3, #4
 8001d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d44:	4413      	add	r3, r2
 8001d46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4e:	2200      	movs	r2, #0
 8001d50:	801a      	strh	r2, [r3, #0]
 8001d52:	e045      	b.n	8001de0 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5c:	785b      	ldrb	r3, [r3, #1]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d126      	bne.n	8001db0 <PCD_EP_ISR_Handler+0x69c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d76:	4413      	add	r3, r2
 8001d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	011a      	lsls	r2, r3, #4
 8001d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d82:	4413      	add	r3, r2
 8001d84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d98:	801a      	strh	r2, [r3, #0]
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dac:	801a      	strh	r2, [r3, #0]
 8001dae:	e017      	b.n	8001de0 <PCD_EP_ISR_Handler+0x6cc>
 8001db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db2:	785b      	ldrb	r3, [r3, #1]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d113      	bne.n	8001de0 <PCD_EP_ISR_Handler+0x6cc>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dc6:	4413      	add	r3, r2
 8001dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	011a      	lsls	r2, r3, #4
 8001dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ddc:	2200      	movs	r2, #0
 8001dde:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f005 f98f 	bl	800710a <HAL_PCD_DataInStageCallback>
 8001dec:	e053      	b.n	8001e96 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001dee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d146      	bne.n	8001e88 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e22:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d907      	bls.n	8001e42 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e3a:	1ad2      	subs	r2, r2, r3
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3e:	619a      	str	r2, [r3, #24]
 8001e40:	e002      	b.n	8001e48 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d106      	bne.n	8001e5e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f005 f957 	bl	800710a <HAL_PCD_DataInStageCallback>
 8001e5c:	e01b      	b.n	8001e96 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e66:	441a      	add	r2, r3
 8001e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	69da      	ldr	r2, [r3, #28]
 8001e70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e74:	441a      	add	r2, r3
 8001e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e78:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e80:	4618      	mov	r0, r3
 8001e82:	f002 f805 	bl	8003e90 <USB_EPStartXfer>
 8001e86:	e006      	b.n	8001e96 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f91b 	bl	80020cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f6ff ac3b 	blt.w	800171e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3758      	adds	r7, #88	@ 0x58
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b088      	sub	sp, #32
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d07e      	beq.n	8001fc8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ef2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	8b7b      	ldrh	r3, [r7, #26]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d306      	bcc.n	8001f0c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	8b7b      	ldrh	r3, [r7, #26]
 8001f04:	1ad2      	subs	r2, r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	619a      	str	r2, [r3, #24]
 8001f0a:	e002      	b.n	8001f12 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d123      	bne.n	8001f62 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f34:	833b      	strh	r3, [r7, #24]
 8001f36:	8b3b      	ldrh	r3, [r7, #24]
 8001f38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f3c:	833b      	strh	r3, [r7, #24]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	441a      	add	r2, r3
 8001f4c:	8b3b      	ldrh	r3, [r7, #24]
 8001f4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01f      	beq.n	8001fac <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f86:	82fb      	strh	r3, [r7, #22]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	441a      	add	r2, r3
 8001f96:	8afb      	ldrh	r3, [r7, #22]
 8001f98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fa4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fac:	8b7b      	ldrh	r3, [r7, #26]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	6959      	ldr	r1, [r3, #20]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	891a      	ldrh	r2, [r3, #8]
 8001fc0:	8b7b      	ldrh	r3, [r7, #26]
 8001fc2:	f003 fc99 	bl	80058f8 <USB_ReadPMA>
 8001fc6:	e07c      	b.n	80020c2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	3306      	adds	r3, #6
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	8b7b      	ldrh	r3, [r7, #26]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d306      	bcc.n	800200a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	699a      	ldr	r2, [r3, #24]
 8002000:	8b7b      	ldrh	r3, [r7, #26]
 8002002:	1ad2      	subs	r2, r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	619a      	str	r2, [r3, #24]
 8002008:	e002      	b.n	8002010 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d123      	bne.n	8002060 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800202e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002032:	83fb      	strh	r3, [r7, #30]
 8002034:	8bfb      	ldrh	r3, [r7, #30]
 8002036:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800203a:	83fb      	strh	r3, [r7, #30]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	441a      	add	r2, r3
 800204a:	8bfb      	ldrh	r3, [r7, #30]
 800204c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002050:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800205c:	b29b      	uxth	r3, r3
 800205e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11f      	bne.n	80020aa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002084:	83bb      	strh	r3, [r7, #28]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	441a      	add	r2, r3
 8002094:	8bbb      	ldrh	r3, [r7, #28]
 8002096:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800209a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800209e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020aa:	8b7b      	ldrh	r3, [r7, #26]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	6959      	ldr	r1, [r3, #20]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	895a      	ldrh	r2, [r3, #10]
 80020bc:	8b7b      	ldrh	r3, [r7, #26]
 80020be:	f003 fc1b 	bl	80058f8 <USB_ReadPMA>
    }
  }

  return count;
 80020c2:	8b7b      	ldrh	r3, [r7, #26]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3720      	adds	r7, #32
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b0a4      	sub	sp, #144	@ 0x90
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 81dd 	beq.w	80024a0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	3302      	adds	r3, #2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800210e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800211a:	429a      	cmp	r2, r3
 800211c:	d907      	bls.n	800212e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	699a      	ldr	r2, [r3, #24]
 8002122:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	619a      	str	r2, [r3, #24]
 800212c:	e002      	b.n	8002134 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	f040 80b9 	bne.w	80022b0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	785b      	ldrb	r3, [r3, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d126      	bne.n	8002194 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800215a:	4413      	add	r3, r2
 800215c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	011a      	lsls	r2, r3, #4
 8002164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002166:	4413      	add	r3, r2
 8002168:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002178:	b29a      	uxth	r2, r3
 800217a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217c:	801a      	strh	r2, [r3, #0]
 800217e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218c:	b29a      	uxth	r2, r3
 800218e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002190:	801a      	strh	r2, [r3, #0]
 8002192:	e01a      	b.n	80021ca <HAL_PCD_EP_DB_Transmit+0xfe>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	785b      	ldrb	r3, [r3, #1]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d116      	bne.n	80021ca <HAL_PCD_EP_DB_Transmit+0xfe>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b0:	4413      	add	r3, r2
 80021b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	011a      	lsls	r2, r3, #4
 80021ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021bc:	4413      	add	r3, r2
 80021be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80021c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c6:	2200      	movs	r2, #0
 80021c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d126      	bne.n	8002226 <HAL_PCD_EP_DB_Transmit+0x15a>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	4413      	add	r3, r2
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	011a      	lsls	r2, r3, #4
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	4413      	add	r3, r2
 80021fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220a:	b29a      	uxth	r2, r3
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	801a      	strh	r2, [r3, #0]
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800221a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800221e:	b29a      	uxth	r2, r3
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	801a      	strh	r2, [r3, #0]
 8002224:	e017      	b.n	8002256 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d113      	bne.n	8002256 <HAL_PCD_EP_DB_Transmit+0x18a>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002236:	b29b      	uxth	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	4413      	add	r3, r2
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	011a      	lsls	r2, r3, #4
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	4413      	add	r3, r2
 800224a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800224e:	623b      	str	r3, [r7, #32]
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	2200      	movs	r2, #0
 8002254:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	4619      	mov	r1, r3
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f004 ff54 	bl	800710a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 82fc 	beq.w	8002866 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002288:	82fb      	strh	r3, [r7, #22]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	441a      	add	r2, r3
 8002298:	8afb      	ldrh	r3, [r7, #22]
 800229a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800229e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	8013      	strh	r3, [r2, #0]
 80022ae:	e2da      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d021      	beq.n	80022fe <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	441a      	add	r2, r3
 80022e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80022ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 82ae 	bne.w	8002866 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002312:	441a      	add	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	69da      	ldr	r2, [r3, #28]
 800231c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002320:	441a      	add	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	6a1a      	ldr	r2, [r3, #32]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	429a      	cmp	r2, r3
 8002330:	d30b      	bcc.n	800234a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	6a1a      	ldr	r2, [r3, #32]
 800233e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002342:	1ad2      	subs	r2, r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	621a      	str	r2, [r3, #32]
 8002348:	e017      	b.n	800237a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d108      	bne.n	8002364 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002352:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002362:	e00a      	b.n	800237a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2200      	movs	r2, #0
 8002378:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	785b      	ldrb	r3, [r3, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d165      	bne.n	800244e <HAL_PCD_EP_DB_Transmit+0x382>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002390:	b29b      	uxth	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002396:	4413      	add	r3, r2
 8002398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	011a      	lsls	r2, r3, #4
 80023a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023a2:	4413      	add	r3, r2
 80023a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b8:	801a      	strh	r2, [r3, #0]
 80023ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023be:	2b3e      	cmp	r3, #62	@ 0x3e
 80023c0:	d91d      	bls.n	80023fe <HAL_PCD_EP_DB_Transmit+0x332>
 80023c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <HAL_PCD_EP_DB_Transmit+0x310>
 80023d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023d8:	3b01      	subs	r3, #1
 80023da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	029b      	lsls	r3, r3, #10
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4313      	orrs	r3, r2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fa:	801a      	strh	r2, [r3, #0]
 80023fc:	e044      	b.n	8002488 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_PCD_EP_DB_Transmit+0x350>
 8002406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002414:	b29a      	uxth	r2, r3
 8002416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002418:	801a      	strh	r2, [r3, #0]
 800241a:	e035      	b.n	8002488 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800241c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002424:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002430:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002432:	3301      	adds	r3, #1
 8002434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29a      	uxth	r2, r3
 800243c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800243e:	b29b      	uxth	r3, r3
 8002440:	029b      	lsls	r3, r3, #10
 8002442:	b29b      	uxth	r3, r3
 8002444:	4313      	orrs	r3, r2
 8002446:	b29a      	uxth	r2, r3
 8002448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244a:	801a      	strh	r2, [r3, #0]
 800244c:	e01c      	b.n	8002488 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	785b      	ldrb	r3, [r3, #1]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d118      	bne.n	8002488 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	647b      	str	r3, [r7, #68]	@ 0x44
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800246a:	4413      	add	r3, r2
 800246c:	647b      	str	r3, [r7, #68]	@ 0x44
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	011a      	lsls	r2, r3, #4
 8002474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002476:	4413      	add	r3, r2
 8002478:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800247c:	643b      	str	r3, [r7, #64]	@ 0x40
 800247e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002482:	b29a      	uxth	r2, r3
 8002484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002486:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	6959      	ldr	r1, [r3, #20]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	891a      	ldrh	r2, [r3, #8]
 8002494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002498:	b29b      	uxth	r3, r3
 800249a:	f003 f9e8 	bl	800586e <USB_WritePMA>
 800249e:	e1e2      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	3306      	adds	r3, #6
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d307      	bcc.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024e0:	1ad2      	subs	r2, r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	619a      	str	r2, [r3, #24]
 80024e6:	e002      	b.n	80024ee <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 80c0 	bne.w	8002678 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d126      	bne.n	800254e <HAL_PCD_EP_DB_Transmit+0x482>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002514:	4413      	add	r3, r2
 8002516:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	011a      	lsls	r2, r3, #4
 800251e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002520:	4413      	add	r3, r2
 8002522:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002526:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002528:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002532:	b29a      	uxth	r2, r3
 8002534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002536:	801a      	strh	r2, [r3, #0]
 8002538:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002546:	b29a      	uxth	r2, r3
 8002548:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800254a:	801a      	strh	r2, [r3, #0]
 800254c:	e01a      	b.n	8002584 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	785b      	ldrb	r3, [r3, #1]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d116      	bne.n	8002584 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	667b      	str	r3, [r7, #100]	@ 0x64
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002564:	b29b      	uxth	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800256a:	4413      	add	r3, r2
 800256c:	667b      	str	r3, [r7, #100]	@ 0x64
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	011a      	lsls	r2, r3, #4
 8002574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002576:	4413      	add	r3, r2
 8002578:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800257c:	663b      	str	r3, [r7, #96]	@ 0x60
 800257e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002580:	2200      	movs	r2, #0
 8002582:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	677b      	str	r3, [r7, #116]	@ 0x74
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d12b      	bne.n	80025ea <HAL_PCD_EP_DB_Transmit+0x51e>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025a6:	4413      	add	r3, r2
 80025a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	011a      	lsls	r2, r3, #4
 80025b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025b2:	4413      	add	r3, r2
 80025b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80025b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025ce:	801a      	strh	r2, [r3, #0]
 80025d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	e017      	b.n	800261a <HAL_PCD_EP_DB_Transmit+0x54e>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d113      	bne.n	800261a <HAL_PCD_EP_DB_Transmit+0x54e>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002600:	4413      	add	r3, r2
 8002602:	677b      	str	r3, [r7, #116]	@ 0x74
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	011a      	lsls	r2, r3, #4
 800260a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800260c:	4413      	add	r3, r2
 800260e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002612:	673b      	str	r3, [r7, #112]	@ 0x70
 8002614:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002616:	2200      	movs	r2, #0
 8002618:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f004 fd72 	bl	800710a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262c:	2b00      	cmp	r3, #0
 800262e:	f040 811a 	bne.w	8002866 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800264c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	441a      	add	r2, r3
 800265e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800266a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800266e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002672:	b29b      	uxth	r3, r3
 8002674:	8013      	strh	r3, [r2, #0]
 8002676:	e0f6      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d121      	bne.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800269c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	441a      	add	r2, r3
 80026ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80026b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	f040 80ca 	bne.w	8002866 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026da:	441a      	add	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	69da      	ldr	r2, [r3, #28]
 80026e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026e8:	441a      	add	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d30b      	bcc.n	8002712 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	6a1a      	ldr	r2, [r3, #32]
 8002706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800270a:	1ad2      	subs	r2, r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	621a      	str	r2, [r3, #32]
 8002710:	e017      	b.n	8002742 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d108      	bne.n	800272c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800271a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800271e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800272a:	e00a      	b.n	8002742 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2200      	movs	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	657b      	str	r3, [r7, #84]	@ 0x54
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d165      	bne.n	800281c <HAL_PCD_EP_DB_Transmit+0x750>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800275e:	b29b      	uxth	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002764:	4413      	add	r3, r2
 8002766:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	011a      	lsls	r2, r3, #4
 800276e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002770:	4413      	add	r3, r2
 8002772:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002776:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002778:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002782:	b29a      	uxth	r2, r3
 8002784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002786:	801a      	strh	r2, [r3, #0]
 8002788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800278c:	2b3e      	cmp	r3, #62	@ 0x3e
 800278e:	d91d      	bls.n	80027cc <HAL_PCD_EP_DB_Transmit+0x700>
 8002790:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002798:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <HAL_PCD_EP_DB_Transmit+0x6de>
 80027a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027a6:	3b01      	subs	r3, #1
 80027a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	029b      	lsls	r3, r3, #10
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4313      	orrs	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c8:	801a      	strh	r2, [r3, #0]
 80027ca:	e041      	b.n	8002850 <HAL_PCD_EP_DB_Transmit+0x784>
 80027cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <HAL_PCD_EP_DB_Transmit+0x71e>
 80027d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	e032      	b.n	8002850 <HAL_PCD_EP_DB_Transmit+0x784>
 80027ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_PCD_EP_DB_Transmit+0x738>
 80027fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002800:	3301      	adds	r3, #1
 8002802:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002804:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29a      	uxth	r2, r3
 800280a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800280c:	b29b      	uxth	r3, r3
 800280e:	029b      	lsls	r3, r3, #10
 8002810:	b29b      	uxth	r3, r3
 8002812:	4313      	orrs	r3, r2
 8002814:	b29a      	uxth	r2, r3
 8002816:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002818:	801a      	strh	r2, [r3, #0]
 800281a:	e019      	b.n	8002850 <HAL_PCD_EP_DB_Transmit+0x784>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	785b      	ldrb	r3, [r3, #1]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d115      	bne.n	8002850 <HAL_PCD_EP_DB_Transmit+0x784>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800282c:	b29b      	uxth	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002832:	4413      	add	r3, r2
 8002834:	657b      	str	r3, [r7, #84]	@ 0x54
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	011a      	lsls	r2, r3, #4
 800283c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800283e:	4413      	add	r3, r2
 8002840:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002844:	653b      	str	r3, [r7, #80]	@ 0x50
 8002846:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800284a:	b29a      	uxth	r2, r3
 800284c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800284e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	6959      	ldr	r1, [r3, #20]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	895a      	ldrh	r2, [r3, #10]
 800285c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002860:	b29b      	uxth	r3, r3
 8002862:	f003 f804 	bl	800586e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800287c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002880:	82bb      	strh	r3, [r7, #20]
 8002882:	8abb      	ldrh	r3, [r7, #20]
 8002884:	f083 0310 	eor.w	r3, r3, #16
 8002888:	82bb      	strh	r3, [r7, #20]
 800288a:	8abb      	ldrh	r3, [r7, #20]
 800288c:	f083 0320 	eor.w	r3, r3, #32
 8002890:	82bb      	strh	r3, [r7, #20]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	441a      	add	r2, r3
 80028a0:	8abb      	ldrh	r3, [r7, #20]
 80028a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3790      	adds	r7, #144	@ 0x90
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	817b      	strh	r3, [r7, #10]
 80028ce:	4613      	mov	r3, r2
 80028d0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028d2:	897b      	ldrh	r3, [r7, #10]
 80028d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	f003 0207 	and.w	r2, r3, #7
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	3310      	adds	r3, #16
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4413      	add	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	e009      	b.n	800290a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028f6:	897a      	ldrh	r2, [r7, #10]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800290a:	893b      	ldrh	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2200      	movs	r2, #0
 8002914:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	b29a      	uxth	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	80da      	strh	r2, [r3, #6]
 800291e:	e00b      	b.n	8002938 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2201      	movs	r2, #1
 8002924:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	b29a      	uxth	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	b29a      	uxth	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e272      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8087 	beq.w	8002a72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002964:	4b92      	ldr	r3, [pc, #584]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b04      	cmp	r3, #4
 800296e:	d00c      	beq.n	800298a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002970:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	2b08      	cmp	r3, #8
 800297a:	d112      	bne.n	80029a2 <HAL_RCC_OscConfig+0x5e>
 800297c:	4b8c      	ldr	r3, [pc, #560]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002988:	d10b      	bne.n	80029a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298a:	4b89      	ldr	r3, [pc, #548]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d06c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x12c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d168      	bne.n	8002a70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e24c      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029aa:	d106      	bne.n	80029ba <HAL_RCC_OscConfig+0x76>
 80029ac:	4b80      	ldr	r3, [pc, #512]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a7f      	ldr	r2, [pc, #508]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	e02e      	b.n	8002a18 <HAL_RCC_OscConfig+0xd4>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0x98>
 80029c2:	4b7b      	ldr	r3, [pc, #492]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7a      	ldr	r2, [pc, #488]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	4b78      	ldr	r3, [pc, #480]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a77      	ldr	r2, [pc, #476]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e01d      	b.n	8002a18 <HAL_RCC_OscConfig+0xd4>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0xbc>
 80029e6:	4b72      	ldr	r3, [pc, #456]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a71      	ldr	r2, [pc, #452]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0xd4>
 8002a00:	4b6b      	ldr	r3, [pc, #428]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6a      	ldr	r2, [pc, #424]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b68      	ldr	r3, [pc, #416]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a67      	ldr	r2, [pc, #412]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe f90c 	bl	8000c3c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe f908 	bl	8000c3c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	@ 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e200      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0xe4>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe f8f8 	bl	8000c3c <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a50:	f7fe f8f4 	bl	8000c3c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	@ 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e1ec      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	4b53      	ldr	r3, [pc, #332]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x10c>
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d063      	beq.n	8002b46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a7e:	4b4c      	ldr	r3, [pc, #304]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a8a:	4b49      	ldr	r3, [pc, #292]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d11c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x18c>
 8002a96:	4b46      	ldr	r3, [pc, #280]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d116      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	4b43      	ldr	r3, [pc, #268]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_RCC_OscConfig+0x176>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e1c0      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aba:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4939      	ldr	r1, [pc, #228]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	e03a      	b.n	8002b46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad8:	4b36      	ldr	r3, [pc, #216]	@ (8002bb4 <HAL_RCC_OscConfig+0x270>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe f8ad 	bl	8000c3c <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae6:	f7fe f8a9 	bl	8000c3c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1a1      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af8:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4927      	ldr	r1, [pc, #156]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	600b      	str	r3, [r1, #0]
 8002b18:	e015      	b.n	8002b46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1a:	4b26      	ldr	r3, [pc, #152]	@ (8002bb4 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe f88c 	bl	8000c3c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b28:	f7fe f888 	bl	8000c3c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e180      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d03a      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d019      	beq.n	8002b8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5a:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7fe f86c 	bl	8000c3c <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b68:	f7fe f868 	bl	8000c3c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e160      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b86:	2001      	movs	r0, #1
 8002b88:	f000 fa9c 	bl	80030c4 <RCC_Delay>
 8002b8c:	e01c      	b.n	8002bc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb8 <HAL_RCC_OscConfig+0x274>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b94:	f7fe f852 	bl	8000c3c <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9a:	e00f      	b.n	8002bbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9c:	f7fe f84e 	bl	8000c3c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d908      	bls.n	8002bbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e146      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	42420000 	.word	0x42420000
 8002bb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbc:	4b92      	ldr	r3, [pc, #584]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1e9      	bne.n	8002b9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80a6 	beq.w	8002d22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bda:	4b8b      	ldr	r3, [pc, #556]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10d      	bne.n	8002c02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	4b88      	ldr	r3, [pc, #544]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4a87      	ldr	r2, [pc, #540]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	61d3      	str	r3, [r2, #28]
 8002bf2:	4b85      	ldr	r3, [pc, #532]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c02:	4b82      	ldr	r3, [pc, #520]	@ (8002e0c <HAL_RCC_OscConfig+0x4c8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d118      	bne.n	8002c40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e0c <HAL_RCC_OscConfig+0x4c8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7e      	ldr	r2, [pc, #504]	@ (8002e0c <HAL_RCC_OscConfig+0x4c8>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1a:	f7fe f80f 	bl	8000c3c <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c22:	f7fe f80b 	bl	8000c3c <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b64      	cmp	r3, #100	@ 0x64
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e103      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	4b75      	ldr	r3, [pc, #468]	@ (8002e0c <HAL_RCC_OscConfig+0x4c8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x312>
 8002c48:	4b6f      	ldr	r3, [pc, #444]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6213      	str	r3, [r2, #32]
 8002c54:	e02d      	b.n	8002cb2 <HAL_RCC_OscConfig+0x36e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x334>
 8002c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	4a69      	ldr	r2, [pc, #420]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6213      	str	r3, [r2, #32]
 8002c6a:	4b67      	ldr	r3, [pc, #412]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4a66      	ldr	r2, [pc, #408]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	6213      	str	r3, [r2, #32]
 8002c76:	e01c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x36e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCC_OscConfig+0x356>
 8002c80:	4b61      	ldr	r3, [pc, #388]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	4a60      	ldr	r2, [pc, #384]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	6213      	str	r3, [r2, #32]
 8002c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	4a5d      	ldr	r2, [pc, #372]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6213      	str	r3, [r2, #32]
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x36e>
 8002c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	6213      	str	r3, [r2, #32]
 8002ca6:	4b58      	ldr	r3, [pc, #352]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4a57      	ldr	r2, [pc, #348]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	f023 0304 	bic.w	r3, r3, #4
 8002cb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d015      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7fd ffbf 	bl	8000c3c <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7fd ffbb 	bl	8000c3c <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e0b1      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ee      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x37e>
 8002ce4:	e014      	b.n	8002d10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7fd ffa9 	bl	8000c3c <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fd ffa5 	bl	8000c3c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e09b      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d04:	4b40      	ldr	r3, [pc, #256]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ee      	bne.n	8002cee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d105      	bne.n	8002d22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d16:	4b3c      	ldr	r3, [pc, #240]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4a3b      	ldr	r2, [pc, #236]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8087 	beq.w	8002e3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d2c:	4b36      	ldr	r3, [pc, #216]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d061      	beq.n	8002dfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d146      	bne.n	8002dce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d40:	4b33      	ldr	r3, [pc, #204]	@ (8002e10 <HAL_RCC_OscConfig+0x4cc>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fd ff79 	bl	8000c3c <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fd ff75 	bl	8000c3c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e06d      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d60:	4b29      	ldr	r3, [pc, #164]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d74:	d108      	bne.n	8002d88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d76:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4921      	ldr	r1, [pc, #132]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d88:	4b1f      	ldr	r3, [pc, #124]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a19      	ldr	r1, [r3, #32]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	491b      	ldr	r1, [pc, #108]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <HAL_RCC_OscConfig+0x4cc>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fd ff49 	bl	8000c3c <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fd ff45 	bl	8000c3c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e03d      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x46a>
 8002dcc:	e035      	b.n	8002e3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dce:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <HAL_RCC_OscConfig+0x4cc>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fd ff32 	bl	8000c3c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fd ff2e 	bl	8000c3c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e026      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x498>
 8002dfa:	e01e      	b.n	8002e3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e019      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e14:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <HAL_RCC_OscConfig+0x500>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000

08002e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0d0      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d910      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b67      	ldr	r3, [pc, #412]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 0207 	bic.w	r2, r3, #7
 8002e72:	4965      	ldr	r1, [pc, #404]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b63      	ldr	r3, [pc, #396]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0b8      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d020      	beq.n	8002eda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea4:	4b59      	ldr	r3, [pc, #356]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a58      	ldr	r2, [pc, #352]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002eae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ebc:	4b53      	ldr	r3, [pc, #332]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a52      	ldr	r2, [pc, #328]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ec6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b50      	ldr	r3, [pc, #320]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	494d      	ldr	r1, [pc, #308]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d040      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b47      	ldr	r3, [pc, #284]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d115      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e07f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	4b41      	ldr	r3, [pc, #260]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e073      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	4b3d      	ldr	r3, [pc, #244]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e06b      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	4b39      	ldr	r3, [pc, #228]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4936      	ldr	r1, [pc, #216]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f38:	f7fd fe80 	bl	8000c3c <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7fd fe7c 	bl	8000c3c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e053      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b2d      	ldr	r3, [pc, #180]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 020c 	and.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1eb      	bne.n	8002f40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b27      	ldr	r3, [pc, #156]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d210      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 0207 	bic.w	r2, r3, #7
 8002f7e:	4922      	ldr	r1, [pc, #136]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e032      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b19      	ldr	r3, [pc, #100]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4916      	ldr	r1, [pc, #88]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fc2:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	490e      	ldr	r1, [pc, #56]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fd6:	f000 f821 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	490a      	ldr	r1, [pc, #40]	@ (8003010 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe8:	5ccb      	ldrb	r3, [r1, r3]
 8002fea:	fa22 f303 	lsr.w	r3, r2, r3
 8002fee:	4a09      	ldr	r2, [pc, #36]	@ (8003014 <HAL_RCC_ClockConfig+0x1cc>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ff2:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_RCC_ClockConfig+0x1d0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd fdde 	bl	8000bb8 <HAL_InitTick>

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40022000 	.word	0x40022000
 800300c:	40021000 	.word	0x40021000
 8003010:	08008660 	.word	0x08008660
 8003014:	20000000 	.word	0x20000000
 8003018:	20000004 	.word	0x20000004

0800301c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003036:	4b1e      	ldr	r3, [pc, #120]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b04      	cmp	r3, #4
 8003044:	d002      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x30>
 8003046:	2b08      	cmp	r3, #8
 8003048:	d003      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0x36>
 800304a:	e027      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800304c:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800304e:	613b      	str	r3, [r7, #16]
      break;
 8003050:	e027      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	0c9b      	lsrs	r3, r3, #18
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	4a17      	ldr	r2, [pc, #92]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800305c:	5cd3      	ldrb	r3, [r2, r3]
 800305e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d010      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800306a:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	0c5b      	lsrs	r3, r3, #17
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	4a11      	ldr	r2, [pc, #68]	@ (80030bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003076:	5cd3      	ldrb	r3, [r2, r3]
 8003078:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a0d      	ldr	r2, [pc, #52]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800307e:	fb03 f202 	mul.w	r2, r3, r2
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e004      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a0c      	ldr	r2, [pc, #48]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003090:	fb02 f303 	mul.w	r3, r2, r3
 8003094:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	613b      	str	r3, [r7, #16]
      break;
 800309a:	e002      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800309e:	613b      	str	r3, [r7, #16]
      break;
 80030a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a2:	693b      	ldr	r3, [r7, #16]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	007a1200 	.word	0x007a1200
 80030b8:	08008670 	.word	0x08008670
 80030bc:	08008680 	.word	0x08008680
 80030c0:	003d0900 	.word	0x003d0900

080030c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030cc:	4b0a      	ldr	r3, [pc, #40]	@ (80030f8 <RCC_Delay+0x34>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	@ (80030fc <RCC_Delay+0x38>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	0a5b      	lsrs	r3, r3, #9
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030e0:	bf00      	nop
  }
  while (Delay --);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1e5a      	subs	r2, r3, #1
 80030e6:	60fa      	str	r2, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f9      	bne.n	80030e0 <RCC_Delay+0x1c>
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	20000000 	.word	0x20000000
 80030fc:	10624dd3 	.word	0x10624dd3

08003100 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d07d      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800311c:	2300      	movs	r3, #0
 800311e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003120:	4b4f      	ldr	r3, [pc, #316]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10d      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	4b4c      	ldr	r3, [pc, #304]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	4a4b      	ldr	r2, [pc, #300]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003136:	61d3      	str	r3, [r2, #28]
 8003138:	4b49      	ldr	r3, [pc, #292]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b46      	ldr	r3, [pc, #280]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d118      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003154:	4b43      	ldr	r3, [pc, #268]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a42      	ldr	r2, [pc, #264]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800315a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003160:	f7fd fd6c 	bl	8000c3c <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	e008      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003168:	f7fd fd68 	bl	8000c3c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	@ 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e06d      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b3a      	ldr	r3, [pc, #232]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003186:	4b36      	ldr	r3, [pc, #216]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800318e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02e      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d027      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031ba:	4a29      	ldr	r2, [pc, #164]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d014      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fd fd37 	bl	8000c3c <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fd fd33 	bl	8000c3c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e036      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ee      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4917      	ldr	r1, [pc, #92]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	4313      	orrs	r3, r2
 8003204:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320c:	4b14      	ldr	r3, [pc, #80]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	4a13      	ldr	r2, [pc, #76]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003216:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003224:	4b0e      	ldr	r3, [pc, #56]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	490b      	ldr	r1, [pc, #44]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003242:	4b07      	ldr	r3, [pc, #28]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	4904      	ldr	r1, [pc, #16]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
 8003264:	40007000 	.word	0x40007000
 8003268:	42420440 	.word	0x42420440

0800326c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	4638      	mov	r0, r7
 8003276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003296:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800329a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	b29a      	uxth	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b085      	sub	sp, #20
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80032ba:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80032be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	4013      	ands	r3, r2
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	4638      	mov	r0, r7
 8003308:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003338:	b480      	push	{r7}
 800333a:	b09d      	sub	sp, #116	@ 0x74
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800335a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800335e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	78db      	ldrb	r3, [r3, #3]
 8003366:	2b03      	cmp	r3, #3
 8003368:	d81f      	bhi.n	80033aa <USB_ActivateEndpoint+0x72>
 800336a:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <USB_ActivateEndpoint+0x38>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	08003381 	.word	0x08003381
 8003374:	0800339d 	.word	0x0800339d
 8003378:	080033b3 	.word	0x080033b3
 800337c:	0800338f 	.word	0x0800338f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003380:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003384:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003388:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800338c:	e012      	b.n	80033b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800338e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003392:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003396:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800339a:	e00b      	b.n	80033b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800339c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80033a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80033a8:	e004      	b.n	80033b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80033b0:	e000      	b.n	80033b4 <USB_ActivateEndpoint+0x7c>
      break;
 80033b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	441a      	add	r2, r3
 80033be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80033c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	7812      	ldrb	r2, [r2, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	441a      	add	r2, r3
 8003402:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800340a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800340e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003416:	b29b      	uxth	r3, r3
 8003418:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	7b1b      	ldrb	r3, [r3, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 8178 	bne.w	8003714 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	785b      	ldrb	r3, [r3, #1]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8084 	beq.w	8003536 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003438:	b29b      	uxth	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	4413      	add	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	011a      	lsls	r2, r3, #4
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	88db      	ldrh	r3, [r3, #6]
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	b29b      	uxth	r3, r3
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	827b      	strh	r3, [r7, #18]
 8003470:	8a7b      	ldrh	r3, [r7, #18]
 8003472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01b      	beq.n	80034b2 <USB_ActivateEndpoint+0x17a>
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800348c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003490:	823b      	strh	r3, [r7, #16]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	441a      	add	r2, r3
 800349c:	8a3b      	ldrh	r3, [r7, #16]
 800349e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	78db      	ldrb	r3, [r3, #3]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d020      	beq.n	80034fc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034d0:	81bb      	strh	r3, [r7, #12]
 80034d2:	89bb      	ldrh	r3, [r7, #12]
 80034d4:	f083 0320 	eor.w	r3, r3, #32
 80034d8:	81bb      	strh	r3, [r7, #12]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	441a      	add	r2, r3
 80034e4:	89bb      	ldrh	r3, [r7, #12]
 80034e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	8013      	strh	r3, [r2, #0]
 80034fa:	e2d5      	b.n	8003aa8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800350e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003512:	81fb      	strh	r3, [r7, #14]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	441a      	add	r2, r3
 800351e:	89fb      	ldrh	r3, [r7, #14]
 8003520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003528:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800352c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003530:	b29b      	uxth	r3, r3
 8003532:	8013      	strh	r3, [r2, #0]
 8003534:	e2b8      	b.n	8003aa8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	633b      	str	r3, [r7, #48]	@ 0x30
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003540:	b29b      	uxth	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	4413      	add	r3, r2
 8003548:	633b      	str	r3, [r7, #48]	@ 0x30
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	011a      	lsls	r2, r3, #4
 8003550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003552:	4413      	add	r3, r2
 8003554:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	88db      	ldrh	r3, [r3, #6]
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	b29b      	uxth	r3, r3
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003568:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003574:	b29b      	uxth	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357a:	4413      	add	r3, r2
 800357c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	011a      	lsls	r2, r3, #4
 8003584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003586:	4413      	add	r3, r2
 8003588:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003598:	b29a      	uxth	r2, r3
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	801a      	strh	r2, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80035a4:	d91d      	bls.n	80035e2 <USB_ActivateEndpoint+0x2aa>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d102      	bne.n	80035c0 <USB_ActivateEndpoint+0x288>
 80035ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035bc:	3b01      	subs	r3, #1
 80035be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	029b      	lsls	r3, r3, #10
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	4313      	orrs	r3, r2
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035da:	b29a      	uxth	r2, r3
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	e026      	b.n	8003630 <USB_ActivateEndpoint+0x2f8>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <USB_ActivateEndpoint+0x2c8>
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	801a      	strh	r2, [r3, #0]
 80035fe:	e017      	b.n	8003630 <USB_ActivateEndpoint+0x2f8>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <USB_ActivateEndpoint+0x2e2>
 8003614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003616:	3301      	adds	r3, #1
 8003618:	66bb      	str	r3, [r7, #104]	@ 0x68
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29a      	uxth	r2, r3
 8003620:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003622:	b29b      	uxth	r3, r3
 8003624:	029b      	lsls	r3, r3, #10
 8003626:	b29b      	uxth	r3, r3
 8003628:	4313      	orrs	r3, r2
 800362a:	b29a      	uxth	r2, r3
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800363e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01b      	beq.n	8003680 <USB_ActivateEndpoint+0x348>
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800365a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800365e:	843b      	strh	r3, [r7, #32]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	8c3b      	ldrh	r3, [r7, #32]
 800366c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003674:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800367c:	b29b      	uxth	r3, r3
 800367e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d124      	bne.n	80036d2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800369a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369e:	83bb      	strh	r3, [r7, #28]
 80036a0:	8bbb      	ldrh	r3, [r7, #28]
 80036a2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80036a6:	83bb      	strh	r3, [r7, #28]
 80036a8:	8bbb      	ldrh	r3, [r7, #28]
 80036aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036ae:	83bb      	strh	r3, [r7, #28]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	8bbb      	ldrh	r3, [r7, #28]
 80036bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	8013      	strh	r3, [r2, #0]
 80036d0:	e1ea      	b.n	8003aa8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e8:	83fb      	strh	r3, [r7, #30]
 80036ea:	8bfb      	ldrh	r3, [r7, #30]
 80036ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036f0:	83fb      	strh	r3, [r7, #30]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	441a      	add	r2, r3
 80036fc:	8bfb      	ldrh	r3, [r7, #30]
 80036fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800370a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800370e:	b29b      	uxth	r3, r3
 8003710:	8013      	strh	r3, [r2, #0]
 8003712:	e1c9      	b.n	8003aa8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	78db      	ldrb	r3, [r3, #3]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d11e      	bne.n	800375a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800372e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003732:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	441a      	add	r2, r3
 8003740:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800374c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003754:	b29b      	uxth	r3, r3
 8003756:	8013      	strh	r3, [r2, #0]
 8003758:	e01d      	b.n	8003796 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	b29b      	uxth	r3, r3
 8003768:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800376c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003770:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	441a      	add	r2, r3
 800377e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800378a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800378e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003792:	b29b      	uxth	r3, r3
 8003794:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037a6:	4413      	add	r3, r2
 80037a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	011a      	lsls	r2, r3, #4
 80037b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	891b      	ldrh	r3, [r3, #8]
 80037be:	085b      	lsrs	r3, r3, #1
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037c8:	801a      	strh	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037da:	4413      	add	r3, r2
 80037dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	011a      	lsls	r2, r3, #4
 80037e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80037ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	895b      	ldrh	r3, [r3, #10]
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037fc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 8093 	bne.w	800392e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003818:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800381c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01b      	beq.n	800385c <USB_ActivateEndpoint+0x524>
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800383a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	441a      	add	r2, r3
 8003846:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003848:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800384c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003850:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003858:	b29b      	uxth	r3, r3
 800385a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800386a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800386c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01b      	beq.n	80038ac <USB_ActivateEndpoint+0x574>
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	b29b      	uxth	r3, r3
 8003882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800388a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800389c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80038c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80038c6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80038ca:	873b      	strh	r3, [r7, #56]	@ 0x38
 80038cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80038ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038d2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	441a      	add	r2, r3
 80038de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80038e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29b      	uxth	r3, r3
 8003902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800390a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	441a      	add	r2, r3
 8003916:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800391c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003928:	b29b      	uxth	r3, r3
 800392a:	8013      	strh	r3, [r2, #0]
 800392c:	e0bc      	b.n	8003aa8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800393e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01d      	beq.n	8003986 <USB_ActivateEndpoint+0x64e>
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800395c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003960:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	441a      	add	r2, r3
 800396e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800397a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800397e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003982:	b29b      	uxth	r3, r3
 8003984:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003996:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800399a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01d      	beq.n	80039de <USB_ActivateEndpoint+0x6a6>
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039b8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	441a      	add	r2, r3
 80039c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80039ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039da:	b29b      	uxth	r3, r3
 80039dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	78db      	ldrb	r3, [r3, #3]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d024      	beq.n	8003a30 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039fc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003a00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003a04:	f083 0320 	eor.w	r3, r3, #32
 8003a08:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	441a      	add	r2, r3
 8003a16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	8013      	strh	r3, [r2, #0]
 8003a2e:	e01d      	b.n	8003a6c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a46:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	441a      	add	r2, r3
 8003a54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a82:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	441a      	add	r2, r3
 8003a90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003a94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003aa8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3774      	adds	r7, #116	@ 0x74
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop

08003ab8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b08d      	sub	sp, #52	@ 0x34
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	7b1b      	ldrb	r3, [r3, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 808e 	bne.w	8003be8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	785b      	ldrb	r3, [r3, #1]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d044      	beq.n	8003b5e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	81bb      	strh	r3, [r7, #12]
 8003ae2:	89bb      	ldrh	r3, [r7, #12]
 8003ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01b      	beq.n	8003b24 <USB_DeactivateEndpoint+0x6c>
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b02:	817b      	strh	r3, [r7, #10]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	441a      	add	r2, r3
 8003b0e:	897b      	ldrh	r3, [r7, #10]
 8003b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b3a:	813b      	strh	r3, [r7, #8]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	441a      	add	r2, r3
 8003b46:	893b      	ldrh	r3, [r7, #8]
 8003b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	8013      	strh	r3, [r2, #0]
 8003b5c:	e192      	b.n	8003e84 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	827b      	strh	r3, [r7, #18]
 8003b6c:	8a7b      	ldrh	r3, [r7, #18]
 8003b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01b      	beq.n	8003bae <USB_DeactivateEndpoint+0xf6>
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8c:	823b      	strh	r3, [r7, #16]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	441a      	add	r2, r3
 8003b98:	8a3b      	ldrh	r3, [r7, #16]
 8003b9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ba2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc4:	81fb      	strh	r3, [r7, #14]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	441a      	add	r2, r3
 8003bd0:	89fb      	ldrh	r3, [r7, #14]
 8003bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	8013      	strh	r3, [r2, #0]
 8003be6:	e14d      	b.n	8003e84 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	785b      	ldrb	r3, [r3, #1]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f040 80a5 	bne.w	8003d3c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	843b      	strh	r3, [r7, #32]
 8003c00:	8c3b      	ldrh	r3, [r7, #32]
 8003c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d01b      	beq.n	8003c42 <USB_DeactivateEndpoint+0x18a>
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c20:	83fb      	strh	r3, [r7, #30]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	441a      	add	r2, r3
 8003c2c:	8bfb      	ldrh	r3, [r7, #30]
 8003c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	83bb      	strh	r3, [r7, #28]
 8003c50:	8bbb      	ldrh	r3, [r7, #28]
 8003c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01b      	beq.n	8003c92 <USB_DeactivateEndpoint+0x1da>
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c70:	837b      	strh	r3, [r7, #26]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	441a      	add	r2, r3
 8003c7c:	8b7b      	ldrh	r3, [r7, #26]
 8003c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca8:	833b      	strh	r3, [r7, #24]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	441a      	add	r2, r3
 8003cb4:	8b3b      	ldrh	r3, [r7, #24]
 8003cb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce0:	82fb      	strh	r3, [r7, #22]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	441a      	add	r2, r3
 8003cec:	8afb      	ldrh	r3, [r7, #22]
 8003cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d18:	82bb      	strh	r3, [r7, #20]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	441a      	add	r2, r3
 8003d24:	8abb      	ldrh	r3, [r7, #20]
 8003d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	8013      	strh	r3, [r2, #0]
 8003d3a:	e0a3      	b.n	8003e84 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003d4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003d4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01b      	beq.n	8003d8c <USB_DeactivateEndpoint+0x2d4>
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	441a      	add	r2, r3
 8003d76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003d78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003d9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01b      	beq.n	8003ddc <USB_DeactivateEndpoint+0x324>
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dba:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	441a      	add	r2, r3
 8003dc6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	441a      	add	r2, r3
 8003dfe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	441a      	add	r2, r3
 8003e36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e62:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	441a      	add	r2, r3
 8003e6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3734      	adds	r7, #52	@ 0x34
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b0c2      	sub	sp, #264	@ 0x108
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e9e:	6018      	str	r0, [r3, #0]
 8003ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ea8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003eae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	785b      	ldrb	r3, [r3, #1]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	f040 86b7 	bne.w	8004c2a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d908      	bls.n	8003eea <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ee8:	e007      	b.n	8003efa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	7b1b      	ldrb	r3, [r3, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d13a      	bne.n	8003f80 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6959      	ldr	r1, [r3, #20]
 8003f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	88da      	ldrh	r2, [r3, #6]
 8003f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003f2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003f30:	6800      	ldr	r0, [r0, #0]
 8003f32:	f001 fc9c 	bl	800586e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	011a      	lsls	r2, r3, #4
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	801a      	strh	r2, [r3, #0]
 8003f7c:	f000 be1f 	b.w	8004bbe <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	78db      	ldrb	r3, [r3, #3]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	f040 8462 	bne.w	8004856 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6a1a      	ldr	r2, [r3, #32]
 8003f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	f240 83df 	bls.w	800476e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	441a      	add	r2, r3
 8003ff4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004000:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004008:	b29b      	uxth	r3, r3
 800400a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800400c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401c:	1ad2      	subs	r2, r2, r3
 800401e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800402a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800402e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 81c7 	beq.w	80043e0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	633b      	str	r3, [r7, #48]	@ 0x30
 800405e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	785b      	ldrb	r3, [r3, #1]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d177      	bne.n	800415e <USB_EPStartXfer+0x2ce>
 800406e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004072:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800407a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800407e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004088:	b29b      	uxth	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408e:	4413      	add	r3, r2
 8004090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	011a      	lsls	r2, r3, #4
 80040a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a2:	4413      	add	r3, r2
 80040a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	801a      	strh	r2, [r3, #0]
 80040ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040be:	2b3e      	cmp	r3, #62	@ 0x3e
 80040c0:	d921      	bls.n	8004106 <USB_EPStartXfer+0x276>
 80040c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80040cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d104      	bne.n	80040e2 <USB_EPStartXfer+0x252>
 80040d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80040dc:	3b01      	subs	r3, #1
 80040de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	029b      	lsls	r3, r3, #10
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	4313      	orrs	r3, r2
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fe:	b29a      	uxth	r2, r3
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	801a      	strh	r2, [r3, #0]
 8004104:	e050      	b.n	80041a8 <USB_EPStartXfer+0x318>
 8004106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <USB_EPStartXfer+0x294>
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800411c:	b29a      	uxth	r2, r3
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	801a      	strh	r2, [r3, #0]
 8004122:	e041      	b.n	80041a8 <USB_EPStartXfer+0x318>
 8004124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800412e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <USB_EPStartXfer+0x2b4>
 800413a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800413e:	3301      	adds	r3, #1
 8004140:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29a      	uxth	r2, r3
 800414a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800414e:	b29b      	uxth	r3, r3
 8004150:	029b      	lsls	r3, r3, #10
 8004152:	b29b      	uxth	r3, r3
 8004154:	4313      	orrs	r3, r2
 8004156:	b29a      	uxth	r2, r3
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	801a      	strh	r2, [r3, #0]
 800415c:	e024      	b.n	80041a8 <USB_EPStartXfer+0x318>
 800415e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d11c      	bne.n	80041a8 <USB_EPStartXfer+0x318>
 800416e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004172:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800417c:	b29b      	uxth	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004182:	4413      	add	r3, r2
 8004184:	633b      	str	r3, [r7, #48]	@ 0x30
 8004186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800418a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	011a      	lsls	r2, r3, #4
 8004194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004196:	4413      	add	r3, r2
 8004198:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800419c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800419e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80041a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	895b      	ldrh	r3, [r3, #10]
 80041b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6959      	ldr	r1, [r3, #20]
 80041c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80041ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80041d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80041d6:	6800      	ldr	r0, [r0, #0]
 80041d8:	f001 fb49 	bl	800586e <USB_WritePMA>
            ep->xfer_buff += len;
 80041dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ec:	441a      	add	r2, r3
 80041ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80041fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6a1a      	ldr	r2, [r3, #32]
 8004206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800420a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	429a      	cmp	r2, r3
 8004214:	d90f      	bls.n	8004236 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800421a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a1a      	ldr	r2, [r3, #32]
 8004222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004226:	1ad2      	subs	r2, r2, r3
 8004228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800422c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	621a      	str	r2, [r3, #32]
 8004234:	e00e      	b.n	8004254 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800423a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800424a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2200      	movs	r2, #0
 8004252:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	785b      	ldrb	r3, [r3, #1]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d177      	bne.n	8004354 <USB_EPStartXfer+0x4c4>
 8004264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004274:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800427e:	b29b      	uxth	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	4413      	add	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800428c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	011a      	lsls	r2, r3, #4
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	4413      	add	r3, r2
 800429a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	801a      	strh	r2, [r3, #0]
 80042b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80042b6:	d921      	bls.n	80042fc <USB_EPStartXfer+0x46c>
 80042b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80042c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <USB_EPStartXfer+0x448>
 80042ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042d2:	3b01      	subs	r3, #1
 80042d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	b29a      	uxth	r2, r3
 80042de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	029b      	lsls	r3, r3, #10
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4313      	orrs	r3, r2
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	e056      	b.n	80043aa <USB_EPStartXfer+0x51a>
 80042fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <USB_EPStartXfer+0x48a>
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004312:	b29a      	uxth	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	801a      	strh	r2, [r3, #0]
 8004318:	e047      	b.n	80043aa <USB_EPStartXfer+0x51a>
 800431a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431e:	085b      	lsrs	r3, r3, #1
 8004320:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <USB_EPStartXfer+0x4aa>
 8004330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004334:	3301      	adds	r3, #1
 8004336:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29a      	uxth	r2, r3
 8004340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004344:	b29b      	uxth	r3, r3
 8004346:	029b      	lsls	r3, r3, #10
 8004348:	b29b      	uxth	r3, r3
 800434a:	4313      	orrs	r3, r2
 800434c:	b29a      	uxth	r2, r3
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	e02a      	b.n	80043aa <USB_EPStartXfer+0x51a>
 8004354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	785b      	ldrb	r3, [r3, #1]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d122      	bne.n	80043aa <USB_EPStartXfer+0x51a>
 8004364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004368:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	623b      	str	r3, [r7, #32]
 8004370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004374:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800437e:	b29b      	uxth	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	4413      	add	r3, r2
 8004386:	623b      	str	r3, [r7, #32]
 8004388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800438c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	011a      	lsls	r2, r3, #4
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	4413      	add	r3, r2
 800439a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80043aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	891b      	ldrh	r3, [r3, #8]
 80043b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6959      	ldr	r1, [r3, #20]
 80043c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80043d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80043d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80043d8:	6800      	ldr	r0, [r0, #0]
 80043da:	f001 fa48 	bl	800586e <USB_WritePMA>
 80043de:	e3ee      	b.n	8004bbe <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	785b      	ldrb	r3, [r3, #1]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d177      	bne.n	80044e0 <USB_EPStartXfer+0x650>
 80043f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800440a:	b29b      	uxth	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004410:	4413      	add	r3, r2
 8004412:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	011a      	lsls	r2, r3, #4
 8004422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004424:	4413      	add	r3, r2
 8004426:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800442a:	647b      	str	r3, [r7, #68]	@ 0x44
 800442c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29b      	uxth	r3, r3
 8004432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004436:	b29a      	uxth	r2, r3
 8004438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004440:	2b3e      	cmp	r3, #62	@ 0x3e
 8004442:	d921      	bls.n	8004488 <USB_EPStartXfer+0x5f8>
 8004444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800444e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <USB_EPStartXfer+0x5d4>
 800445a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800445e:	3b01      	subs	r3, #1
 8004460:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29a      	uxth	r2, r3
 800446a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800446e:	b29b      	uxth	r3, r3
 8004470:	029b      	lsls	r3, r3, #10
 8004472:	b29b      	uxth	r3, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	b29b      	uxth	r3, r3
 8004478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800447c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004480:	b29a      	uxth	r2, r3
 8004482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	e056      	b.n	8004536 <USB_EPStartXfer+0x6a6>
 8004488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <USB_EPStartXfer+0x616>
 8004490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e047      	b.n	8004536 <USB_EPStartXfer+0x6a6>
 80044a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80044b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <USB_EPStartXfer+0x636>
 80044bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044c0:	3301      	adds	r3, #1
 80044c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80044c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	029b      	lsls	r3, r3, #10
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	4313      	orrs	r3, r2
 80044d8:	b29a      	uxth	r2, r3
 80044da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044dc:	801a      	strh	r2, [r3, #0]
 80044de:	e02a      	b.n	8004536 <USB_EPStartXfer+0x6a6>
 80044e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d122      	bne.n	8004536 <USB_EPStartXfer+0x6a6>
 80044f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80044fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004500:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800450a:	b29b      	uxth	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004510:	4413      	add	r3, r2
 8004512:	653b      	str	r3, [r7, #80]	@ 0x50
 8004514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	011a      	lsls	r2, r3, #4
 8004522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004524:	4413      	add	r3, r2
 8004526:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800452a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800452c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004530:	b29a      	uxth	r2, r3
 8004532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004534:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800453a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	891b      	ldrh	r3, [r3, #8]
 8004542:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800454a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6959      	ldr	r1, [r3, #20]
 8004552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004556:	b29b      	uxth	r3, r3
 8004558:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800455c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004560:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004564:	6800      	ldr	r0, [r0, #0]
 8004566:	f001 f982 	bl	800586e <USB_WritePMA>
            ep->xfer_buff += len;
 800456a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800456e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800457a:	441a      	add	r2, r3
 800457c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800458c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a1a      	ldr	r2, [r3, #32]
 8004594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d90f      	bls.n	80045c4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80045a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a1a      	ldr	r2, [r3, #32]
 80045b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b4:	1ad2      	subs	r2, r2, r3
 80045b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	621a      	str	r2, [r3, #32]
 80045c2:	e00e      	b.n	80045e2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80045c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80045d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2200      	movs	r2, #0
 80045e0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80045ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	785b      	ldrb	r3, [r3, #1]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d177      	bne.n	80046ee <USB_EPStartXfer+0x85e>
 80045fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	63bb      	str	r3, [r7, #56]	@ 0x38
 800460a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800460e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004618:	b29b      	uxth	r3, r3
 800461a:	461a      	mov	r2, r3
 800461c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461e:	4413      	add	r3, r2
 8004620:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	011a      	lsls	r2, r3, #4
 8004630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004632:	4413      	add	r3, r2
 8004634:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004638:	637b      	str	r3, [r7, #52]	@ 0x34
 800463a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004644:	b29a      	uxth	r2, r3
 8004646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004648:	801a      	strh	r2, [r3, #0]
 800464a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004650:	d921      	bls.n	8004696 <USB_EPStartXfer+0x806>
 8004652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800465c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <USB_EPStartXfer+0x7e2>
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466c:	3b01      	subs	r3, #1
 800466e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29a      	uxth	r2, r3
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467c:	b29b      	uxth	r3, r3
 800467e:	029b      	lsls	r3, r3, #10
 8004680:	b29b      	uxth	r3, r3
 8004682:	4313      	orrs	r3, r2
 8004684:	b29b      	uxth	r3, r3
 8004686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800468a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800468e:	b29a      	uxth	r2, r3
 8004690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004692:	801a      	strh	r2, [r3, #0]
 8004694:	e050      	b.n	8004738 <USB_EPStartXfer+0x8a8>
 8004696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <USB_EPStartXfer+0x824>
 800469e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b0:	801a      	strh	r2, [r3, #0]
 80046b2:	e041      	b.n	8004738 <USB_EPStartXfer+0x8a8>
 80046b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80046be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <USB_EPStartXfer+0x844>
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ce:	3301      	adds	r3, #1
 80046d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80046d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29a      	uxth	r2, r3
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046de:	b29b      	uxth	r3, r3
 80046e0:	029b      	lsls	r3, r3, #10
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	4313      	orrs	r3, r2
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ea:	801a      	strh	r2, [r3, #0]
 80046ec:	e024      	b.n	8004738 <USB_EPStartXfer+0x8a8>
 80046ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d11c      	bne.n	8004738 <USB_EPStartXfer+0x8a8>
 80046fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004702:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800470c:	b29b      	uxth	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004712:	4413      	add	r3, r2
 8004714:	643b      	str	r3, [r7, #64]	@ 0x40
 8004716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800471a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	011a      	lsls	r2, r3, #4
 8004724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004726:	4413      	add	r3, r2
 8004728:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800472c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800472e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004732:	b29a      	uxth	r2, r3
 8004734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004736:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800473c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	895b      	ldrh	r3, [r3, #10]
 8004744:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800474c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6959      	ldr	r1, [r3, #20]
 8004754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004758:	b29b      	uxth	r3, r3
 800475a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800475e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004762:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004766:	6800      	ldr	r0, [r0, #0]
 8004768:	f001 f881 	bl	800586e <USB_WritePMA>
 800476c:	e227      	b.n	8004bbe <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800476e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800477e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800478c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80047a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80047a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	441a      	add	r2, r3
 80047c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80047c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80047da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047fa:	4413      	add	r3, r2
 80047fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	011a      	lsls	r2, r3, #4
 800480c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800480e:	4413      	add	r3, r2
 8004810:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004814:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800481a:	b29a      	uxth	r2, r3
 800481c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800481e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	891b      	ldrh	r3, [r3, #8]
 800482c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6959      	ldr	r1, [r3, #20]
 800483c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004840:	b29b      	uxth	r3, r3
 8004842:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004846:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800484a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800484e:	6800      	ldr	r0, [r0, #0]
 8004850:	f001 f80d 	bl	800586e <USB_WritePMA>
 8004854:	e1b3      	b.n	8004bbe <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800485a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6a1a      	ldr	r2, [r3, #32]
 8004862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004866:	1ad2      	subs	r2, r2, r3
 8004868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800486c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004878:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80c6 	beq.w	8004a28 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800489c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80048a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d177      	bne.n	80049a8 <USB_EPStartXfer+0xb18>
 80048b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048d8:	4413      	add	r3, r2
 80048da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	011a      	lsls	r2, r3, #4
 80048ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048ec:	4413      	add	r3, r2
 80048ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80048f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048fe:	b29a      	uxth	r2, r3
 8004900:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004902:	801a      	strh	r2, [r3, #0]
 8004904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004908:	2b3e      	cmp	r3, #62	@ 0x3e
 800490a:	d921      	bls.n	8004950 <USB_EPStartXfer+0xac0>
 800490c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <USB_EPStartXfer+0xa9c>
 8004922:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004926:	3b01      	subs	r3, #1
 8004928:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800492c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29a      	uxth	r2, r3
 8004932:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004936:	b29b      	uxth	r3, r3
 8004938:	029b      	lsls	r3, r3, #10
 800493a:	b29b      	uxth	r3, r3
 800493c:	4313      	orrs	r3, r2
 800493e:	b29b      	uxth	r3, r3
 8004940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004948:	b29a      	uxth	r2, r3
 800494a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800494c:	801a      	strh	r2, [r3, #0]
 800494e:	e050      	b.n	80049f2 <USB_EPStartXfer+0xb62>
 8004950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <USB_EPStartXfer+0xade>
 8004958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	b29b      	uxth	r3, r3
 800495e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004966:	b29a      	uxth	r2, r3
 8004968:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	e041      	b.n	80049f2 <USB_EPStartXfer+0xb62>
 800496e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <USB_EPStartXfer+0xafe>
 8004984:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004988:	3301      	adds	r3, #1
 800498a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800498e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29a      	uxth	r2, r3
 8004994:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004998:	b29b      	uxth	r3, r3
 800499a:	029b      	lsls	r3, r3, #10
 800499c:	b29b      	uxth	r3, r3
 800499e:	4313      	orrs	r3, r2
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	e024      	b.n	80049f2 <USB_EPStartXfer+0xb62>
 80049a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	785b      	ldrb	r3, [r3, #1]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d11c      	bne.n	80049f2 <USB_EPStartXfer+0xb62>
 80049b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049cc:	4413      	add	r3, r2
 80049ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80049d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	011a      	lsls	r2, r3, #4
 80049de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049e0:	4413      	add	r3, r2
 80049e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80049e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80049f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	895b      	ldrh	r3, [r3, #10]
 80049fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6959      	ldr	r1, [r3, #20]
 8004a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004a18:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004a1c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004a20:	6800      	ldr	r0, [r0, #0]
 8004a22:	f000 ff24 	bl	800586e <USB_WritePMA>
 8004a26:	e0ca      	b.n	8004bbe <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d177      	bne.n	8004b28 <USB_EPStartXfer+0xc98>
 8004a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a58:	4413      	add	r3, r2
 8004a5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	011a      	lsls	r2, r3, #4
 8004a6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a88:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a8a:	d921      	bls.n	8004ad0 <USB_EPStartXfer+0xc40>
 8004a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a90:	095b      	lsrs	r3, r3, #5
 8004a92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d104      	bne.n	8004aac <USB_EPStartXfer+0xc1c>
 8004aa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004aac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	029b      	lsls	r3, r3, #10
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	4313      	orrs	r3, r2
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004acc:	801a      	strh	r2, [r3, #0]
 8004ace:	e05c      	b.n	8004b8a <USB_EPStartXfer+0xcfa>
 8004ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <USB_EPStartXfer+0xc5e>
 8004ad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aea:	801a      	strh	r2, [r3, #0]
 8004aec:	e04d      	b.n	8004b8a <USB_EPStartXfer+0xcfa>
 8004aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d004      	beq.n	8004b0e <USB_EPStartXfer+0xc7e>
 8004b04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	029b      	lsls	r3, r3, #10
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b24:	801a      	strh	r2, [r3, #0]
 8004b26:	e030      	b.n	8004b8a <USB_EPStartXfer+0xcfa>
 8004b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d128      	bne.n	8004b8a <USB_EPStartXfer+0xcfa>
 8004b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	011a      	lsls	r2, r3, #4
 8004b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b74:	4413      	add	r3, r2
 8004b76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	891b      	ldrh	r3, [r3, #8]
 8004b96:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6959      	ldr	r1, [r3, #20]
 8004ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004bb0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004bb4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004bb8:	6800      	ldr	r0, [r0, #0]
 8004bba:	f000 fe58 	bl	800586e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004be4:	817b      	strh	r3, [r7, #10]
 8004be6:	897b      	ldrh	r3, [r7, #10]
 8004be8:	f083 0310 	eor.w	r3, r3, #16
 8004bec:	817b      	strh	r3, [r7, #10]
 8004bee:	897b      	ldrh	r3, [r7, #10]
 8004bf0:	f083 0320 	eor.w	r3, r3, #32
 8004bf4:	817b      	strh	r3, [r7, #10]
 8004bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	441a      	add	r2, r3
 8004c10:	897b      	ldrh	r3, [r7, #10]
 8004c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	8013      	strh	r3, [r2, #0]
 8004c26:	f000 bcde 	b.w	80055e6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	7b1b      	ldrb	r3, [r3, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f040 80bb 	bne.w	8004db2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d917      	bls.n	8004c88 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8004c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699a      	ldr	r2, [r3, #24]
 8004c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c78:	1ad2      	subs	r2, r2, r3
 8004c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	619a      	str	r2, [r3, #24]
 8004c86:	e00e      	b.n	8004ca6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8004c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004cca:	4413      	add	r3, r2
 8004ccc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	011a      	lsls	r2, r3, #4
 8004cde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ce8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cfe:	801a      	strh	r2, [r3, #0]
 8004d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d04:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d06:	d924      	bls.n	8004d52 <USB_EPStartXfer+0xec2>
 8004d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d104      	bne.n	8004d28 <USB_EPStartXfer+0xe98>
 8004d1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004d22:	3b01      	subs	r3, #1
 8004d24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	029b      	lsls	r3, r3, #10
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d4c:	801a      	strh	r2, [r3, #0]
 8004d4e:	f000 bc10 	b.w	8005572 <USB_EPStartXfer+0x16e2>
 8004d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10c      	bne.n	8004d74 <USB_EPStartXfer+0xee4>
 8004d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d70:	801a      	strh	r2, [r3, #0]
 8004d72:	e3fe      	b.n	8005572 <USB_EPStartXfer+0x16e2>
 8004d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d78:	085b      	lsrs	r3, r3, #1
 8004d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d004      	beq.n	8004d94 <USB_EPStartXfer+0xf04>
 8004d8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004d8e:	3301      	adds	r3, #1
 8004d90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	029b      	lsls	r3, r3, #10
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	4313      	orrs	r3, r2
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dae:	801a      	strh	r2, [r3, #0]
 8004db0:	e3df      	b.n	8005572 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	78db      	ldrb	r3, [r3, #3]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	f040 8218 	bne.w	80051f4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f040 809d 	bne.w	8004f10 <USB_EPStartXfer+0x1080>
 8004dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	011a      	lsls	r2, r3, #4
 8004e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e12:	4413      	add	r3, r2
 8004e14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e3e:	d92b      	bls.n	8004e98 <USB_EPStartXfer+0x1008>
 8004e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 031f 	and.w	r3, r3, #31
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <USB_EPStartXfer+0xfe0>
 8004e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	029b      	lsls	r3, r3, #10
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	4313      	orrs	r3, r2
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e94:	801a      	strh	r2, [r3, #0]
 8004e96:	e070      	b.n	8004f7a <USB_EPStartXfer+0x10ea>
 8004e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10c      	bne.n	8004ec2 <USB_EPStartXfer+0x1032>
 8004ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ebe:	801a      	strh	r2, [r3, #0]
 8004ec0:	e05b      	b.n	8004f7a <USB_EPStartXfer+0x10ea>
 8004ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <USB_EPStartXfer+0x1062>
 8004ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eec:	3301      	adds	r3, #1
 8004eee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ef2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	029b      	lsls	r3, r3, #10
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	4313      	orrs	r3, r2
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f0c:	801a      	strh	r2, [r3, #0]
 8004f0e:	e034      	b.n	8004f7a <USB_EPStartXfer+0x10ea>
 8004f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d12c      	bne.n	8004f7a <USB_EPStartXfer+0x10ea>
 8004f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f44:	4413      	add	r3, r2
 8004f46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	011a      	lsls	r2, r3, #4
 8004f58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	785b      	ldrb	r3, [r3, #1]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f040 809d 	bne.w	80050d4 <USB_EPStartXfer+0x1244>
 8004f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	011a      	lsls	r2, r3, #4
 8004fd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004fdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ff2:	801a      	strh	r2, [r3, #0]
 8004ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b3e      	cmp	r3, #62	@ 0x3e
 8005002:	d92b      	bls.n	800505c <USB_EPStartXfer+0x11cc>
 8005004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800501a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	2b00      	cmp	r3, #0
 8005028:	d104      	bne.n	8005034 <USB_EPStartXfer+0x11a4>
 800502a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800502e:	3b01      	subs	r3, #1
 8005030:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005034:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29a      	uxth	r2, r3
 800503c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005040:	b29b      	uxth	r3, r3
 8005042:	029b      	lsls	r3, r3, #10
 8005044:	b29b      	uxth	r3, r3
 8005046:	4313      	orrs	r3, r2
 8005048:	b29b      	uxth	r3, r3
 800504a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005052:	b29a      	uxth	r2, r3
 8005054:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	e069      	b.n	8005130 <USB_EPStartXfer+0x12a0>
 800505c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10c      	bne.n	8005086 <USB_EPStartXfer+0x11f6>
 800506c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800507c:	b29a      	uxth	r2, r3
 800507e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005082:	801a      	strh	r2, [r3, #0]
 8005084:	e054      	b.n	8005130 <USB_EPStartXfer+0x12a0>
 8005086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800509c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d004      	beq.n	80050b6 <USB_EPStartXfer+0x1226>
 80050ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b0:	3301      	adds	r3, #1
 80050b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29a      	uxth	r2, r3
 80050be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	029b      	lsls	r3, r3, #10
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	4313      	orrs	r3, r2
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050d0:	801a      	strh	r2, [r3, #0]
 80050d2:	e02d      	b.n	8005130 <USB_EPStartXfer+0x12a0>
 80050d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d125      	bne.n	8005130 <USB_EPStartXfer+0x12a0>
 80050e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050fa:	4413      	add	r3, r2
 80050fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	011a      	lsls	r2, r3, #4
 800510e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005112:	4413      	add	r3, r2
 8005114:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005118:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800511c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	b29a      	uxth	r2, r3
 800512a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800512e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8218 	beq.w	8005572 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005162:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <USB_EPStartXfer+0x12ea>
 800516e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10d      	bne.n	8005196 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800517a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800517e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 81f5 	bne.w	8005572 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005188:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800518c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	f040 81ee 	bne.w	8005572 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051bc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80051c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]
 80051f2:	e1be      	b.n	8005572 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80051f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	78db      	ldrb	r3, [r3, #3]
 8005200:	2b01      	cmp	r3, #1
 8005202:	f040 81b4 	bne.w	800556e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	429a      	cmp	r2, r3
 8005220:	d917      	bls.n	8005252 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005242:	1ad2      	subs	r2, r2, r3
 8005244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	619a      	str	r2, [r3, #24]
 8005250:	e00e      	b.n	8005270 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2200      	movs	r2, #0
 800526e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	2b00      	cmp	r3, #0
 800527e:	f040 8085 	bne.w	800538c <USB_EPStartXfer+0x14fc>
 8005282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005294:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800529e:	b29b      	uxth	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052a6:	4413      	add	r3, r2
 80052a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	011a      	lsls	r2, r3, #4
 80052ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052be:	4413      	add	r3, r2
 80052c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80052e2:	d923      	bls.n	800532c <USB_EPStartXfer+0x149c>
 80052e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e8:	095b      	lsrs	r3, r3, #5
 80052ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80052ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f2:	f003 031f 	and.w	r3, r3, #31
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d104      	bne.n	8005304 <USB_EPStartXfer+0x1474>
 80052fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fe:	3b01      	subs	r3, #1
 8005300:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29a      	uxth	r2, r3
 800530c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005310:	b29b      	uxth	r3, r3
 8005312:	029b      	lsls	r3, r3, #10
 8005314:	b29b      	uxth	r3, r3
 8005316:	4313      	orrs	r3, r2
 8005318:	b29b      	uxth	r3, r3
 800531a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800531e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005322:	b29a      	uxth	r2, r3
 8005324:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005328:	801a      	strh	r2, [r3, #0]
 800532a:	e060      	b.n	80053ee <USB_EPStartXfer+0x155e>
 800532c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10c      	bne.n	800534e <USB_EPStartXfer+0x14be>
 8005334:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005344:	b29a      	uxth	r2, r3
 8005346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800534a:	801a      	strh	r2, [r3, #0]
 800534c:	e04f      	b.n	80053ee <USB_EPStartXfer+0x155e>
 800534e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d004      	beq.n	800536e <USB_EPStartXfer+0x14de>
 8005364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005368:	3301      	adds	r3, #1
 800536a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800536e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29a      	uxth	r2, r3
 8005376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800537a:	b29b      	uxth	r3, r3
 800537c:	029b      	lsls	r3, r3, #10
 800537e:	b29b      	uxth	r3, r3
 8005380:	4313      	orrs	r3, r2
 8005382:	b29a      	uxth	r2, r3
 8005384:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	e030      	b.n	80053ee <USB_EPStartXfer+0x155e>
 800538c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d128      	bne.n	80053ee <USB_EPStartXfer+0x155e>
 800539c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80053aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053c0:	4413      	add	r3, r2
 80053c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80053c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	011a      	lsls	r2, r3, #4
 80053d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d8:	4413      	add	r3, r2
 80053da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f040 8085 	bne.w	8005518 <USB_EPStartXfer+0x1688>
 800540e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800541c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005420:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800542a:	b29b      	uxth	r3, r3
 800542c:	461a      	mov	r2, r3
 800542e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005432:	4413      	add	r3, r2
 8005434:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	011a      	lsls	r2, r3, #4
 8005446:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800544a:	4413      	add	r3, r2
 800544c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005454:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005460:	b29a      	uxth	r2, r3
 8005462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546c:	2b3e      	cmp	r3, #62	@ 0x3e
 800546e:	d923      	bls.n	80054b8 <USB_EPStartXfer+0x1628>
 8005470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800547a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547e:	f003 031f 	and.w	r3, r3, #31
 8005482:	2b00      	cmp	r3, #0
 8005484:	d104      	bne.n	8005490 <USB_EPStartXfer+0x1600>
 8005486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800548a:	3b01      	subs	r3, #1
 800548c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005490:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b29a      	uxth	r2, r3
 8005498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800549c:	b29b      	uxth	r3, r3
 800549e:	029b      	lsls	r3, r3, #10
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	4313      	orrs	r3, r2
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054b4:	801a      	strh	r2, [r3, #0]
 80054b6:	e05c      	b.n	8005572 <USB_EPStartXfer+0x16e2>
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10c      	bne.n	80054da <USB_EPStartXfer+0x164a>
 80054c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054d6:	801a      	strh	r2, [r3, #0]
 80054d8:	e04b      	b.n	8005572 <USB_EPStartXfer+0x16e2>
 80054da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054de:	085b      	lsrs	r3, r3, #1
 80054e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <USB_EPStartXfer+0x166a>
 80054f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054f4:	3301      	adds	r3, #1
 80054f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29a      	uxth	r2, r3
 8005502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005506:	b29b      	uxth	r3, r3
 8005508:	029b      	lsls	r3, r3, #10
 800550a:	b29b      	uxth	r3, r3
 800550c:	4313      	orrs	r3, r2
 800550e:	b29a      	uxth	r2, r3
 8005510:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005514:	801a      	strh	r2, [r3, #0]
 8005516:	e02c      	b.n	8005572 <USB_EPStartXfer+0x16e2>
 8005518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d124      	bne.n	8005572 <USB_EPStartXfer+0x16e2>
 8005528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005536:	b29b      	uxth	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800553e:	4413      	add	r3, r2
 8005540:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	011a      	lsls	r2, r3, #4
 8005552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005556:	4413      	add	r3, r2
 8005558:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800555c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005564:	b29a      	uxth	r2, r3
 8005566:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e001      	b.n	8005572 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e03a      	b.n	80055e8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005576:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	b29b      	uxth	r3, r3
 8005590:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005598:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800559c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80055a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80055a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80055a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80055ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80055b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80055b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	441a      	add	r2, r3
 80055ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80055d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d020      	beq.n	8005646 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b29b      	uxth	r3, r3
 8005612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800561a:	81bb      	strh	r3, [r7, #12]
 800561c:	89bb      	ldrh	r3, [r7, #12]
 800561e:	f083 0310 	eor.w	r3, r3, #16
 8005622:	81bb      	strh	r3, [r7, #12]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	441a      	add	r2, r3
 800562e:	89bb      	ldrh	r3, [r7, #12]
 8005630:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005634:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005638:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800563c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005640:	b29b      	uxth	r3, r3
 8005642:	8013      	strh	r3, [r2, #0]
 8005644:	e01f      	b.n	8005686 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565c:	81fb      	strh	r3, [r7, #14]
 800565e:	89fb      	ldrh	r3, [r7, #14]
 8005660:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005664:	81fb      	strh	r3, [r7, #14]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	441a      	add	r2, r3
 8005670:	89fb      	ldrh	r3, [r7, #14]
 8005672:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005676:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800567a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800567e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005682:	b29b      	uxth	r3, r3
 8005684:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005692:	b480      	push	{r7}
 8005694:	b087      	sub	sp, #28
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	7b1b      	ldrb	r3, [r3, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f040 809d 	bne.w	80057e0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	785b      	ldrb	r3, [r3, #1]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d04c      	beq.n	8005748 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	823b      	strh	r3, [r7, #16]
 80056bc:	8a3b      	ldrh	r3, [r7, #16]
 80056be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d01b      	beq.n	80056fe <USB_EPClearStall+0x6c>
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056dc:	81fb      	strh	r3, [r7, #14]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	441a      	add	r2, r3
 80056e8:	89fb      	ldrh	r3, [r7, #14]
 80056ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	78db      	ldrb	r3, [r3, #3]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d06c      	beq.n	80057e0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800571c:	81bb      	strh	r3, [r7, #12]
 800571e:	89bb      	ldrh	r3, [r7, #12]
 8005720:	f083 0320 	eor.w	r3, r3, #32
 8005724:	81bb      	strh	r3, [r7, #12]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	441a      	add	r2, r3
 8005730:	89bb      	ldrh	r3, [r7, #12]
 8005732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800573a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800573e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005742:	b29b      	uxth	r3, r3
 8005744:	8013      	strh	r3, [r2, #0]
 8005746:	e04b      	b.n	80057e0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	82fb      	strh	r3, [r7, #22]
 8005756:	8afb      	ldrh	r3, [r7, #22]
 8005758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01b      	beq.n	8005798 <USB_EPClearStall+0x106>
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005776:	82bb      	strh	r3, [r7, #20]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	8abb      	ldrh	r3, [r7, #20]
 8005784:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005788:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800578c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005794:	b29b      	uxth	r3, r3
 8005796:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ae:	827b      	strh	r3, [r7, #18]
 80057b0:	8a7b      	ldrh	r3, [r7, #18]
 80057b2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80057b6:	827b      	strh	r3, [r7, #18]
 80057b8:	8a7b      	ldrh	r3, [r7, #18]
 80057ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057be:	827b      	strh	r3, [r7, #18]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	8a7b      	ldrh	r3, [r7, #18]
 80057cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057dc:	b29b      	uxth	r3, r3
 80057de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr

080057ec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d103      	bne.n	8005806 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2280      	movs	r2, #128	@ 0x80
 8005802:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr

08005812 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr

08005826 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr

0800583a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005848:	b29b      	uxth	r3, r3
 800584a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800584c:	68fb      	ldr	r3, [r7, #12]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr

08005858 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr

0800586e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800586e:	b480      	push	{r7}
 8005870:	b08b      	sub	sp, #44	@ 0x2c
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	4611      	mov	r1, r2
 800587a:	461a      	mov	r2, r3
 800587c:	460b      	mov	r3, r1
 800587e:	80fb      	strh	r3, [r7, #6]
 8005880:	4613      	mov	r3, r2
 8005882:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005884:	88bb      	ldrh	r3, [r7, #4]
 8005886:	3301      	adds	r3, #1
 8005888:	085b      	lsrs	r3, r3, #1
 800588a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	005a      	lsls	r2, r3, #1
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058a0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058a6:	e01e      	b.n	80058e6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	3301      	adds	r3, #1
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	b21a      	sxth	r2, r3
 80058b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058bc:	4313      	orrs	r3, r2
 80058be:	b21b      	sxth	r3, r3
 80058c0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	8a7a      	ldrh	r2, [r7, #18]
 80058c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	3302      	adds	r3, #2
 80058cc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	3302      	adds	r3, #2
 80058d2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	3301      	adds	r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	3301      	adds	r3, #1
 80058de:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	3b01      	subs	r3, #1
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1dd      	bne.n	80058a8 <USB_WritePMA+0x3a>
  }
}
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
 80058f0:	372c      	adds	r7, #44	@ 0x2c
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b08b      	sub	sp, #44	@ 0x2c
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	4611      	mov	r1, r2
 8005904:	461a      	mov	r2, r3
 8005906:	460b      	mov	r3, r1
 8005908:	80fb      	strh	r3, [r7, #6]
 800590a:	4613      	mov	r3, r2
 800590c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800590e:	88bb      	ldrh	r3, [r7, #4]
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	b29b      	uxth	r3, r3
 8005914:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	005a      	lsls	r2, r3, #1
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800592a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005930:	e01b      	b.n	800596a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	3302      	adds	r3, #2
 800593e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	b2da      	uxtb	r2, r3
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	3301      	adds	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	b2da      	uxtb	r2, r3
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	3302      	adds	r3, #2
 8005962:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	3b01      	subs	r3, #1
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e0      	bne.n	8005932 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005970:	88bb      	ldrh	r3, [r7, #4]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	b2da      	uxtb	r2, r3
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	701a      	strb	r2, [r3, #0]
  }
}
 800598c:	bf00      	nop
 800598e:	372c      	adds	r7, #44	@ 0x2c
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80059a2:	2304      	movs	r3, #4
 80059a4:	2203      	movs	r2, #3
 80059a6:	2181      	movs	r1, #129	@ 0x81
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 fc80 	bl	80072ae <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80059b4:	2010      	movs	r0, #16
 80059b6:	f001 fd8d 	bl	80074d4 <USBD_static_malloc>
 80059ba:	4602      	mov	r2, r0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80059cc:	2302      	movs	r3, #2
 80059ce:	e005      	b.n	80059dc <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059d6:	2200      	movs	r2, #0
 80059d8:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80059f0:	2181      	movs	r1, #129	@ 0x81
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f001 fc81 	bl	80072fa <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d009      	beq.n	8005a1c <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fd6c 	bl	80074ec <USBD_static_free>
    pdev->pClassData = NULL;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a38:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d045      	beq.n	8005ae2 <USBD_HID_Setup+0xba>
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	f040 80d3 	bne.w	8005c02 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	3b02      	subs	r3, #2
 8005a62:	2b09      	cmp	r3, #9
 8005a64:	d835      	bhi.n	8005ad2 <USBD_HID_Setup+0xaa>
 8005a66:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <USBD_HID_Setup+0x44>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005ac3 	.word	0x08005ac3
 8005a70:	08005aa3 	.word	0x08005aa3
 8005a74:	08005ad3 	.word	0x08005ad3
 8005a78:	08005ad3 	.word	0x08005ad3
 8005a7c:	08005ad3 	.word	0x08005ad3
 8005a80:	08005ad3 	.word	0x08005ad3
 8005a84:	08005ad3 	.word	0x08005ad3
 8005a88:	08005ad3 	.word	0x08005ad3
 8005a8c:	08005ab1 	.word	0x08005ab1
 8005a90:	08005a95 	.word	0x08005a95
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	885b      	ldrh	r3, [r3, #2]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	601a      	str	r2, [r3, #0]
          break;
 8005aa0:	e01e      	b.n	8005ae0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 f941 	bl	8006d30 <USBD_CtlSendData>
          break;
 8005aae:	e017      	b.n	8005ae0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	885b      	ldrh	r3, [r3, #2]
 8005ab4:	0a1b      	lsrs	r3, r3, #8
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	605a      	str	r2, [r3, #4]
          break;
 8005ac0:	e00e      	b.n	8005ae0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f001 f930 	bl	8006d30 <USBD_CtlSendData>
          break;
 8005ad0:	e006      	b.n	8005ae0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 f8c1 	bl	8006c5c <USBD_CtlError>
          ret = USBD_FAIL;
 8005ada:	2302      	movs	r3, #2
 8005adc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ade:	bf00      	nop
      }
      break;
 8005ae0:	e096      	b.n	8005c10 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	2b0b      	cmp	r3, #11
 8005ae8:	f200 8083 	bhi.w	8005bf2 <USBD_HID_Setup+0x1ca>
 8005aec:	a201      	add	r2, pc, #4	@ (adr r2, 8005af4 <USBD_HID_Setup+0xcc>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b25 	.word	0x08005b25
 8005af8:	08005bf3 	.word	0x08005bf3
 8005afc:	08005bf3 	.word	0x08005bf3
 8005b00:	08005bf3 	.word	0x08005bf3
 8005b04:	08005bf3 	.word	0x08005bf3
 8005b08:	08005bf3 	.word	0x08005bf3
 8005b0c:	08005b4d 	.word	0x08005b4d
 8005b10:	08005bf3 	.word	0x08005bf3
 8005b14:	08005bf3 	.word	0x08005bf3
 8005b18:	08005bf3 	.word	0x08005bf3
 8005b1c:	08005ba5 	.word	0x08005ba5
 8005b20:	08005bcd 	.word	0x08005bcd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d107      	bne.n	8005b3e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005b2e:	f107 030e 	add.w	r3, r7, #14
 8005b32:	2202      	movs	r2, #2
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f001 f8fa 	bl	8006d30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b3c:	e060      	b.n	8005c00 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 f88b 	bl	8006c5c <USBD_CtlError>
            ret = USBD_FAIL;
 8005b46:	2302      	movs	r3, #2
 8005b48:	75fb      	strb	r3, [r7, #23]
          break;
 8005b4a:	e059      	b.n	8005c00 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	885b      	ldrh	r3, [r3, #2]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b22      	cmp	r3, #34	@ 0x22
 8005b56:	d108      	bne.n	8005b6a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	88db      	ldrh	r3, [r3, #6]
 8005b5c:	2b4a      	cmp	r3, #74	@ 0x4a
 8005b5e:	bf28      	it	cs
 8005b60:	234a      	movcs	r3, #74	@ 0x4a
 8005b62:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8005b64:	4b2d      	ldr	r3, [pc, #180]	@ (8005c1c <USBD_HID_Setup+0x1f4>)
 8005b66:	61bb      	str	r3, [r7, #24]
 8005b68:	e015      	b.n	8005b96 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	885b      	ldrh	r3, [r3, #2]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b21      	cmp	r3, #33	@ 0x21
 8005b74:	d108      	bne.n	8005b88 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8005b76:	4b2a      	ldr	r3, [pc, #168]	@ (8005c20 <USBD_HID_Setup+0x1f8>)
 8005b78:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	88db      	ldrh	r3, [r3, #6]
 8005b7e:	2b09      	cmp	r3, #9
 8005b80:	bf28      	it	cs
 8005b82:	2309      	movcs	r3, #9
 8005b84:	83fb      	strh	r3, [r7, #30]
 8005b86:	e006      	b.n	8005b96 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f001 f866 	bl	8006c5c <USBD_CtlError>
            ret = USBD_FAIL;
 8005b90:	2302      	movs	r3, #2
 8005b92:	75fb      	strb	r3, [r7, #23]
            break;
 8005b94:	e034      	b.n	8005c00 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005b96:	8bfb      	ldrh	r3, [r7, #30]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	69b9      	ldr	r1, [r7, #24]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f001 f8c7 	bl	8006d30 <USBD_CtlSendData>
          break;
 8005ba2:	e02d      	b.n	8005c00 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d107      	bne.n	8005bbe <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f001 f8ba 	bl	8006d30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bbc:	e020      	b.n	8005c00 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 f84b 	bl	8006c5c <USBD_CtlError>
            ret = USBD_FAIL;
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bca:	e019      	b.n	8005c00 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d106      	bne.n	8005be4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	885b      	ldrh	r3, [r3, #2]
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005be2:	e00d      	b.n	8005c00 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 f838 	bl	8006c5c <USBD_CtlError>
            ret = USBD_FAIL;
 8005bec:	2302      	movs	r3, #2
 8005bee:	75fb      	strb	r3, [r7, #23]
          break;
 8005bf0:	e006      	b.n	8005c00 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 f831 	bl	8006c5c <USBD_CtlError>
          ret = USBD_FAIL;
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8005bfe:	bf00      	nop
      }
      break;
 8005c00:	e006      	b.n	8005c10 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 f829 	bl	8006c5c <USBD_CtlError>
      ret = USBD_FAIL;
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c0e:	bf00      	nop
  }

  return ret;
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200000c8 	.word	0x200000c8
 8005c20:	200000b0 	.word	0x200000b0

08005c24 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c38:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d10c      	bne.n	8005c5e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	7b1b      	ldrb	r3, [r3, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d108      	bne.n	8005c5e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	2181      	movs	r1, #129	@ 0x81
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f001 fbf5 	bl	8007448 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2222      	movs	r2, #34	@ 0x22
 8005c74:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005c76:	4b03      	ldr	r3, [pc, #12]	@ (8005c84 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000044 	.word	0x20000044

08005c88 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2222      	movs	r2, #34	@ 0x22
 8005c94:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005c96:	4b03      	ldr	r3, [pc, #12]	@ (8005ca4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20000068 	.word	0x20000068

08005ca8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2222      	movs	r2, #34	@ 0x22
 8005cb4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005cb6:	4b03      	ldr	r3, [pc, #12]	@ (8005cc4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc80      	pop	{r7}
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	2000008c 	.word	0x2000008c

08005cc8 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cda:	2200      	movs	r2, #0
 8005cdc:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr
	...

08005cec <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	220a      	movs	r2, #10
 8005cf8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005cfa:	4b03      	ldr	r3, [pc, #12]	@ (8005d08 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	200000bc 	.word	0x200000bc

08005d0c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	4613      	mov	r3, r2
 8005d18:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d20:	2302      	movs	r3, #2
 8005d22:	e01a      	b.n	8005d5a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	79fa      	ldrb	r2, [r7, #7]
 8005d50:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f001 fa48 	bl	80071e8 <USBD_LL_Init>

  return USBD_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d006      	beq.n	8005d84 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]
 8005d82:	e001      	b.n	8005d88 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005d84:	2302      	movs	r3, #2
 8005d86:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr

08005d94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 fa6b 	bl	8007278 <USBD_LL_Start>

  return USBD_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr

08005dc0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00c      	beq.n	8005df4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	78fa      	ldrb	r2, [r7, #3]
 8005de4:	4611      	mov	r1, r2
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	78fa      	ldrb	r2, [r7, #3]
 8005e14:	4611      	mov	r1, r2
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	4798      	blx	r3

  return USBD_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fed7 	bl	8006bea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005e58:	f003 031f 	and.w	r3, r3, #31
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d016      	beq.n	8005e8e <USBD_LL_SetupStage+0x6a>
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d81c      	bhi.n	8005e9e <USBD_LL_SetupStage+0x7a>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <USBD_LL_SetupStage+0x4a>
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d008      	beq.n	8005e7e <USBD_LL_SetupStage+0x5a>
 8005e6c:	e017      	b.n	8005e9e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f9ca 	bl	8006210 <USBD_StdDevReq>
      break;
 8005e7c:	e01a      	b.n	8005eb4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa2c 	bl	80062e4 <USBD_StdItfReq>
      break;
 8005e8c:	e012      	b.n	8005eb4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa6c 	bl	8006374 <USBD_StdEPReq>
      break;
 8005e9c:	e00a      	b.n	8005eb4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005ea4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f001 fa43 	bl	8007338 <USBD_LL_StallEP>
      break;
 8005eb2:	bf00      	nop
  }

  return USBD_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b086      	sub	sp, #24
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ecc:	7afb      	ldrb	r3, [r7, #11]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d14b      	bne.n	8005f6a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005ed8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d134      	bne.n	8005f4e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d919      	bls.n	8005f24 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	1ad2      	subs	r2, r2, r3
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d203      	bcs.n	8005f12 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	e002      	b.n	8005f18 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 ff35 	bl	8006d8c <USBD_CtlContinueRx>
 8005f22:	e038      	b.n	8005f96 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d105      	bne.n	8005f46 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 ff32 	bl	8006db0 <USBD_CtlSendStatus>
 8005f4c:	e023      	b.n	8005f96 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f54:	2b05      	cmp	r3, #5
 8005f56:	d11e      	bne.n	8005f96 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005f60:	2100      	movs	r1, #0
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f001 f9e8 	bl	8007338 <USBD_LL_StallEP>
 8005f68:	e015      	b.n	8005f96 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00d      	beq.n	8005f92 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d108      	bne.n	8005f92 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	7afa      	ldrb	r2, [r7, #11]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	4798      	blx	r3
 8005f90:	e001      	b.n	8005f96 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f92:	2302      	movs	r3, #2
 8005f94:	e000      	b.n	8005f98 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005fae:	7afb      	ldrb	r3, [r7, #11]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d17f      	bne.n	80060b4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3314      	adds	r3, #20
 8005fb8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d15c      	bne.n	800607e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d915      	bls.n	8005ffc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	1ad2      	subs	r2, r2, r3
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 febd 	bl	8006d68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f001 fa4a 	bl	800748e <USBD_LL_PrepareReceive>
 8005ffa:	e04e      	b.n	800609a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	6912      	ldr	r2, [r2, #16]
 8006004:	fbb3 f1f2 	udiv	r1, r3, r2
 8006008:	fb01 f202 	mul.w	r2, r1, r2
 800600c:	1a9b      	subs	r3, r3, r2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d11c      	bne.n	800604c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800601a:	429a      	cmp	r2, r3
 800601c:	d316      	bcc.n	800604c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006028:	429a      	cmp	r2, r3
 800602a:	d20f      	bcs.n	800604c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800602c:	2200      	movs	r2, #0
 800602e:	2100      	movs	r1, #0
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fe99 	bl	8006d68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800603e:	2300      	movs	r3, #0
 8006040:	2200      	movs	r2, #0
 8006042:	2100      	movs	r1, #0
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f001 fa22 	bl	800748e <USBD_LL_PrepareReceive>
 800604a:	e026      	b.n	800609a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800605e:	2b03      	cmp	r3, #3
 8006060:	d105      	bne.n	800606e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800606e:	2180      	movs	r1, #128	@ 0x80
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f001 f961 	bl	8007338 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fead 	bl	8006dd6 <USBD_CtlReceiveStatus>
 800607c:	e00d      	b.n	800609a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006084:	2b04      	cmp	r3, #4
 8006086:	d004      	beq.n	8006092 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800608e:	2b00      	cmp	r3, #0
 8006090:	d103      	bne.n	800609a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006092:	2180      	movs	r1, #128	@ 0x80
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f001 f94f 	bl	8007338 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d11d      	bne.n	80060e0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fe81 	bl	8005dac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80060b2:	e015      	b.n	80060e0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00d      	beq.n	80060dc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d108      	bne.n	80060dc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	7afa      	ldrb	r2, [r7, #11]
 80060d4:	4611      	mov	r1, r2
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	4798      	blx	r3
 80060da:	e001      	b.n	80060e0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060dc:	2302      	movs	r3, #2
 80060de:	e000      	b.n	80060e2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060f2:	2340      	movs	r3, #64	@ 0x40
 80060f4:	2200      	movs	r2, #0
 80060f6:	2100      	movs	r1, #0
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f001 f8d8 	bl	80072ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2240      	movs	r2, #64	@ 0x40
 800610a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800610e:	2340      	movs	r3, #64	@ 0x40
 8006110:	2200      	movs	r2, #0
 8006112:	2180      	movs	r1, #128	@ 0x80
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 f8ca 	bl	80072ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2240      	movs	r2, #64	@ 0x40
 8006124:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6852      	ldr	r2, [r2, #4]
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	4611      	mov	r1, r2
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4798      	blx	r3
  }

  return USBD_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr

0800618a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2204      	movs	r2, #4
 80061a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr

080061b2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d105      	bne.n	80061d0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d10b      	bne.n	8006206 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006226:	2b40      	cmp	r3, #64	@ 0x40
 8006228:	d005      	beq.n	8006236 <USBD_StdDevReq+0x26>
 800622a:	2b40      	cmp	r3, #64	@ 0x40
 800622c:	d84f      	bhi.n	80062ce <USBD_StdDevReq+0xbe>
 800622e:	2b00      	cmp	r3, #0
 8006230:	d009      	beq.n	8006246 <USBD_StdDevReq+0x36>
 8006232:	2b20      	cmp	r3, #32
 8006234:	d14b      	bne.n	80062ce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	4798      	blx	r3
      break;
 8006244:	e048      	b.n	80062d8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	785b      	ldrb	r3, [r3, #1]
 800624a:	2b09      	cmp	r3, #9
 800624c:	d839      	bhi.n	80062c2 <USBD_StdDevReq+0xb2>
 800624e:	a201      	add	r2, pc, #4	@ (adr r2, 8006254 <USBD_StdDevReq+0x44>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	080062a5 	.word	0x080062a5
 8006258:	080062b9 	.word	0x080062b9
 800625c:	080062c3 	.word	0x080062c3
 8006260:	080062af 	.word	0x080062af
 8006264:	080062c3 	.word	0x080062c3
 8006268:	08006287 	.word	0x08006287
 800626c:	0800627d 	.word	0x0800627d
 8006270:	080062c3 	.word	0x080062c3
 8006274:	0800629b 	.word	0x0800629b
 8006278:	08006291 	.word	0x08006291
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f9dc 	bl	800663c <USBD_GetDescriptor>
          break;
 8006284:	e022      	b.n	80062cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fb3f 	bl	800690c <USBD_SetAddress>
          break;
 800628e:	e01d      	b.n	80062cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fb7e 	bl	8006994 <USBD_SetConfig>
          break;
 8006298:	e018      	b.n	80062cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fc07 	bl	8006ab0 <USBD_GetConfig>
          break;
 80062a2:	e013      	b.n	80062cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fc37 	bl	8006b1a <USBD_GetStatus>
          break;
 80062ac:	e00e      	b.n	80062cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fc65 	bl	8006b80 <USBD_SetFeature>
          break;
 80062b6:	e009      	b.n	80062cc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fc74 	bl	8006ba8 <USBD_ClrFeature>
          break;
 80062c0:	e004      	b.n	80062cc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fcc9 	bl	8006c5c <USBD_CtlError>
          break;
 80062ca:	bf00      	nop
      }
      break;
 80062cc:	e004      	b.n	80062d8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fcc3 	bl	8006c5c <USBD_CtlError>
      break;
 80062d6:	bf00      	nop
  }

  return ret;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop

080062e4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062fa:	2b40      	cmp	r3, #64	@ 0x40
 80062fc:	d005      	beq.n	800630a <USBD_StdItfReq+0x26>
 80062fe:	2b40      	cmp	r3, #64	@ 0x40
 8006300:	d82e      	bhi.n	8006360 <USBD_StdItfReq+0x7c>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <USBD_StdItfReq+0x26>
 8006306:	2b20      	cmp	r3, #32
 8006308:	d12a      	bne.n	8006360 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006310:	3b01      	subs	r3, #1
 8006312:	2b02      	cmp	r3, #2
 8006314:	d81d      	bhi.n	8006352 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	889b      	ldrh	r3, [r3, #4]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	d813      	bhi.n	8006348 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	4798      	blx	r3
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	88db      	ldrh	r3, [r3, #6]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d110      	bne.n	800635c <USBD_StdItfReq+0x78>
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fd35 	bl	8006db0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006346:	e009      	b.n	800635c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fc86 	bl	8006c5c <USBD_CtlError>
          break;
 8006350:	e004      	b.n	800635c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fc81 	bl	8006c5c <USBD_CtlError>
          break;
 800635a:	e000      	b.n	800635e <USBD_StdItfReq+0x7a>
          break;
 800635c:	bf00      	nop
      }
      break;
 800635e:	e004      	b.n	800636a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fc7a 	bl	8006c5c <USBD_CtlError>
      break;
 8006368:	bf00      	nop
  }

  return USBD_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	889b      	ldrh	r3, [r3, #4]
 8006386:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006390:	2b40      	cmp	r3, #64	@ 0x40
 8006392:	d007      	beq.n	80063a4 <USBD_StdEPReq+0x30>
 8006394:	2b40      	cmp	r3, #64	@ 0x40
 8006396:	f200 8146 	bhi.w	8006626 <USBD_StdEPReq+0x2b2>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <USBD_StdEPReq+0x40>
 800639e:	2b20      	cmp	r3, #32
 80063a0:	f040 8141 	bne.w	8006626 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
      break;
 80063b2:	e13d      	b.n	8006630 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d10a      	bne.n	80063d6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	e12d      	b.n	8006632 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	785b      	ldrb	r3, [r3, #1]
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d007      	beq.n	80063ee <USBD_StdEPReq+0x7a>
 80063de:	2b03      	cmp	r3, #3
 80063e0:	f300 811b 	bgt.w	800661a <USBD_StdEPReq+0x2a6>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d072      	beq.n	80064ce <USBD_StdEPReq+0x15a>
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d03a      	beq.n	8006462 <USBD_StdEPReq+0xee>
 80063ec:	e115      	b.n	800661a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d002      	beq.n	80063fe <USBD_StdEPReq+0x8a>
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d015      	beq.n	8006428 <USBD_StdEPReq+0xb4>
 80063fc:	e02b      	b.n	8006456 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00c      	beq.n	800641e <USBD_StdEPReq+0xaa>
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	2b80      	cmp	r3, #128	@ 0x80
 8006408:	d009      	beq.n	800641e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 ff92 	bl	8007338 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006414:	2180      	movs	r1, #128	@ 0x80
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 ff8e 	bl	8007338 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800641c:	e020      	b.n	8006460 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fc1b 	bl	8006c5c <USBD_CtlError>
              break;
 8006426:	e01b      	b.n	8006460 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	885b      	ldrh	r3, [r3, #2]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10e      	bne.n	800644e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00b      	beq.n	800644e <USBD_StdEPReq+0xda>
 8006436:	7bbb      	ldrb	r3, [r7, #14]
 8006438:	2b80      	cmp	r3, #128	@ 0x80
 800643a:	d008      	beq.n	800644e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	88db      	ldrh	r3, [r3, #6]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 ff75 	bl	8007338 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fcae 	bl	8006db0 <USBD_CtlSendStatus>

              break;
 8006454:	e004      	b.n	8006460 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fbff 	bl	8006c5c <USBD_CtlError>
              break;
 800645e:	bf00      	nop
          }
          break;
 8006460:	e0e0      	b.n	8006624 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006468:	2b02      	cmp	r3, #2
 800646a:	d002      	beq.n	8006472 <USBD_StdEPReq+0xfe>
 800646c:	2b03      	cmp	r3, #3
 800646e:	d015      	beq.n	800649c <USBD_StdEPReq+0x128>
 8006470:	e026      	b.n	80064c0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00c      	beq.n	8006492 <USBD_StdEPReq+0x11e>
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	2b80      	cmp	r3, #128	@ 0x80
 800647c:	d009      	beq.n	8006492 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 ff58 	bl	8007338 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006488:	2180      	movs	r1, #128	@ 0x80
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 ff54 	bl	8007338 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006490:	e01c      	b.n	80064cc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fbe1 	bl	8006c5c <USBD_CtlError>
              break;
 800649a:	e017      	b.n	80064cc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	885b      	ldrh	r3, [r3, #2]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d112      	bne.n	80064ca <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064a4:	7bbb      	ldrb	r3, [r7, #14]
 80064a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 ff5f 	bl	8007376 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fc79 	bl	8006db0 <USBD_CtlSendStatus>
              }
              break;
 80064be:	e004      	b.n	80064ca <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fbca 	bl	8006c5c <USBD_CtlError>
              break;
 80064c8:	e000      	b.n	80064cc <USBD_StdEPReq+0x158>
              break;
 80064ca:	bf00      	nop
          }
          break;
 80064cc:	e0aa      	b.n	8006624 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d002      	beq.n	80064de <USBD_StdEPReq+0x16a>
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d032      	beq.n	8006542 <USBD_StdEPReq+0x1ce>
 80064dc:	e097      	b.n	800660e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <USBD_StdEPReq+0x180>
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	2b80      	cmp	r3, #128	@ 0x80
 80064e8:	d004      	beq.n	80064f4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fbb5 	bl	8006c5c <USBD_CtlError>
                break;
 80064f2:	e091      	b.n	8006618 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	da0b      	bge.n	8006514 <USBD_StdEPReq+0x1a0>
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	3310      	adds	r3, #16
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	4413      	add	r3, r2
 8006510:	3304      	adds	r3, #4
 8006512:	e00b      	b.n	800652c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	4413      	add	r3, r2
 800652a:	3304      	adds	r3, #4
 800652c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2202      	movs	r2, #2
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fbf8 	bl	8006d30 <USBD_CtlSendData>
              break;
 8006540:	e06a      	b.n	8006618 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006546:	2b00      	cmp	r3, #0
 8006548:	da11      	bge.n	800656e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	f003 020f 	and.w	r2, r3, #15
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	440b      	add	r3, r1
 800655c:	3318      	adds	r3, #24
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d117      	bne.n	8006594 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fb78 	bl	8006c5c <USBD_CtlError>
                  break;
 800656c:	e054      	b.n	8006618 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800656e:	7bbb      	ldrb	r3, [r7, #14]
 8006570:	f003 020f 	and.w	r2, r3, #15
 8006574:	6879      	ldr	r1, [r7, #4]
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fb65 	bl	8006c5c <USBD_CtlError>
                  break;
 8006592:	e041      	b.n	8006618 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006594:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006598:	2b00      	cmp	r3, #0
 800659a:	da0b      	bge.n	80065b4 <USBD_StdEPReq+0x240>
 800659c:	7bbb      	ldrb	r3, [r7, #14]
 800659e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	3310      	adds	r3, #16
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	4413      	add	r3, r2
 80065b0:	3304      	adds	r3, #4
 80065b2:	e00b      	b.n	80065cc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065b4:	7bbb      	ldrb	r3, [r7, #14]
 80065b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	4413      	add	r3, r2
 80065ca:	3304      	adds	r3, #4
 80065cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <USBD_StdEPReq+0x266>
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
 80065d6:	2b80      	cmp	r3, #128	@ 0x80
 80065d8:	d103      	bne.n	80065e2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	e00e      	b.n	8006600 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fee4 	bl	80073b4 <USBD_LL_IsStallEP>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	e002      	b.n	8006600 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2202      	movs	r2, #2
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fb92 	bl	8006d30 <USBD_CtlSendData>
              break;
 800660c:	e004      	b.n	8006618 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fb23 	bl	8006c5c <USBD_CtlError>
              break;
 8006616:	bf00      	nop
          }
          break;
 8006618:	e004      	b.n	8006624 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fb1d 	bl	8006c5c <USBD_CtlError>
          break;
 8006622:	bf00      	nop
      }
      break;
 8006624:	e004      	b.n	8006630 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006626:	6839      	ldr	r1, [r7, #0]
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fb17 	bl	8006c5c <USBD_CtlError>
      break;
 800662e:	bf00      	nop
  }

  return ret;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	885b      	ldrh	r3, [r3, #2]
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	2b06      	cmp	r3, #6
 800665e:	f200 8128 	bhi.w	80068b2 <USBD_GetDescriptor+0x276>
 8006662:	a201      	add	r2, pc, #4	@ (adr r2, 8006668 <USBD_GetDescriptor+0x2c>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	08006685 	.word	0x08006685
 800666c:	0800669d 	.word	0x0800669d
 8006670:	080066dd 	.word	0x080066dd
 8006674:	080068b3 	.word	0x080068b3
 8006678:	080068b3 	.word	0x080068b3
 800667c:	08006853 	.word	0x08006853
 8006680:	0800687f 	.word	0x0800687f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	7c12      	ldrb	r2, [r2, #16]
 8006690:	f107 0108 	add.w	r1, r7, #8
 8006694:	4610      	mov	r0, r2
 8006696:	4798      	blx	r3
 8006698:	60f8      	str	r0, [r7, #12]
      break;
 800669a:	e112      	b.n	80068c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	7c1b      	ldrb	r3, [r3, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10d      	bne.n	80066c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ac:	f107 0208 	add.w	r2, r7, #8
 80066b0:	4610      	mov	r0, r2
 80066b2:	4798      	blx	r3
 80066b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3301      	adds	r3, #1
 80066ba:	2202      	movs	r2, #2
 80066bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80066be:	e100      	b.n	80068c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c8:	f107 0208 	add.w	r2, r7, #8
 80066cc:	4610      	mov	r0, r2
 80066ce:	4798      	blx	r3
 80066d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3301      	adds	r3, #1
 80066d6:	2202      	movs	r2, #2
 80066d8:	701a      	strb	r2, [r3, #0]
      break;
 80066da:	e0f2      	b.n	80068c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	885b      	ldrh	r3, [r3, #2]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b05      	cmp	r3, #5
 80066e4:	f200 80ac 	bhi.w	8006840 <USBD_GetDescriptor+0x204>
 80066e8:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <USBD_GetDescriptor+0xb4>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	08006709 	.word	0x08006709
 80066f4:	0800673d 	.word	0x0800673d
 80066f8:	08006771 	.word	0x08006771
 80066fc:	080067a5 	.word	0x080067a5
 8006700:	080067d9 	.word	0x080067d9
 8006704:	0800680d 	.word	0x0800680d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00b      	beq.n	800672c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	7c12      	ldrb	r2, [r2, #16]
 8006720:	f107 0108 	add.w	r1, r7, #8
 8006724:	4610      	mov	r0, r2
 8006726:	4798      	blx	r3
 8006728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800672a:	e091      	b.n	8006850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fa94 	bl	8006c5c <USBD_CtlError>
            err++;
 8006734:	7afb      	ldrb	r3, [r7, #11]
 8006736:	3301      	adds	r3, #1
 8006738:	72fb      	strb	r3, [r7, #11]
          break;
 800673a:	e089      	b.n	8006850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	7c12      	ldrb	r2, [r2, #16]
 8006754:	f107 0108 	add.w	r1, r7, #8
 8006758:	4610      	mov	r0, r2
 800675a:	4798      	blx	r3
 800675c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800675e:	e077      	b.n	8006850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa7a 	bl	8006c5c <USBD_CtlError>
            err++;
 8006768:	7afb      	ldrb	r3, [r7, #11]
 800676a:	3301      	adds	r3, #1
 800676c:	72fb      	strb	r3, [r7, #11]
          break;
 800676e:	e06f      	b.n	8006850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00b      	beq.n	8006794 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	7c12      	ldrb	r2, [r2, #16]
 8006788:	f107 0108 	add.w	r1, r7, #8
 800678c:	4610      	mov	r0, r2
 800678e:	4798      	blx	r3
 8006790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006792:	e05d      	b.n	8006850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fa60 	bl	8006c5c <USBD_CtlError>
            err++;
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	3301      	adds	r3, #1
 80067a0:	72fb      	strb	r3, [r7, #11]
          break;
 80067a2:	e055      	b.n	8006850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	7c12      	ldrb	r2, [r2, #16]
 80067bc:	f107 0108 	add.w	r1, r7, #8
 80067c0:	4610      	mov	r0, r2
 80067c2:	4798      	blx	r3
 80067c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067c6:	e043      	b.n	8006850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fa46 	bl	8006c5c <USBD_CtlError>
            err++;
 80067d0:	7afb      	ldrb	r3, [r7, #11]
 80067d2:	3301      	adds	r3, #1
 80067d4:	72fb      	strb	r3, [r7, #11]
          break;
 80067d6:	e03b      	b.n	8006850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00b      	beq.n	80067fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	7c12      	ldrb	r2, [r2, #16]
 80067f0:	f107 0108 	add.w	r1, r7, #8
 80067f4:	4610      	mov	r0, r2
 80067f6:	4798      	blx	r3
 80067f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067fa:	e029      	b.n	8006850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fa2c 	bl	8006c5c <USBD_CtlError>
            err++;
 8006804:	7afb      	ldrb	r3, [r7, #11]
 8006806:	3301      	adds	r3, #1
 8006808:	72fb      	strb	r3, [r7, #11]
          break;
 800680a:	e021      	b.n	8006850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00b      	beq.n	8006830 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	7c12      	ldrb	r2, [r2, #16]
 8006824:	f107 0108 	add.w	r1, r7, #8
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
 800682c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800682e:	e00f      	b.n	8006850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa12 	bl	8006c5c <USBD_CtlError>
            err++;
 8006838:	7afb      	ldrb	r3, [r7, #11]
 800683a:	3301      	adds	r3, #1
 800683c:	72fb      	strb	r3, [r7, #11]
          break;
 800683e:	e007      	b.n	8006850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fa0a 	bl	8006c5c <USBD_CtlError>
          err++;
 8006848:	7afb      	ldrb	r3, [r7, #11]
 800684a:	3301      	adds	r3, #1
 800684c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800684e:	e038      	b.n	80068c2 <USBD_GetDescriptor+0x286>
 8006850:	e037      	b.n	80068c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	7c1b      	ldrb	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006862:	f107 0208 	add.w	r2, r7, #8
 8006866:	4610      	mov	r0, r2
 8006868:	4798      	blx	r3
 800686a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800686c:	e029      	b.n	80068c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f9f3 	bl	8006c5c <USBD_CtlError>
        err++;
 8006876:	7afb      	ldrb	r3, [r7, #11]
 8006878:	3301      	adds	r3, #1
 800687a:	72fb      	strb	r3, [r7, #11]
      break;
 800687c:	e021      	b.n	80068c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	7c1b      	ldrb	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10d      	bne.n	80068a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800688c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688e:	f107 0208 	add.w	r2, r7, #8
 8006892:	4610      	mov	r0, r2
 8006894:	4798      	blx	r3
 8006896:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	2207      	movs	r2, #7
 800689e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068a0:	e00f      	b.n	80068c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f9d9 	bl	8006c5c <USBD_CtlError>
        err++;
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	3301      	adds	r3, #1
 80068ae:	72fb      	strb	r3, [r7, #11]
      break;
 80068b0:	e007      	b.n	80068c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f9d1 	bl	8006c5c <USBD_CtlError>
      err++;
 80068ba:	7afb      	ldrb	r3, [r7, #11]
 80068bc:	3301      	adds	r3, #1
 80068be:	72fb      	strb	r3, [r7, #11]
      break;
 80068c0:	bf00      	nop
  }

  if (err != 0U)
 80068c2:	7afb      	ldrb	r3, [r7, #11]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d11c      	bne.n	8006902 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80068c8:	893b      	ldrh	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d011      	beq.n	80068f2 <USBD_GetDescriptor+0x2b6>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	88db      	ldrh	r3, [r3, #6]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00d      	beq.n	80068f2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	88da      	ldrh	r2, [r3, #6]
 80068da:	893b      	ldrh	r3, [r7, #8]
 80068dc:	4293      	cmp	r3, r2
 80068de:	bf28      	it	cs
 80068e0:	4613      	movcs	r3, r2
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80068e6:	893b      	ldrh	r3, [r7, #8]
 80068e8:	461a      	mov	r2, r3
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fa1f 	bl	8006d30 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	88db      	ldrh	r3, [r3, #6]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d104      	bne.n	8006904 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fa58 	bl	8006db0 <USBD_CtlSendStatus>
 8006900:	e000      	b.n	8006904 <USBD_GetDescriptor+0x2c8>
    return;
 8006902:	bf00      	nop
    }
  }
}
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop

0800690c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	889b      	ldrh	r3, [r3, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d130      	bne.n	8006980 <USBD_SetAddress+0x74>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	88db      	ldrh	r3, [r3, #6]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d12c      	bne.n	8006980 <USBD_SetAddress+0x74>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	885b      	ldrh	r3, [r3, #2]
 800692a:	2b7f      	cmp	r3, #127	@ 0x7f
 800692c:	d828      	bhi.n	8006980 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	885b      	ldrh	r3, [r3, #2]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006938:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006940:	2b03      	cmp	r3, #3
 8006942:	d104      	bne.n	800694e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f988 	bl	8006c5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800694c:	e01d      	b.n	800698a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	7bfa      	ldrb	r2, [r7, #15]
 8006952:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fd55 	bl	800740a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fa25 	bl	8006db0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006974:	e009      	b.n	800698a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697e:	e004      	b.n	800698a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f96a 	bl	8006c5c <USBD_CtlError>
  }
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	885b      	ldrh	r3, [r3, #2]
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	4b41      	ldr	r3, [pc, #260]	@ (8006aac <USBD_SetConfig+0x118>)
 80069a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069a8:	4b40      	ldr	r3, [pc, #256]	@ (8006aac <USBD_SetConfig+0x118>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d904      	bls.n	80069ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f952 	bl	8006c5c <USBD_CtlError>
 80069b8:	e075      	b.n	8006aa6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d002      	beq.n	80069ca <USBD_SetConfig+0x36>
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d023      	beq.n	8006a10 <USBD_SetConfig+0x7c>
 80069c8:	e062      	b.n	8006a90 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80069ca:	4b38      	ldr	r3, [pc, #224]	@ (8006aac <USBD_SetConfig+0x118>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d01a      	beq.n	8006a08 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80069d2:	4b36      	ldr	r3, [pc, #216]	@ (8006aac <USBD_SetConfig+0x118>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2203      	movs	r2, #3
 80069e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069e4:	4b31      	ldr	r3, [pc, #196]	@ (8006aac <USBD_SetConfig+0x118>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff f9e8 	bl	8005dc0 <USBD_SetClassConfig>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d104      	bne.n	8006a00 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f92f 	bl	8006c5c <USBD_CtlError>
            return;
 80069fe:	e052      	b.n	8006aa6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f9d5 	bl	8006db0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a06:	e04e      	b.n	8006aa6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f9d1 	bl	8006db0 <USBD_CtlSendStatus>
        break;
 8006a0e:	e04a      	b.n	8006aa6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006a10:	4b26      	ldr	r3, [pc, #152]	@ (8006aac <USBD_SetConfig+0x118>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d112      	bne.n	8006a3e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8006a20:	4b22      	ldr	r3, [pc, #136]	@ (8006aac <USBD_SetConfig+0x118>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	461a      	mov	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a2a:	4b20      	ldr	r3, [pc, #128]	@ (8006aac <USBD_SetConfig+0x118>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff f9e4 	bl	8005dfe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f9ba 	bl	8006db0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a3c:	e033      	b.n	8006aa6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8006aac <USBD_SetConfig+0x118>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d01d      	beq.n	8006a88 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff f9d2 	bl	8005dfe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a5a:	4b14      	ldr	r3, [pc, #80]	@ (8006aac <USBD_SetConfig+0x118>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a64:	4b11      	ldr	r3, [pc, #68]	@ (8006aac <USBD_SetConfig+0x118>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff f9a8 	bl	8005dc0 <USBD_SetClassConfig>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d104      	bne.n	8006a80 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8ef 	bl	8006c5c <USBD_CtlError>
            return;
 8006a7e:	e012      	b.n	8006aa6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f995 	bl	8006db0 <USBD_CtlSendStatus>
        break;
 8006a86:	e00e      	b.n	8006aa6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f991 	bl	8006db0 <USBD_CtlSendStatus>
        break;
 8006a8e:	e00a      	b.n	8006aa6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f8e2 	bl	8006c5c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a98:	4b04      	ldr	r3, [pc, #16]	@ (8006aac <USBD_SetConfig+0x118>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff f9ad 	bl	8005dfe <USBD_ClrClassConfig>
        break;
 8006aa4:	bf00      	nop
    }
  }
}
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	200001a4 	.word	0x200001a4

08006ab0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	88db      	ldrh	r3, [r3, #6]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d004      	beq.n	8006acc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f8c9 	bl	8006c5c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006aca:	e022      	b.n	8006b12 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	dc02      	bgt.n	8006adc <USBD_GetConfig+0x2c>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	dc03      	bgt.n	8006ae2 <USBD_GetConfig+0x32>
 8006ada:	e015      	b.n	8006b08 <USBD_GetConfig+0x58>
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d00b      	beq.n	8006af8 <USBD_GetConfig+0x48>
 8006ae0:	e012      	b.n	8006b08 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3308      	adds	r3, #8
 8006aec:	2201      	movs	r2, #1
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f91d 	bl	8006d30 <USBD_CtlSendData>
        break;
 8006af6:	e00c      	b.n	8006b12 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3304      	adds	r3, #4
 8006afc:	2201      	movs	r2, #1
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f915 	bl	8006d30 <USBD_CtlSendData>
        break;
 8006b06:	e004      	b.n	8006b12 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f8a6 	bl	8006c5c <USBD_CtlError>
        break;
 8006b10:	bf00      	nop
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d81e      	bhi.n	8006b6e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	88db      	ldrh	r3, [r3, #6]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d004      	beq.n	8006b42 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f88e 	bl	8006c5c <USBD_CtlError>
        break;
 8006b40:	e01a      	b.n	8006b78 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f043 0202 	orr.w	r2, r3, #2
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	330c      	adds	r3, #12
 8006b62:	2202      	movs	r2, #2
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f8e2 	bl	8006d30 <USBD_CtlSendData>
      break;
 8006b6c:	e004      	b.n	8006b78 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f873 	bl	8006c5c <USBD_CtlError>
      break;
 8006b76:	bf00      	nop
  }
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	885b      	ldrh	r3, [r3, #2]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d106      	bne.n	8006ba0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f908 	bl	8006db0 <USBD_CtlSendStatus>
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d80b      	bhi.n	8006bd6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	885b      	ldrh	r3, [r3, #2]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d10c      	bne.n	8006be0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f8ee 	bl	8006db0 <USBD_CtlSendStatus>
      }
      break;
 8006bd4:	e004      	b.n	8006be0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f83f 	bl	8006c5c <USBD_CtlError>
      break;
 8006bde:	e000      	b.n	8006be2 <USBD_ClrFeature+0x3a>
      break;
 8006be0:	bf00      	nop
  }
}
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781a      	ldrb	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	785a      	ldrb	r2, [r3, #1]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	3302      	adds	r3, #2
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	3303      	adds	r3, #3
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	4413      	add	r3, r2
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	3304      	adds	r3, #4
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	3305      	adds	r3, #5
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	4413      	add	r3, r2
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	3306      	adds	r3, #6
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	3307      	adds	r3, #7
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	80da      	strh	r2, [r3, #6]

}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006c66:	2180      	movs	r1, #128	@ 0x80
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fb65 	bl	8007338 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c6e:	2100      	movs	r1, #0
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fb61 	bl	8007338 <USBD_LL_StallEP>
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b086      	sub	sp, #24
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d032      	beq.n	8006cfa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 f834 	bl	8006d02 <USBD_GetLen>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	75fa      	strb	r2, [r7, #23]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	7812      	ldrb	r2, [r2, #0]
 8006cb8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	75fa      	strb	r2, [r7, #23]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006cca:	e012      	b.n	8006cf2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	60fa      	str	r2, [r7, #12]
 8006cd2:	7dfa      	ldrb	r2, [r7, #23]
 8006cd4:	1c51      	adds	r1, r2, #1
 8006cd6:	75f9      	strb	r1, [r7, #23]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	440a      	add	r2, r1
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	75fa      	strb	r2, [r7, #23]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	4413      	add	r3, r2
 8006cee:	2200      	movs	r2, #0
 8006cf0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e8      	bne.n	8006ccc <USBD_GetString+0x4e>
    }
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006d0e:	e005      	b.n	8006d1c <USBD_GetLen+0x1a>
  {
    len++;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	3301      	adds	r3, #1
 8006d14:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1f5      	bne.n	8006d10 <USBD_GetLen+0xe>
  }

  return len;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr

08006d30 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2202      	movs	r2, #2
 8006d42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006d46:	88fa      	ldrh	r2, [r7, #6]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006d4c:	88fa      	ldrh	r2, [r7, #6]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	2100      	movs	r1, #0
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 fb75 	bl	8007448 <USBD_LL_Transmit>

  return USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fb63 	bl	8007448 <USBD_LL_Transmit>

  return USBD_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	4613      	mov	r3, r2
 8006d98:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d9a:	88fb      	ldrh	r3, [r7, #6]
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	2100      	movs	r1, #0
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 fb74 	bl	800748e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2204      	movs	r2, #4
 8006dbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fb3e 	bl	8007448 <USBD_LL_Transmit>

  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2205      	movs	r2, #5
 8006de2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006de6:	2300      	movs	r3, #0
 8006de8:	2200      	movs	r2, #0
 8006dea:	2100      	movs	r1, #0
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fb4e 	bl	800748e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e00:	2200      	movs	r2, #0
 8006e02:	490e      	ldr	r1, [pc, #56]	@ (8006e3c <MX_USB_DEVICE_Init+0x40>)
 8006e04:	480e      	ldr	r0, [pc, #56]	@ (8006e40 <MX_USB_DEVICE_Init+0x44>)
 8006e06:	f7fe ff81 	bl	8005d0c <USBD_Init>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e10:	f7f9 fe22 	bl	8000a58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006e14:	490b      	ldr	r1, [pc, #44]	@ (8006e44 <MX_USB_DEVICE_Init+0x48>)
 8006e16:	480a      	ldr	r0, [pc, #40]	@ (8006e40 <MX_USB_DEVICE_Init+0x44>)
 8006e18:	f7fe ffa3 	bl	8005d62 <USBD_RegisterClass>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e22:	f7f9 fe19 	bl	8000a58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e26:	4806      	ldr	r0, [pc, #24]	@ (8006e40 <MX_USB_DEVICE_Init+0x44>)
 8006e28:	f7fe ffb4 	bl	8005d94 <USBD_Start>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006e32:	f7f9 fe11 	bl	8000a58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e36:	bf00      	nop
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000114 	.word	0x20000114
 8006e40:	200001a8 	.word	0x200001a8
 8006e44:	2000000c 	.word	0x2000000c

08006e48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	6039      	str	r1, [r7, #0]
 8006e52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2212      	movs	r2, #18
 8006e58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e5a:	4b03      	ldr	r3, [pc, #12]	@ (8006e68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bc80      	pop	{r7}
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000130 	.word	0x20000130

08006e6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	6039      	str	r1, [r7, #0]
 8006e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e7e:	4b03      	ldr	r3, [pc, #12]	@ (8006e8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000144 	.word	0x20000144

08006e90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d105      	bne.n	8006eae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	4907      	ldr	r1, [pc, #28]	@ (8006ec4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ea6:	4808      	ldr	r0, [pc, #32]	@ (8006ec8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ea8:	f7ff fee9 	bl	8006c7e <USBD_GetString>
 8006eac:	e004      	b.n	8006eb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4904      	ldr	r1, [pc, #16]	@ (8006ec4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006eb2:	4805      	ldr	r0, [pc, #20]	@ (8006ec8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006eb4:	f7ff fee3 	bl	8006c7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eb8:	4b02      	ldr	r3, [pc, #8]	@ (8006ec4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	2000046c 	.word	0x2000046c
 8006ec8:	08008618 	.word	0x08008618

08006ecc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	4904      	ldr	r1, [pc, #16]	@ (8006eec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006edc:	4804      	ldr	r0, [pc, #16]	@ (8006ef0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ede:	f7ff fece 	bl	8006c7e <USBD_GetString>
  return USBD_StrDesc;
 8006ee2:	4b02      	ldr	r3, [pc, #8]	@ (8006eec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	2000046c 	.word	0x2000046c
 8006ef0:	08008630 	.word	0x08008630

08006ef4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	6039      	str	r1, [r7, #0]
 8006efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	221a      	movs	r2, #26
 8006f04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f06:	f000 f843 	bl	8006f90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f0a:	4b02      	ldr	r3, [pc, #8]	@ (8006f14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20000148 	.word	0x20000148

08006f18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	6039      	str	r1, [r7, #0]
 8006f22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d105      	bne.n	8006f36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	4907      	ldr	r1, [pc, #28]	@ (8006f4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f2e:	4808      	ldr	r0, [pc, #32]	@ (8006f50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f30:	f7ff fea5 	bl	8006c7e <USBD_GetString>
 8006f34:	e004      	b.n	8006f40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	4904      	ldr	r1, [pc, #16]	@ (8006f4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f3a:	4805      	ldr	r0, [pc, #20]	@ (8006f50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f3c:	f7ff fe9f 	bl	8006c7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f40:	4b02      	ldr	r3, [pc, #8]	@ (8006f4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	2000046c 	.word	0x2000046c
 8006f50:	08008644 	.word	0x08008644

08006f54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	6039      	str	r1, [r7, #0]
 8006f5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d105      	bne.n	8006f72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	4907      	ldr	r1, [pc, #28]	@ (8006f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f6a:	4808      	ldr	r0, [pc, #32]	@ (8006f8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f6c:	f7ff fe87 	bl	8006c7e <USBD_GetString>
 8006f70:	e004      	b.n	8006f7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	4904      	ldr	r1, [pc, #16]	@ (8006f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f76:	4805      	ldr	r0, [pc, #20]	@ (8006f8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f78:	f7ff fe81 	bl	8006c7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f7c:	4b02      	ldr	r3, [pc, #8]	@ (8006f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	2000046c 	.word	0x2000046c
 8006f8c:	08008650 	.word	0x08008650

08006f90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f96:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd4 <Get_SerialNum+0x44>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd8 <Get_SerialNum+0x48>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8006fdc <Get_SerialNum+0x4c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4413      	add	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	4909      	ldr	r1, [pc, #36]	@ (8006fe0 <Get_SerialNum+0x50>)
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f814 	bl	8006fe8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	4908      	ldr	r1, [pc, #32]	@ (8006fe4 <Get_SerialNum+0x54>)
 8006fc4:	68b8      	ldr	r0, [r7, #8]
 8006fc6:	f000 f80f 	bl	8006fe8 <IntToUnicode>
  }
}
 8006fca:	bf00      	nop
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	1ffff7e8 	.word	0x1ffff7e8
 8006fd8:	1ffff7ec 	.word	0x1ffff7ec
 8006fdc:	1ffff7f0 	.word	0x1ffff7f0
 8006fe0:	2000014a 	.word	0x2000014a
 8006fe4:	2000015a 	.word	0x2000015a

08006fe8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]
 8006ffe:	e027      	b.n	8007050 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	0f1b      	lsrs	r3, r3, #28
 8007004:	2b09      	cmp	r3, #9
 8007006:	d80b      	bhi.n	8007020 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	0f1b      	lsrs	r3, r3, #28
 800700c:	b2da      	uxtb	r2, r3
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	4619      	mov	r1, r3
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	440b      	add	r3, r1
 8007018:	3230      	adds	r2, #48	@ 0x30
 800701a:	b2d2      	uxtb	r2, r2
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	e00a      	b.n	8007036 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	0f1b      	lsrs	r3, r3, #28
 8007024:	b2da      	uxtb	r2, r3
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	4619      	mov	r1, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	440b      	add	r3, r1
 8007030:	3237      	adds	r2, #55	@ 0x37
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800703c:	7dfb      	ldrb	r3, [r7, #23]
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	3301      	adds	r3, #1
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	4413      	add	r3, r2
 8007046:	2200      	movs	r2, #0
 8007048:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	3301      	adds	r3, #1
 800704e:	75fb      	strb	r3, [r7, #23]
 8007050:	7dfa      	ldrb	r2, [r7, #23]
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	429a      	cmp	r2, r3
 8007056:	d3d3      	bcc.n	8007000 <IntToUnicode+0x18>
  }
}
 8007058:	bf00      	nop
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	bc80      	pop	{r7}
 8007062:	4770      	bx	lr

08007064 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a0d      	ldr	r2, [pc, #52]	@ (80070a8 <HAL_PCD_MspInit+0x44>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d113      	bne.n	800709e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007076:	4b0d      	ldr	r3, [pc, #52]	@ (80070ac <HAL_PCD_MspInit+0x48>)
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	4a0c      	ldr	r2, [pc, #48]	@ (80070ac <HAL_PCD_MspInit+0x48>)
 800707c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007080:	61d3      	str	r3, [r2, #28]
 8007082:	4b0a      	ldr	r3, [pc, #40]	@ (80070ac <HAL_PCD_MspInit+0x48>)
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800708e:	2200      	movs	r2, #0
 8007090:	2100      	movs	r1, #0
 8007092:	2014      	movs	r0, #20
 8007094:	f7f9 fed7 	bl	8000e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007098:	2014      	movs	r0, #20
 800709a:	f7f9 fef0 	bl	8000e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	40005c00 	.word	0x40005c00
 80070ac:	40021000 	.word	0x40021000

080070b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7fe feac 	bl	8005e24 <USBD_LL_SetupStage>
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80070e6:	78fa      	ldrb	r2, [r7, #3]
 80070e8:	6879      	ldr	r1, [r7, #4]
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	00db      	lsls	r3, r3, #3
 80070f2:	440b      	add	r3, r1
 80070f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	4619      	mov	r1, r3
 80070fe:	f7fe fede 	bl	8005ebe <USBD_LL_DataOutStage>
}
 8007102:	bf00      	nop
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	440b      	add	r3, r1
 800712a:	3324      	adds	r3, #36	@ 0x24
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	4619      	mov	r1, r3
 8007132:	f7fe ff35 	bl	8005fa0 <USBD_LL_DataInStage>
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800714c:	4618      	mov	r0, r3
 800714e:	f7ff f845 	bl	80061dc <USBD_LL_SOF>
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007162:	2301      	movs	r3, #1
 8007164:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	799b      	ldrb	r3, [r3, #6]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d001      	beq.n	8007172 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800716e:	f7f9 fc73 	bl	8000a58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007178:	7bfa      	ldrb	r2, [r7, #15]
 800717a:	4611      	mov	r1, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fff5 	bl	800616c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe ffae 	bl	80060ea <USBD_LL_Reset>
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe ffef 	bl	800618a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	7a9b      	ldrb	r3, [r3, #10]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071b4:	4b04      	ldr	r3, [pc, #16]	@ (80071c8 <HAL_PCD_SuspendCallback+0x30>)
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	4a03      	ldr	r2, [pc, #12]	@ (80071c8 <HAL_PCD_SuspendCallback+0x30>)
 80071ba:	f043 0306 	orr.w	r3, r3, #6
 80071be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	e000ed00 	.word	0xe000ed00

080071cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe ffe9 	bl	80061b2 <USBD_LL_Resume>
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80071f0:	4a1f      	ldr	r2, [pc, #124]	@ (8007270 <USBD_LL_Init+0x88>)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007270 <USBD_LL_Init+0x88>)
 80071fc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007200:	4b1b      	ldr	r3, [pc, #108]	@ (8007270 <USBD_LL_Init+0x88>)
 8007202:	4a1c      	ldr	r2, [pc, #112]	@ (8007274 <USBD_LL_Init+0x8c>)
 8007204:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007206:	4b1a      	ldr	r3, [pc, #104]	@ (8007270 <USBD_LL_Init+0x88>)
 8007208:	2208      	movs	r2, #8
 800720a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800720c:	4b18      	ldr	r3, [pc, #96]	@ (8007270 <USBD_LL_Init+0x88>)
 800720e:	2202      	movs	r2, #2
 8007210:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007212:	4b17      	ldr	r3, [pc, #92]	@ (8007270 <USBD_LL_Init+0x88>)
 8007214:	2200      	movs	r2, #0
 8007216:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007218:	4b15      	ldr	r3, [pc, #84]	@ (8007270 <USBD_LL_Init+0x88>)
 800721a:	2200      	movs	r2, #0
 800721c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800721e:	4b14      	ldr	r3, [pc, #80]	@ (8007270 <USBD_LL_Init+0x88>)
 8007220:	2200      	movs	r2, #0
 8007222:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007224:	4812      	ldr	r0, [pc, #72]	@ (8007270 <USBD_LL_Init+0x88>)
 8007226:	f7f9 fe44 	bl	8000eb2 <HAL_PCD_Init>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007230:	f7f9 fc12 	bl	8000a58 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800723a:	2318      	movs	r3, #24
 800723c:	2200      	movs	r2, #0
 800723e:	2100      	movs	r1, #0
 8007240:	f7fb fb3e 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800724a:	2358      	movs	r3, #88	@ 0x58
 800724c:	2200      	movs	r2, #0
 800724e:	2180      	movs	r1, #128	@ 0x80
 8007250:	f7fb fb36 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800725a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800725e:	2200      	movs	r2, #0
 8007260:	2181      	movs	r1, #129	@ 0x81
 8007262:	f7fb fb2d 	bl	80028c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	2000066c 	.word	0x2000066c
 8007274:	40005c00 	.word	0x40005c00

08007278 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800728e:	4618      	mov	r0, r3
 8007290:	f7f9 ff05 	bl	800109e <HAL_PCD_Start>
 8007294:	4603      	mov	r3, r0
 8007296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 f93a 	bl	8007514 <USBD_Get_USB_Status>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	4608      	mov	r0, r1
 80072b8:	4611      	mov	r1, r2
 80072ba:	461a      	mov	r2, r3
 80072bc:	4603      	mov	r3, r0
 80072be:	70fb      	strb	r3, [r7, #3]
 80072c0:	460b      	mov	r3, r1
 80072c2:	70bb      	strb	r3, [r7, #2]
 80072c4:	4613      	mov	r3, r2
 80072c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80072d6:	78bb      	ldrb	r3, [r7, #2]
 80072d8:	883a      	ldrh	r2, [r7, #0]
 80072da:	78f9      	ldrb	r1, [r7, #3]
 80072dc:	f7fa f859 	bl	8001392 <HAL_PCD_EP_Open>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 f914 	bl	8007514 <USBD_Get_USB_Status>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	460b      	mov	r3, r1
 8007304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007314:	78fa      	ldrb	r2, [r7, #3]
 8007316:	4611      	mov	r1, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f7fa f897 	bl	800144c <HAL_PCD_EP_Close>
 800731e:	4603      	mov	r3, r0
 8007320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	4618      	mov	r0, r3
 8007326:	f000 f8f5 	bl	8007514 <USBD_Get_USB_Status>
 800732a:	4603      	mov	r3, r0
 800732c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800732e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007352:	78fa      	ldrb	r2, [r7, #3]
 8007354:	4611      	mov	r1, r2
 8007356:	4618      	mov	r0, r3
 8007358:	f7fa f928 	bl	80015ac <HAL_PCD_EP_SetStall>
 800735c:	4603      	mov	r3, r0
 800735e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	4618      	mov	r0, r3
 8007364:	f000 f8d6 	bl	8007514 <USBD_Get_USB_Status>
 8007368:	4603      	mov	r3, r0
 800736a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800736c:	7bbb      	ldrb	r3, [r7, #14]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	460b      	mov	r3, r1
 8007380:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007390:	78fa      	ldrb	r2, [r7, #3]
 8007392:	4611      	mov	r1, r2
 8007394:	4618      	mov	r0, r3
 8007396:	f7fa f969 	bl	800166c <HAL_PCD_EP_ClrStall>
 800739a:	4603      	mov	r3, r0
 800739c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 f8b7 	bl	8007514 <USBD_Get_USB_Status>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80073c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da0b      	bge.n	80073e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073d0:	78fb      	ldrb	r3, [r7, #3]
 80073d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	440b      	add	r3, r1
 80073e2:	3312      	adds	r3, #18
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	e00b      	b.n	8007400 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073ee:	68f9      	ldr	r1, [r7, #12]
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	440b      	add	r3, r1
 80073fa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80073fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	bc80      	pop	{r7}
 8007408:	4770      	bx	lr

0800740a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	460b      	mov	r3, r1
 8007414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007424:	78fa      	ldrb	r2, [r7, #3]
 8007426:	4611      	mov	r1, r2
 8007428:	4618      	mov	r0, r3
 800742a:	f7f9 ff8e 	bl	800134a <HAL_PCD_SetAddress>
 800742e:	4603      	mov	r3, r0
 8007430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	4618      	mov	r0, r3
 8007436:	f000 f86d 	bl	8007514 <USBD_Get_USB_Status>
 800743a:	4603      	mov	r3, r0
 800743c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800743e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	607a      	str	r2, [r7, #4]
 8007452:	461a      	mov	r2, r3
 8007454:	460b      	mov	r3, r1
 8007456:	72fb      	strb	r3, [r7, #11]
 8007458:	4613      	mov	r3, r2
 800745a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800746a:	893b      	ldrh	r3, [r7, #8]
 800746c:	7af9      	ldrb	r1, [r7, #11]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	f7fa f865 	bl	800153e <HAL_PCD_EP_Transmit>
 8007474:	4603      	mov	r3, r0
 8007476:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 f84a 	bl	8007514 <USBD_Get_USB_Status>
 8007480:	4603      	mov	r3, r0
 8007482:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007484:	7dbb      	ldrb	r3, [r7, #22]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b086      	sub	sp, #24
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	461a      	mov	r2, r3
 800749a:	460b      	mov	r3, r1
 800749c:	72fb      	strb	r3, [r7, #11]
 800749e:	4613      	mov	r3, r2
 80074a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80074b0:	893b      	ldrh	r3, [r7, #8]
 80074b2:	7af9      	ldrb	r1, [r7, #11]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	f7fa f811 	bl	80014dc <HAL_PCD_EP_Receive>
 80074ba:	4603      	mov	r3, r0
 80074bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 f827 	bl	8007514 <USBD_Get_USB_Status>
 80074c6:	4603      	mov	r3, r0
 80074c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80074dc:	4b02      	ldr	r3, [pc, #8]	@ (80074e8 <USBD_static_malloc+0x14>)
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr
 80074e8:	20000944 	.word	0x20000944

080074ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]

}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bc80      	pop	{r7}
 80074fc:	4770      	bx	lr

080074fe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr

08007514 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007522:	79fb      	ldrb	r3, [r7, #7]
 8007524:	2b03      	cmp	r3, #3
 8007526:	d817      	bhi.n	8007558 <USBD_Get_USB_Status+0x44>
 8007528:	a201      	add	r2, pc, #4	@ (adr r2, 8007530 <USBD_Get_USB_Status+0x1c>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	08007541 	.word	0x08007541
 8007534:	08007547 	.word	0x08007547
 8007538:	0800754d 	.word	0x0800754d
 800753c:	08007553 	.word	0x08007553
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	73fb      	strb	r3, [r7, #15]
    break;
 8007544:	e00b      	b.n	800755e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007546:	2302      	movs	r3, #2
 8007548:	73fb      	strb	r3, [r7, #15]
    break;
 800754a:	e008      	b.n	800755e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800754c:	2301      	movs	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]
    break;
 8007550:	e005      	b.n	800755e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007552:	2302      	movs	r3, #2
 8007554:	73fb      	strb	r3, [r7, #15]
    break;
 8007556:	e002      	b.n	800755e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007558:	2302      	movs	r3, #2
 800755a:	73fb      	strb	r3, [r7, #15]
    break;
 800755c:	bf00      	nop
  }
  return usb_status;
 800755e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop

0800756c <memset>:
 800756c:	4603      	mov	r3, r0
 800756e:	4402      	add	r2, r0
 8007570:	4293      	cmp	r3, r2
 8007572:	d100      	bne.n	8007576 <memset+0xa>
 8007574:	4770      	bx	lr
 8007576:	f803 1b01 	strb.w	r1, [r3], #1
 800757a:	e7f9      	b.n	8007570 <memset+0x4>

0800757c <__libc_init_array>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	2600      	movs	r6, #0
 8007580:	4d0c      	ldr	r5, [pc, #48]	@ (80075b4 <__libc_init_array+0x38>)
 8007582:	4c0d      	ldr	r4, [pc, #52]	@ (80075b8 <__libc_init_array+0x3c>)
 8007584:	1b64      	subs	r4, r4, r5
 8007586:	10a4      	asrs	r4, r4, #2
 8007588:	42a6      	cmp	r6, r4
 800758a:	d109      	bne.n	80075a0 <__libc_init_array+0x24>
 800758c:	f001 f838 	bl	8008600 <_init>
 8007590:	2600      	movs	r6, #0
 8007592:	4d0a      	ldr	r5, [pc, #40]	@ (80075bc <__libc_init_array+0x40>)
 8007594:	4c0a      	ldr	r4, [pc, #40]	@ (80075c0 <__libc_init_array+0x44>)
 8007596:	1b64      	subs	r4, r4, r5
 8007598:	10a4      	asrs	r4, r4, #2
 800759a:	42a6      	cmp	r6, r4
 800759c:	d105      	bne.n	80075aa <__libc_init_array+0x2e>
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a4:	4798      	blx	r3
 80075a6:	3601      	adds	r6, #1
 80075a8:	e7ee      	b.n	8007588 <__libc_init_array+0xc>
 80075aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ae:	4798      	blx	r3
 80075b0:	3601      	adds	r6, #1
 80075b2:	e7f2      	b.n	800759a <__libc_init_array+0x1e>
 80075b4:	08008860 	.word	0x08008860
 80075b8:	08008860 	.word	0x08008860
 80075bc:	08008860 	.word	0x08008860
 80075c0:	08008864 	.word	0x08008864

080075c4 <cos>:
 80075c4:	b530      	push	{r4, r5, lr}
 80075c6:	4d20      	ldr	r5, [pc, #128]	@ (8007648 <cos+0x84>)
 80075c8:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80075cc:	42ac      	cmp	r4, r5
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	b087      	sub	sp, #28
 80075d4:	d806      	bhi.n	80075e4 <cos+0x20>
 80075d6:	2200      	movs	r2, #0
 80075d8:	2300      	movs	r3, #0
 80075da:	b007      	add	sp, #28
 80075dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075e0:	f000 b87e 	b.w	80076e0 <__kernel_cos>
 80075e4:	4d19      	ldr	r5, [pc, #100]	@ (800764c <cos+0x88>)
 80075e6:	42ac      	cmp	r4, r5
 80075e8:	d903      	bls.n	80075f2 <cos+0x2e>
 80075ea:	f7f8 fedf 	bl	80003ac <__aeabi_dsub>
 80075ee:	b007      	add	sp, #28
 80075f0:	bd30      	pop	{r4, r5, pc}
 80075f2:	aa02      	add	r2, sp, #8
 80075f4:	f000 f9ec 	bl	80079d0 <__ieee754_rem_pio2>
 80075f8:	f000 0003 	and.w	r0, r0, #3
 80075fc:	2801      	cmp	r0, #1
 80075fe:	d009      	beq.n	8007614 <cos+0x50>
 8007600:	2802      	cmp	r0, #2
 8007602:	d011      	beq.n	8007628 <cos+0x64>
 8007604:	b9b8      	cbnz	r0, 8007636 <cos+0x72>
 8007606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800760a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800760e:	f000 f867 	bl	80076e0 <__kernel_cos>
 8007612:	e7ec      	b.n	80075ee <cos+0x2a>
 8007614:	9000      	str	r0, [sp, #0]
 8007616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800761a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800761e:	f000 f91f 	bl	8007860 <__kernel_sin>
 8007622:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8007626:	e7e2      	b.n	80075ee <cos+0x2a>
 8007628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800762c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007630:	f000 f856 	bl	80076e0 <__kernel_cos>
 8007634:	e7f5      	b.n	8007622 <cos+0x5e>
 8007636:	2301      	movs	r3, #1
 8007638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007642:	f000 f90d 	bl	8007860 <__kernel_sin>
 8007646:	e7d2      	b.n	80075ee <cos+0x2a>
 8007648:	3fe921fb 	.word	0x3fe921fb
 800764c:	7fefffff 	.word	0x7fefffff

08007650 <sin>:
 8007650:	b530      	push	{r4, r5, lr}
 8007652:	4d20      	ldr	r5, [pc, #128]	@ (80076d4 <sin+0x84>)
 8007654:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8007658:	42ac      	cmp	r4, r5
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	b087      	sub	sp, #28
 8007660:	d806      	bhi.n	8007670 <sin+0x20>
 8007662:	2300      	movs	r3, #0
 8007664:	2200      	movs	r2, #0
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	2300      	movs	r3, #0
 800766a:	f000 f8f9 	bl	8007860 <__kernel_sin>
 800766e:	e004      	b.n	800767a <sin+0x2a>
 8007670:	4d19      	ldr	r5, [pc, #100]	@ (80076d8 <sin+0x88>)
 8007672:	42ac      	cmp	r4, r5
 8007674:	d903      	bls.n	800767e <sin+0x2e>
 8007676:	f7f8 fe99 	bl	80003ac <__aeabi_dsub>
 800767a:	b007      	add	sp, #28
 800767c:	bd30      	pop	{r4, r5, pc}
 800767e:	aa02      	add	r2, sp, #8
 8007680:	f000 f9a6 	bl	80079d0 <__ieee754_rem_pio2>
 8007684:	f000 0003 	and.w	r0, r0, #3
 8007688:	2801      	cmp	r0, #1
 800768a:	d009      	beq.n	80076a0 <sin+0x50>
 800768c:	2802      	cmp	r0, #2
 800768e:	d00e      	beq.n	80076ae <sin+0x5e>
 8007690:	b9c0      	cbnz	r0, 80076c4 <sin+0x74>
 8007692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007696:	2301      	movs	r3, #1
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800769e:	e7e4      	b.n	800766a <sin+0x1a>
 80076a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a8:	f000 f81a 	bl	80076e0 <__kernel_cos>
 80076ac:	e7e5      	b.n	800767a <sin+0x2a>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076ba:	f000 f8d1 	bl	8007860 <__kernel_sin>
 80076be:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80076c2:	e7da      	b.n	800767a <sin+0x2a>
 80076c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076cc:	f000 f808 	bl	80076e0 <__kernel_cos>
 80076d0:	e7f5      	b.n	80076be <sin+0x6e>
 80076d2:	bf00      	nop
 80076d4:	3fe921fb 	.word	0x3fe921fb
 80076d8:	7fefffff 	.word	0x7fefffff
 80076dc:	00000000 	.word	0x00000000

080076e0 <__kernel_cos>:
 80076e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80076e8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80076ec:	4680      	mov	r8, r0
 80076ee:	4689      	mov	r9, r1
 80076f0:	e9cd 2300 	strd	r2, r3, [sp]
 80076f4:	d204      	bcs.n	8007700 <__kernel_cos+0x20>
 80076f6:	f7f9 f899 	bl	800082c <__aeabi_d2iz>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f000 8086 	beq.w	800780c <__kernel_cos+0x12c>
 8007700:	4642      	mov	r2, r8
 8007702:	464b      	mov	r3, r9
 8007704:	4640      	mov	r0, r8
 8007706:	4649      	mov	r1, r9
 8007708:	f7f8 fd22 	bl	8000150 <__aeabi_dmul>
 800770c:	2200      	movs	r2, #0
 800770e:	4b4e      	ldr	r3, [pc, #312]	@ (8007848 <__kernel_cos+0x168>)
 8007710:	4604      	mov	r4, r0
 8007712:	460d      	mov	r5, r1
 8007714:	f7f8 fd1c 	bl	8000150 <__aeabi_dmul>
 8007718:	a33f      	add	r3, pc, #252	@ (adr r3, 8007818 <__kernel_cos+0x138>)
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	4682      	mov	sl, r0
 8007720:	468b      	mov	fp, r1
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	f7f8 fd13 	bl	8000150 <__aeabi_dmul>
 800772a:	a33d      	add	r3, pc, #244	@ (adr r3, 8007820 <__kernel_cos+0x140>)
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	f7f8 fe3e 	bl	80003b0 <__adddf3>
 8007734:	4622      	mov	r2, r4
 8007736:	462b      	mov	r3, r5
 8007738:	f7f8 fd0a 	bl	8000150 <__aeabi_dmul>
 800773c:	a33a      	add	r3, pc, #232	@ (adr r3, 8007828 <__kernel_cos+0x148>)
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	f7f8 fe33 	bl	80003ac <__aeabi_dsub>
 8007746:	4622      	mov	r2, r4
 8007748:	462b      	mov	r3, r5
 800774a:	f7f8 fd01 	bl	8000150 <__aeabi_dmul>
 800774e:	a338      	add	r3, pc, #224	@ (adr r3, 8007830 <__kernel_cos+0x150>)
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f7f8 fe2c 	bl	80003b0 <__adddf3>
 8007758:	4622      	mov	r2, r4
 800775a:	462b      	mov	r3, r5
 800775c:	f7f8 fcf8 	bl	8000150 <__aeabi_dmul>
 8007760:	a335      	add	r3, pc, #212	@ (adr r3, 8007838 <__kernel_cos+0x158>)
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	f7f8 fe21 	bl	80003ac <__aeabi_dsub>
 800776a:	4622      	mov	r2, r4
 800776c:	462b      	mov	r3, r5
 800776e:	f7f8 fcef 	bl	8000150 <__aeabi_dmul>
 8007772:	a333      	add	r3, pc, #204	@ (adr r3, 8007840 <__kernel_cos+0x160>)
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f7f8 fe1a 	bl	80003b0 <__adddf3>
 800777c:	4622      	mov	r2, r4
 800777e:	462b      	mov	r3, r5
 8007780:	f7f8 fce6 	bl	8000150 <__aeabi_dmul>
 8007784:	4622      	mov	r2, r4
 8007786:	462b      	mov	r3, r5
 8007788:	f7f8 fce2 	bl	8000150 <__aeabi_dmul>
 800778c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007790:	4604      	mov	r4, r0
 8007792:	460d      	mov	r5, r1
 8007794:	4640      	mov	r0, r8
 8007796:	4649      	mov	r1, r9
 8007798:	f7f8 fcda 	bl	8000150 <__aeabi_dmul>
 800779c:	460b      	mov	r3, r1
 800779e:	4602      	mov	r2, r0
 80077a0:	4629      	mov	r1, r5
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7f8 fe02 	bl	80003ac <__aeabi_dsub>
 80077a8:	4b28      	ldr	r3, [pc, #160]	@ (800784c <__kernel_cos+0x16c>)
 80077aa:	4680      	mov	r8, r0
 80077ac:	429e      	cmp	r6, r3
 80077ae:	4689      	mov	r9, r1
 80077b0:	d80e      	bhi.n	80077d0 <__kernel_cos+0xf0>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4650      	mov	r0, sl
 80077b8:	4659      	mov	r1, fp
 80077ba:	f7f8 fdf7 	bl	80003ac <__aeabi_dsub>
 80077be:	4602      	mov	r2, r0
 80077c0:	2000      	movs	r0, #0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4922      	ldr	r1, [pc, #136]	@ (8007850 <__kernel_cos+0x170>)
 80077c6:	f7f8 fdf1 	bl	80003ac <__aeabi_dsub>
 80077ca:	b003      	add	sp, #12
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d0:	2400      	movs	r4, #0
 80077d2:	4b20      	ldr	r3, [pc, #128]	@ (8007854 <__kernel_cos+0x174>)
 80077d4:	4622      	mov	r2, r4
 80077d6:	429e      	cmp	r6, r3
 80077d8:	bf8c      	ite	hi
 80077da:	4d1f      	ldrhi	r5, [pc, #124]	@ (8007858 <__kernel_cos+0x178>)
 80077dc:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 80077e0:	462b      	mov	r3, r5
 80077e2:	2000      	movs	r0, #0
 80077e4:	491a      	ldr	r1, [pc, #104]	@ (8007850 <__kernel_cos+0x170>)
 80077e6:	f7f8 fde1 	bl	80003ac <__aeabi_dsub>
 80077ea:	4622      	mov	r2, r4
 80077ec:	4606      	mov	r6, r0
 80077ee:	460f      	mov	r7, r1
 80077f0:	462b      	mov	r3, r5
 80077f2:	4650      	mov	r0, sl
 80077f4:	4659      	mov	r1, fp
 80077f6:	f7f8 fdd9 	bl	80003ac <__aeabi_dsub>
 80077fa:	4642      	mov	r2, r8
 80077fc:	464b      	mov	r3, r9
 80077fe:	f7f8 fdd5 	bl	80003ac <__aeabi_dsub>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	e7dc      	b.n	80077c6 <__kernel_cos+0xe6>
 800780c:	2000      	movs	r0, #0
 800780e:	4910      	ldr	r1, [pc, #64]	@ (8007850 <__kernel_cos+0x170>)
 8007810:	e7db      	b.n	80077ca <__kernel_cos+0xea>
 8007812:	bf00      	nop
 8007814:	f3af 8000 	nop.w
 8007818:	be8838d4 	.word	0xbe8838d4
 800781c:	bda8fae9 	.word	0xbda8fae9
 8007820:	bdb4b1c4 	.word	0xbdb4b1c4
 8007824:	3e21ee9e 	.word	0x3e21ee9e
 8007828:	809c52ad 	.word	0x809c52ad
 800782c:	3e927e4f 	.word	0x3e927e4f
 8007830:	19cb1590 	.word	0x19cb1590
 8007834:	3efa01a0 	.word	0x3efa01a0
 8007838:	16c15177 	.word	0x16c15177
 800783c:	3f56c16c 	.word	0x3f56c16c
 8007840:	5555554c 	.word	0x5555554c
 8007844:	3fa55555 	.word	0x3fa55555
 8007848:	3fe00000 	.word	0x3fe00000
 800784c:	3fd33332 	.word	0x3fd33332
 8007850:	3ff00000 	.word	0x3ff00000
 8007854:	3fe90000 	.word	0x3fe90000
 8007858:	3fd20000 	.word	0x3fd20000
 800785c:	00000000 	.word	0x00000000

08007860 <__kernel_sin>:
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	461f      	mov	r7, r3
 8007866:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800786a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800786e:	4604      	mov	r4, r0
 8007870:	460d      	mov	r5, r1
 8007872:	4616      	mov	r6, r2
 8007874:	b085      	sub	sp, #20
 8007876:	d203      	bcs.n	8007880 <__kernel_sin+0x20>
 8007878:	f7f8 ffd8 	bl	800082c <__aeabi_d2iz>
 800787c:	2800      	cmp	r0, #0
 800787e:	d051      	beq.n	8007924 <__kernel_sin+0xc4>
 8007880:	4622      	mov	r2, r4
 8007882:	462b      	mov	r3, r5
 8007884:	4620      	mov	r0, r4
 8007886:	4629      	mov	r1, r5
 8007888:	f7f8 fc62 	bl	8000150 <__aeabi_dmul>
 800788c:	4682      	mov	sl, r0
 800788e:	468b      	mov	fp, r1
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4620      	mov	r0, r4
 8007896:	4629      	mov	r1, r5
 8007898:	f7f8 fc5a 	bl	8000150 <__aeabi_dmul>
 800789c:	a33e      	add	r3, pc, #248	@ (adr r3, 8007998 <__kernel_sin+0x138>)
 800789e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a2:	4680      	mov	r8, r0
 80078a4:	4689      	mov	r9, r1
 80078a6:	4650      	mov	r0, sl
 80078a8:	4659      	mov	r1, fp
 80078aa:	f7f8 fc51 	bl	8000150 <__aeabi_dmul>
 80078ae:	a33c      	add	r3, pc, #240	@ (adr r3, 80079a0 <__kernel_sin+0x140>)
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f7f8 fd7a 	bl	80003ac <__aeabi_dsub>
 80078b8:	4652      	mov	r2, sl
 80078ba:	465b      	mov	r3, fp
 80078bc:	f7f8 fc48 	bl	8000150 <__aeabi_dmul>
 80078c0:	a339      	add	r3, pc, #228	@ (adr r3, 80079a8 <__kernel_sin+0x148>)
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f7f8 fd73 	bl	80003b0 <__adddf3>
 80078ca:	4652      	mov	r2, sl
 80078cc:	465b      	mov	r3, fp
 80078ce:	f7f8 fc3f 	bl	8000150 <__aeabi_dmul>
 80078d2:	a337      	add	r3, pc, #220	@ (adr r3, 80079b0 <__kernel_sin+0x150>)
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f7f8 fd68 	bl	80003ac <__aeabi_dsub>
 80078dc:	4652      	mov	r2, sl
 80078de:	465b      	mov	r3, fp
 80078e0:	f7f8 fc36 	bl	8000150 <__aeabi_dmul>
 80078e4:	a334      	add	r3, pc, #208	@ (adr r3, 80079b8 <__kernel_sin+0x158>)
 80078e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ea:	f7f8 fd61 	bl	80003b0 <__adddf3>
 80078ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078f0:	e9cd 0100 	strd	r0, r1, [sp]
 80078f4:	b9db      	cbnz	r3, 800792e <__kernel_sin+0xce>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4650      	mov	r0, sl
 80078fc:	4659      	mov	r1, fp
 80078fe:	f7f8 fc27 	bl	8000150 <__aeabi_dmul>
 8007902:	a32f      	add	r3, pc, #188	@ (adr r3, 80079c0 <__kernel_sin+0x160>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 fd50 	bl	80003ac <__aeabi_dsub>
 800790c:	4642      	mov	r2, r8
 800790e:	464b      	mov	r3, r9
 8007910:	f7f8 fc1e 	bl	8000150 <__aeabi_dmul>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4620      	mov	r0, r4
 800791a:	4629      	mov	r1, r5
 800791c:	f7f8 fd48 	bl	80003b0 <__adddf3>
 8007920:	4604      	mov	r4, r0
 8007922:	460d      	mov	r5, r1
 8007924:	4620      	mov	r0, r4
 8007926:	4629      	mov	r1, r5
 8007928:	b005      	add	sp, #20
 800792a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792e:	2200      	movs	r2, #0
 8007930:	4630      	mov	r0, r6
 8007932:	4639      	mov	r1, r7
 8007934:	4b24      	ldr	r3, [pc, #144]	@ (80079c8 <__kernel_sin+0x168>)
 8007936:	f7f8 fc0b 	bl	8000150 <__aeabi_dmul>
 800793a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800793e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007942:	4640      	mov	r0, r8
 8007944:	4649      	mov	r1, r9
 8007946:	f7f8 fc03 	bl	8000150 <__aeabi_dmul>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007952:	f7f8 fd2b 	bl	80003ac <__aeabi_dsub>
 8007956:	4652      	mov	r2, sl
 8007958:	465b      	mov	r3, fp
 800795a:	f7f8 fbf9 	bl	8000150 <__aeabi_dmul>
 800795e:	4632      	mov	r2, r6
 8007960:	463b      	mov	r3, r7
 8007962:	f7f8 fd23 	bl	80003ac <__aeabi_dsub>
 8007966:	a316      	add	r3, pc, #88	@ (adr r3, 80079c0 <__kernel_sin+0x160>)
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	4606      	mov	r6, r0
 800796e:	460f      	mov	r7, r1
 8007970:	4640      	mov	r0, r8
 8007972:	4649      	mov	r1, r9
 8007974:	f7f8 fbec 	bl	8000150 <__aeabi_dmul>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4630      	mov	r0, r6
 800797e:	4639      	mov	r1, r7
 8007980:	f7f8 fd16 	bl	80003b0 <__adddf3>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4620      	mov	r0, r4
 800798a:	4629      	mov	r1, r5
 800798c:	f7f8 fd0e 	bl	80003ac <__aeabi_dsub>
 8007990:	e7c6      	b.n	8007920 <__kernel_sin+0xc0>
 8007992:	bf00      	nop
 8007994:	f3af 8000 	nop.w
 8007998:	5acfd57c 	.word	0x5acfd57c
 800799c:	3de5d93a 	.word	0x3de5d93a
 80079a0:	8a2b9ceb 	.word	0x8a2b9ceb
 80079a4:	3e5ae5e6 	.word	0x3e5ae5e6
 80079a8:	57b1fe7d 	.word	0x57b1fe7d
 80079ac:	3ec71de3 	.word	0x3ec71de3
 80079b0:	19c161d5 	.word	0x19c161d5
 80079b4:	3f2a01a0 	.word	0x3f2a01a0
 80079b8:	1110f8a6 	.word	0x1110f8a6
 80079bc:	3f811111 	.word	0x3f811111
 80079c0:	55555549 	.word	0x55555549
 80079c4:	3fc55555 	.word	0x3fc55555
 80079c8:	3fe00000 	.word	0x3fe00000
 80079cc:	00000000 	.word	0x00000000

080079d0 <__ieee754_rem_pio2>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	4bc4      	ldr	r3, [pc, #784]	@ (8007ce8 <__ieee754_rem_pio2+0x318>)
 80079d6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80079da:	b08d      	sub	sp, #52	@ 0x34
 80079dc:	4598      	cmp	r8, r3
 80079de:	4606      	mov	r6, r0
 80079e0:	460f      	mov	r7, r1
 80079e2:	4614      	mov	r4, r2
 80079e4:	9104      	str	r1, [sp, #16]
 80079e6:	d807      	bhi.n	80079f8 <__ieee754_rem_pio2+0x28>
 80079e8:	e9c2 6700 	strd	r6, r7, [r2]
 80079ec:	2300      	movs	r3, #0
 80079ee:	2200      	movs	r2, #0
 80079f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80079f4:	2500      	movs	r5, #0
 80079f6:	e026      	b.n	8007a46 <__ieee754_rem_pio2+0x76>
 80079f8:	4bbc      	ldr	r3, [pc, #752]	@ (8007cec <__ieee754_rem_pio2+0x31c>)
 80079fa:	4598      	cmp	r8, r3
 80079fc:	d876      	bhi.n	8007aec <__ieee754_rem_pio2+0x11c>
 80079fe:	9b04      	ldr	r3, [sp, #16]
 8007a00:	4dbb      	ldr	r5, [pc, #748]	@ (8007cf0 <__ieee754_rem_pio2+0x320>)
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	a3aa      	add	r3, pc, #680	@ (adr r3, 8007cb0 <__ieee754_rem_pio2+0x2e0>)
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	dd38      	ble.n	8007a7e <__ieee754_rem_pio2+0xae>
 8007a0c:	f7f8 fcce 	bl	80003ac <__aeabi_dsub>
 8007a10:	45a8      	cmp	r8, r5
 8007a12:	4606      	mov	r6, r0
 8007a14:	460f      	mov	r7, r1
 8007a16:	d01a      	beq.n	8007a4e <__ieee754_rem_pio2+0x7e>
 8007a18:	a3a7      	add	r3, pc, #668	@ (adr r3, 8007cb8 <__ieee754_rem_pio2+0x2e8>)
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f7f8 fcc5 	bl	80003ac <__aeabi_dsub>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4680      	mov	r8, r0
 8007a28:	4689      	mov	r9, r1
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	4639      	mov	r1, r7
 8007a2e:	f7f8 fcbd 	bl	80003ac <__aeabi_dsub>
 8007a32:	a3a1      	add	r3, pc, #644	@ (adr r3, 8007cb8 <__ieee754_rem_pio2+0x2e8>)
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	f7f8 fcb8 	bl	80003ac <__aeabi_dsub>
 8007a3c:	2501      	movs	r5, #1
 8007a3e:	e9c4 8900 	strd	r8, r9, [r4]
 8007a42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a46:	4628      	mov	r0, r5
 8007a48:	b00d      	add	sp, #52	@ 0x34
 8007a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4e:	a39c      	add	r3, pc, #624	@ (adr r3, 8007cc0 <__ieee754_rem_pio2+0x2f0>)
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f7f8 fcaa 	bl	80003ac <__aeabi_dsub>
 8007a58:	a39b      	add	r3, pc, #620	@ (adr r3, 8007cc8 <__ieee754_rem_pio2+0x2f8>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	4606      	mov	r6, r0
 8007a60:	460f      	mov	r7, r1
 8007a62:	f7f8 fca3 	bl	80003ac <__aeabi_dsub>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4680      	mov	r8, r0
 8007a6c:	4689      	mov	r9, r1
 8007a6e:	4630      	mov	r0, r6
 8007a70:	4639      	mov	r1, r7
 8007a72:	f7f8 fc9b 	bl	80003ac <__aeabi_dsub>
 8007a76:	a394      	add	r3, pc, #592	@ (adr r3, 8007cc8 <__ieee754_rem_pio2+0x2f8>)
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	e7dc      	b.n	8007a38 <__ieee754_rem_pio2+0x68>
 8007a7e:	f7f8 fc97 	bl	80003b0 <__adddf3>
 8007a82:	45a8      	cmp	r8, r5
 8007a84:	4606      	mov	r6, r0
 8007a86:	460f      	mov	r7, r1
 8007a88:	d018      	beq.n	8007abc <__ieee754_rem_pio2+0xec>
 8007a8a:	a38b      	add	r3, pc, #556	@ (adr r3, 8007cb8 <__ieee754_rem_pio2+0x2e8>)
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f7f8 fc8e 	bl	80003b0 <__adddf3>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4680      	mov	r8, r0
 8007a9a:	4689      	mov	r9, r1
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	4639      	mov	r1, r7
 8007aa0:	f7f8 fc84 	bl	80003ac <__aeabi_dsub>
 8007aa4:	a384      	add	r3, pc, #528	@ (adr r3, 8007cb8 <__ieee754_rem_pio2+0x2e8>)
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	f7f8 fc81 	bl	80003b0 <__adddf3>
 8007aae:	f04f 35ff 	mov.w	r5, #4294967295
 8007ab2:	e9c4 8900 	strd	r8, r9, [r4]
 8007ab6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007aba:	e7c4      	b.n	8007a46 <__ieee754_rem_pio2+0x76>
 8007abc:	a380      	add	r3, pc, #512	@ (adr r3, 8007cc0 <__ieee754_rem_pio2+0x2f0>)
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	f7f8 fc75 	bl	80003b0 <__adddf3>
 8007ac6:	a380      	add	r3, pc, #512	@ (adr r3, 8007cc8 <__ieee754_rem_pio2+0x2f8>)
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	4606      	mov	r6, r0
 8007ace:	460f      	mov	r7, r1
 8007ad0:	f7f8 fc6e 	bl	80003b0 <__adddf3>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4680      	mov	r8, r0
 8007ada:	4689      	mov	r9, r1
 8007adc:	4630      	mov	r0, r6
 8007ade:	4639      	mov	r1, r7
 8007ae0:	f7f8 fc64 	bl	80003ac <__aeabi_dsub>
 8007ae4:	a378      	add	r3, pc, #480	@ (adr r3, 8007cc8 <__ieee754_rem_pio2+0x2f8>)
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	e7de      	b.n	8007aaa <__ieee754_rem_pio2+0xda>
 8007aec:	4b81      	ldr	r3, [pc, #516]	@ (8007cf4 <__ieee754_rem_pio2+0x324>)
 8007aee:	4598      	cmp	r8, r3
 8007af0:	f200 80cf 	bhi.w	8007c92 <__ieee754_rem_pio2+0x2c2>
 8007af4:	f000 f962 	bl	8007dbc <fabs>
 8007af8:	a375      	add	r3, pc, #468	@ (adr r3, 8007cd0 <__ieee754_rem_pio2+0x300>)
 8007afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afe:	4606      	mov	r6, r0
 8007b00:	460f      	mov	r7, r1
 8007b02:	f7f8 fb25 	bl	8000150 <__aeabi_dmul>
 8007b06:	2200      	movs	r2, #0
 8007b08:	4b7b      	ldr	r3, [pc, #492]	@ (8007cf8 <__ieee754_rem_pio2+0x328>)
 8007b0a:	f7f8 fc51 	bl	80003b0 <__adddf3>
 8007b0e:	f7f8 fe8d 	bl	800082c <__aeabi_d2iz>
 8007b12:	4605      	mov	r5, r0
 8007b14:	f7f8 fd98 	bl	8000648 <__aeabi_i2d>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b20:	a363      	add	r3, pc, #396	@ (adr r3, 8007cb0 <__ieee754_rem_pio2+0x2e0>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f7f8 fb13 	bl	8000150 <__aeabi_dmul>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4630      	mov	r0, r6
 8007b30:	4639      	mov	r1, r7
 8007b32:	f7f8 fc3b 	bl	80003ac <__aeabi_dsub>
 8007b36:	a360      	add	r3, pc, #384	@ (adr r3, 8007cb8 <__ieee754_rem_pio2+0x2e8>)
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	4682      	mov	sl, r0
 8007b3e:	468b      	mov	fp, r1
 8007b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b44:	f7f8 fb04 	bl	8000150 <__aeabi_dmul>
 8007b48:	2d1f      	cmp	r5, #31
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	460f      	mov	r7, r1
 8007b4e:	dc0c      	bgt.n	8007b6a <__ieee754_rem_pio2+0x19a>
 8007b50:	4b6a      	ldr	r3, [pc, #424]	@ (8007cfc <__ieee754_rem_pio2+0x32c>)
 8007b52:	1e6a      	subs	r2, r5, #1
 8007b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b58:	4543      	cmp	r3, r8
 8007b5a:	d006      	beq.n	8007b6a <__ieee754_rem_pio2+0x19a>
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	463b      	mov	r3, r7
 8007b60:	4650      	mov	r0, sl
 8007b62:	4659      	mov	r1, fp
 8007b64:	f7f8 fc22 	bl	80003ac <__aeabi_dsub>
 8007b68:	e00e      	b.n	8007b88 <__ieee754_rem_pio2+0x1b8>
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	4632      	mov	r2, r6
 8007b6e:	4650      	mov	r0, sl
 8007b70:	4659      	mov	r1, fp
 8007b72:	f7f8 fc1b 	bl	80003ac <__aeabi_dsub>
 8007b76:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007b7a:	9305      	str	r3, [sp, #20]
 8007b7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007b80:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007b84:	2b10      	cmp	r3, #16
 8007b86:	dc02      	bgt.n	8007b8e <__ieee754_rem_pio2+0x1be>
 8007b88:	e9c4 0100 	strd	r0, r1, [r4]
 8007b8c:	e039      	b.n	8007c02 <__ieee754_rem_pio2+0x232>
 8007b8e:	a34c      	add	r3, pc, #304	@ (adr r3, 8007cc0 <__ieee754_rem_pio2+0x2f0>)
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b98:	f7f8 fada 	bl	8000150 <__aeabi_dmul>
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	460f      	mov	r7, r1
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4650      	mov	r0, sl
 8007ba6:	4659      	mov	r1, fp
 8007ba8:	f7f8 fc00 	bl	80003ac <__aeabi_dsub>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4680      	mov	r8, r0
 8007bb2:	4689      	mov	r9, r1
 8007bb4:	4650      	mov	r0, sl
 8007bb6:	4659      	mov	r1, fp
 8007bb8:	f7f8 fbf8 	bl	80003ac <__aeabi_dsub>
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	463b      	mov	r3, r7
 8007bc0:	f7f8 fbf4 	bl	80003ac <__aeabi_dsub>
 8007bc4:	a340      	add	r3, pc, #256	@ (adr r3, 8007cc8 <__ieee754_rem_pio2+0x2f8>)
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	4606      	mov	r6, r0
 8007bcc:	460f      	mov	r7, r1
 8007bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bd2:	f7f8 fabd 	bl	8000150 <__aeabi_dmul>
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	463b      	mov	r3, r7
 8007bda:	f7f8 fbe7 	bl	80003ac <__aeabi_dsub>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4606      	mov	r6, r0
 8007be4:	460f      	mov	r7, r1
 8007be6:	4640      	mov	r0, r8
 8007be8:	4649      	mov	r1, r9
 8007bea:	f7f8 fbdf 	bl	80003ac <__aeabi_dsub>
 8007bee:	9a05      	ldr	r2, [sp, #20]
 8007bf0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b31      	cmp	r3, #49	@ 0x31
 8007bf8:	dc20      	bgt.n	8007c3c <__ieee754_rem_pio2+0x26c>
 8007bfa:	46c2      	mov	sl, r8
 8007bfc:	46cb      	mov	fp, r9
 8007bfe:	e9c4 0100 	strd	r0, r1, [r4]
 8007c02:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007c06:	4650      	mov	r0, sl
 8007c08:	4642      	mov	r2, r8
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	4659      	mov	r1, fp
 8007c0e:	f7f8 fbcd 	bl	80003ac <__aeabi_dsub>
 8007c12:	463b      	mov	r3, r7
 8007c14:	4632      	mov	r2, r6
 8007c16:	f7f8 fbc9 	bl	80003ac <__aeabi_dsub>
 8007c1a:	9b04      	ldr	r3, [sp, #16]
 8007c1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f6bf af10 	bge.w	8007a46 <__ieee754_rem_pio2+0x76>
 8007c26:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007c2a:	6063      	str	r3, [r4, #4]
 8007c2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c30:	f8c4 8000 	str.w	r8, [r4]
 8007c34:	60a0      	str	r0, [r4, #8]
 8007c36:	60e3      	str	r3, [r4, #12]
 8007c38:	426d      	negs	r5, r5
 8007c3a:	e704      	b.n	8007a46 <__ieee754_rem_pio2+0x76>
 8007c3c:	a326      	add	r3, pc, #152	@ (adr r3, 8007cd8 <__ieee754_rem_pio2+0x308>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c46:	f7f8 fa83 	bl	8000150 <__aeabi_dmul>
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	460f      	mov	r7, r1
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4640      	mov	r0, r8
 8007c54:	4649      	mov	r1, r9
 8007c56:	f7f8 fba9 	bl	80003ac <__aeabi_dsub>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4682      	mov	sl, r0
 8007c60:	468b      	mov	fp, r1
 8007c62:	4640      	mov	r0, r8
 8007c64:	4649      	mov	r1, r9
 8007c66:	f7f8 fba1 	bl	80003ac <__aeabi_dsub>
 8007c6a:	4632      	mov	r2, r6
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	f7f8 fb9d 	bl	80003ac <__aeabi_dsub>
 8007c72:	a31b      	add	r3, pc, #108	@ (adr r3, 8007ce0 <__ieee754_rem_pio2+0x310>)
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	4606      	mov	r6, r0
 8007c7a:	460f      	mov	r7, r1
 8007c7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c80:	f7f8 fa66 	bl	8000150 <__aeabi_dmul>
 8007c84:	4632      	mov	r2, r6
 8007c86:	463b      	mov	r3, r7
 8007c88:	f7f8 fb90 	bl	80003ac <__aeabi_dsub>
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	460f      	mov	r7, r1
 8007c90:	e764      	b.n	8007b5c <__ieee754_rem_pio2+0x18c>
 8007c92:	4b1b      	ldr	r3, [pc, #108]	@ (8007d00 <__ieee754_rem_pio2+0x330>)
 8007c94:	4598      	cmp	r8, r3
 8007c96:	d935      	bls.n	8007d04 <__ieee754_rem_pio2+0x334>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	f7f8 fb86 	bl	80003ac <__aeabi_dsub>
 8007ca0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ca4:	e9c4 0100 	strd	r0, r1, [r4]
 8007ca8:	e6a4      	b.n	80079f4 <__ieee754_rem_pio2+0x24>
 8007caa:	bf00      	nop
 8007cac:	f3af 8000 	nop.w
 8007cb0:	54400000 	.word	0x54400000
 8007cb4:	3ff921fb 	.word	0x3ff921fb
 8007cb8:	1a626331 	.word	0x1a626331
 8007cbc:	3dd0b461 	.word	0x3dd0b461
 8007cc0:	1a600000 	.word	0x1a600000
 8007cc4:	3dd0b461 	.word	0x3dd0b461
 8007cc8:	2e037073 	.word	0x2e037073
 8007ccc:	3ba3198a 	.word	0x3ba3198a
 8007cd0:	6dc9c883 	.word	0x6dc9c883
 8007cd4:	3fe45f30 	.word	0x3fe45f30
 8007cd8:	2e000000 	.word	0x2e000000
 8007cdc:	3ba3198a 	.word	0x3ba3198a
 8007ce0:	252049c1 	.word	0x252049c1
 8007ce4:	397b839a 	.word	0x397b839a
 8007ce8:	3fe921fb 	.word	0x3fe921fb
 8007cec:	4002d97b 	.word	0x4002d97b
 8007cf0:	3ff921fb 	.word	0x3ff921fb
 8007cf4:	413921fb 	.word	0x413921fb
 8007cf8:	3fe00000 	.word	0x3fe00000
 8007cfc:	08008684 	.word	0x08008684
 8007d00:	7fefffff 	.word	0x7fefffff
 8007d04:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007d08:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007d0c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007d10:	460f      	mov	r7, r1
 8007d12:	f7f8 fd8b 	bl	800082c <__aeabi_d2iz>
 8007d16:	f7f8 fc97 	bl	8000648 <__aeabi_i2d>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4630      	mov	r0, r6
 8007d20:	4639      	mov	r1, r7
 8007d22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d26:	f7f8 fb41 	bl	80003ac <__aeabi_dsub>
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	4b21      	ldr	r3, [pc, #132]	@ (8007db4 <__ieee754_rem_pio2+0x3e4>)
 8007d2e:	f7f8 fa0f 	bl	8000150 <__aeabi_dmul>
 8007d32:	460f      	mov	r7, r1
 8007d34:	4606      	mov	r6, r0
 8007d36:	f7f8 fd79 	bl	800082c <__aeabi_d2iz>
 8007d3a:	f7f8 fc85 	bl	8000648 <__aeabi_i2d>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4630      	mov	r0, r6
 8007d44:	4639      	mov	r1, r7
 8007d46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d4a:	f7f8 fb2f 	bl	80003ac <__aeabi_dsub>
 8007d4e:	2200      	movs	r2, #0
 8007d50:	4b18      	ldr	r3, [pc, #96]	@ (8007db4 <__ieee754_rem_pio2+0x3e4>)
 8007d52:	f7f8 f9fd 	bl	8000150 <__aeabi_dmul>
 8007d56:	f04f 0803 	mov.w	r8, #3
 8007d5a:	2600      	movs	r6, #0
 8007d5c:	2700      	movs	r7, #0
 8007d5e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007d62:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007d66:	4632      	mov	r2, r6
 8007d68:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007d6c:	463b      	mov	r3, r7
 8007d6e:	46c2      	mov	sl, r8
 8007d70:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d74:	f7f8 fd28 	bl	80007c8 <__aeabi_dcmpeq>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d1f4      	bne.n	8007d66 <__ieee754_rem_pio2+0x396>
 8007d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8007db8 <__ieee754_rem_pio2+0x3e8>)
 8007d7e:	462a      	mov	r2, r5
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	2302      	movs	r3, #2
 8007d84:	4621      	mov	r1, r4
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	a806      	add	r0, sp, #24
 8007d8a:	4653      	mov	r3, sl
 8007d8c:	f000 f81a 	bl	8007dc4 <__kernel_rem_pio2>
 8007d90:	9b04      	ldr	r3, [sp, #16]
 8007d92:	4605      	mov	r5, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f6bf ae56 	bge.w	8007a46 <__ieee754_rem_pio2+0x76>
 8007d9a:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007d9e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007da2:	e9c4 2300 	strd	r2, r3, [r4]
 8007da6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007daa:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007dae:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007db2:	e741      	b.n	8007c38 <__ieee754_rem_pio2+0x268>
 8007db4:	41700000 	.word	0x41700000
 8007db8:	08008704 	.word	0x08008704

08007dbc <fabs>:
 8007dbc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4770      	bx	lr

08007dc4 <__kernel_rem_pio2>:
 8007dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8007dcc:	9308      	str	r3, [sp, #32]
 8007dce:	9104      	str	r1, [sp, #16]
 8007dd0:	4bb6      	ldr	r3, [pc, #728]	@ (80080ac <__kernel_rem_pio2+0x2e8>)
 8007dd2:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8007dd4:	f112 0f14 	cmn.w	r2, #20
 8007dd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ddc:	bfa8      	it	ge
 8007dde:	1ed4      	subge	r4, r2, #3
 8007de0:	9302      	str	r3, [sp, #8]
 8007de2:	9b08      	ldr	r3, [sp, #32]
 8007de4:	bfb8      	it	lt
 8007de6:	2400      	movlt	r4, #0
 8007de8:	f103 33ff 	add.w	r3, r3, #4294967295
 8007dec:	9306      	str	r3, [sp, #24]
 8007dee:	bfa4      	itt	ge
 8007df0:	2318      	movge	r3, #24
 8007df2:	fb94 f4f3 	sdivge	r4, r4, r3
 8007df6:	f06f 0317 	mvn.w	r3, #23
 8007dfa:	fb04 3303 	mla	r3, r4, r3, r3
 8007dfe:	eb03 0a02 	add.w	sl, r3, r2
 8007e02:	9a06      	ldr	r2, [sp, #24]
 8007e04:	9b02      	ldr	r3, [sp, #8]
 8007e06:	1aa7      	subs	r7, r4, r2
 8007e08:	eb03 0802 	add.w	r8, r3, r2
 8007e0c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8007e0e:	2500      	movs	r5, #0
 8007e10:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007e14:	2200      	movs	r2, #0
 8007e16:	2300      	movs	r3, #0
 8007e18:	9009      	str	r0, [sp, #36]	@ 0x24
 8007e1a:	ae20      	add	r6, sp, #128	@ 0x80
 8007e1c:	4545      	cmp	r5, r8
 8007e1e:	dd14      	ble.n	8007e4a <__kernel_rem_pio2+0x86>
 8007e20:	f04f 0800 	mov.w	r8, #0
 8007e24:	9a08      	ldr	r2, [sp, #32]
 8007e26:	ab20      	add	r3, sp, #128	@ 0x80
 8007e28:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8007e2c:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8007e30:	9b02      	ldr	r3, [sp, #8]
 8007e32:	4598      	cmp	r8, r3
 8007e34:	dc35      	bgt.n	8007ea2 <__kernel_rem_pio2+0xde>
 8007e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f1a3 0908 	sub.w	r9, r3, #8
 8007e3e:	2300      	movs	r3, #0
 8007e40:	462f      	mov	r7, r5
 8007e42:	2600      	movs	r6, #0
 8007e44:	e9cd 2300 	strd	r2, r3, [sp]
 8007e48:	e01f      	b.n	8007e8a <__kernel_rem_pio2+0xc6>
 8007e4a:	42ef      	cmn	r7, r5
 8007e4c:	d40b      	bmi.n	8007e66 <__kernel_rem_pio2+0xa2>
 8007e4e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007e52:	e9cd 2300 	strd	r2, r3, [sp]
 8007e56:	f7f8 fbf7 	bl	8000648 <__aeabi_i2d>
 8007e5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e5e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007e62:	3501      	adds	r5, #1
 8007e64:	e7da      	b.n	8007e1c <__kernel_rem_pio2+0x58>
 8007e66:	4610      	mov	r0, r2
 8007e68:	4619      	mov	r1, r3
 8007e6a:	e7f8      	b.n	8007e5e <__kernel_rem_pio2+0x9a>
 8007e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e70:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8007e74:	f7f8 f96c 	bl	8000150 <__aeabi_dmul>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e80:	f7f8 fa96 	bl	80003b0 <__adddf3>
 8007e84:	e9cd 0100 	strd	r0, r1, [sp]
 8007e88:	3601      	adds	r6, #1
 8007e8a:	9b06      	ldr	r3, [sp, #24]
 8007e8c:	3f08      	subs	r7, #8
 8007e8e:	429e      	cmp	r6, r3
 8007e90:	ddec      	ble.n	8007e6c <__kernel_rem_pio2+0xa8>
 8007e92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e96:	f108 0801 	add.w	r8, r8, #1
 8007e9a:	e8eb 2302 	strd	r2, r3, [fp], #8
 8007e9e:	3508      	adds	r5, #8
 8007ea0:	e7c6      	b.n	8007e30 <__kernel_rem_pio2+0x6c>
 8007ea2:	9b02      	ldr	r3, [sp, #8]
 8007ea4:	aa0c      	add	r2, sp, #48	@ 0x30
 8007ea6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007eaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eac:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8007eae:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007eb2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007eb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eb8:	ab98      	add	r3, sp, #608	@ 0x260
 8007eba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ebe:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8007ec2:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007ec4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ec8:	ae0c      	add	r6, sp, #48	@ 0x30
 8007eca:	4698      	mov	r8, r3
 8007ecc:	46b1      	mov	r9, r6
 8007ece:	465f      	mov	r7, fp
 8007ed0:	9307      	str	r3, [sp, #28]
 8007ed2:	2f00      	cmp	r7, #0
 8007ed4:	f1a8 0808 	sub.w	r8, r8, #8
 8007ed8:	dc71      	bgt.n	8007fbe <__kernel_rem_pio2+0x1fa>
 8007eda:	4652      	mov	r2, sl
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f000 fa96 	bl	8008410 <scalbn>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007eea:	4604      	mov	r4, r0
 8007eec:	460d      	mov	r5, r1
 8007eee:	f7f8 f92f 	bl	8000150 <__aeabi_dmul>
 8007ef2:	f000 fb05 	bl	8008500 <floor>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	4b6d      	ldr	r3, [pc, #436]	@ (80080b0 <__kernel_rem_pio2+0x2ec>)
 8007efa:	f7f8 f929 	bl	8000150 <__aeabi_dmul>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4620      	mov	r0, r4
 8007f04:	4629      	mov	r1, r5
 8007f06:	f7f8 fa51 	bl	80003ac <__aeabi_dsub>
 8007f0a:	460d      	mov	r5, r1
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	f7f8 fc8d 	bl	800082c <__aeabi_d2iz>
 8007f12:	9005      	str	r0, [sp, #20]
 8007f14:	f7f8 fb98 	bl	8000648 <__aeabi_i2d>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	f7f8 fa44 	bl	80003ac <__aeabi_dsub>
 8007f24:	f1ba 0f00 	cmp.w	sl, #0
 8007f28:	4680      	mov	r8, r0
 8007f2a:	4689      	mov	r9, r1
 8007f2c:	dd6d      	ble.n	800800a <__kernel_rem_pio2+0x246>
 8007f2e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8007f32:	ab0c      	add	r3, sp, #48	@ 0x30
 8007f34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f38:	9c05      	ldr	r4, [sp, #20]
 8007f3a:	f1ca 0018 	rsb	r0, sl, #24
 8007f3e:	fa43 f200 	asr.w	r2, r3, r0
 8007f42:	4414      	add	r4, r2
 8007f44:	4082      	lsls	r2, r0
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	aa0c      	add	r2, sp, #48	@ 0x30
 8007f4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007f4e:	f1ca 0217 	rsb	r2, sl, #23
 8007f52:	9405      	str	r4, [sp, #20]
 8007f54:	4113      	asrs	r3, r2
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	9b00      	ldr	r3, [sp, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	dd64      	ble.n	8008028 <__kernel_rem_pio2+0x264>
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8007f64:	4614      	mov	r4, r2
 8007f66:	9b05      	ldr	r3, [sp, #20]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	9305      	str	r3, [sp, #20]
 8007f6c:	4593      	cmp	fp, r2
 8007f6e:	f300 80ab 	bgt.w	80080c8 <__kernel_rem_pio2+0x304>
 8007f72:	f1ba 0f00 	cmp.w	sl, #0
 8007f76:	dd07      	ble.n	8007f88 <__kernel_rem_pio2+0x1c4>
 8007f78:	f1ba 0f01 	cmp.w	sl, #1
 8007f7c:	f000 80b2 	beq.w	80080e4 <__kernel_rem_pio2+0x320>
 8007f80:	f1ba 0f02 	cmp.w	sl, #2
 8007f84:	f000 80b9 	beq.w	80080fa <__kernel_rem_pio2+0x336>
 8007f88:	9b00      	ldr	r3, [sp, #0]
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d14c      	bne.n	8008028 <__kernel_rem_pio2+0x264>
 8007f8e:	4642      	mov	r2, r8
 8007f90:	464b      	mov	r3, r9
 8007f92:	2000      	movs	r0, #0
 8007f94:	4947      	ldr	r1, [pc, #284]	@ (80080b4 <__kernel_rem_pio2+0x2f0>)
 8007f96:	f7f8 fa09 	bl	80003ac <__aeabi_dsub>
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	4689      	mov	r9, r1
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	d042      	beq.n	8008028 <__kernel_rem_pio2+0x264>
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	4943      	ldr	r1, [pc, #268]	@ (80080b4 <__kernel_rem_pio2+0x2f0>)
 8007fa8:	f000 fa32 	bl	8008410 <scalbn>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	f7f8 f9fa 	bl	80003ac <__aeabi_dsub>
 8007fb8:	4680      	mov	r8, r0
 8007fba:	4689      	mov	r9, r1
 8007fbc:	e034      	b.n	8008028 <__kernel_rem_pio2+0x264>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80080b8 <__kernel_rem_pio2+0x2f4>)
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7f8 f8c3 	bl	8000150 <__aeabi_dmul>
 8007fca:	f7f8 fc2f 	bl	800082c <__aeabi_d2iz>
 8007fce:	f7f8 fb3b 	bl	8000648 <__aeabi_i2d>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	e9cd 2300 	strd	r2, r3, [sp]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	4b37      	ldr	r3, [pc, #220]	@ (80080bc <__kernel_rem_pio2+0x2f8>)
 8007fde:	f7f8 f8b7 	bl	8000150 <__aeabi_dmul>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	4629      	mov	r1, r5
 8007fea:	f7f8 f9df 	bl	80003ac <__aeabi_dsub>
 8007fee:	f7f8 fc1d 	bl	800082c <__aeabi_d2iz>
 8007ff2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007ff6:	f849 0b04 	str.w	r0, [r9], #4
 8007ffa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ffe:	f7f8 f9d7 	bl	80003b0 <__adddf3>
 8008002:	3f01      	subs	r7, #1
 8008004:	4604      	mov	r4, r0
 8008006:	460d      	mov	r5, r1
 8008008:	e763      	b.n	8007ed2 <__kernel_rem_pio2+0x10e>
 800800a:	d106      	bne.n	800801a <__kernel_rem_pio2+0x256>
 800800c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008010:	aa0c      	add	r2, sp, #48	@ 0x30
 8008012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008016:	15db      	asrs	r3, r3, #23
 8008018:	e79d      	b.n	8007f56 <__kernel_rem_pio2+0x192>
 800801a:	2200      	movs	r2, #0
 800801c:	4b28      	ldr	r3, [pc, #160]	@ (80080c0 <__kernel_rem_pio2+0x2fc>)
 800801e:	f7f8 fbf1 	bl	8000804 <__aeabi_dcmpge>
 8008022:	2800      	cmp	r0, #0
 8008024:	d13f      	bne.n	80080a6 <__kernel_rem_pio2+0x2e2>
 8008026:	9000      	str	r0, [sp, #0]
 8008028:	2200      	movs	r2, #0
 800802a:	2300      	movs	r3, #0
 800802c:	4640      	mov	r0, r8
 800802e:	4649      	mov	r1, r9
 8008030:	f7f8 fbca 	bl	80007c8 <__aeabi_dcmpeq>
 8008034:	2800      	cmp	r0, #0
 8008036:	f000 80af 	beq.w	8008198 <__kernel_rem_pio2+0x3d4>
 800803a:	2200      	movs	r2, #0
 800803c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008040:	9902      	ldr	r1, [sp, #8]
 8008042:	428b      	cmp	r3, r1
 8008044:	da61      	bge.n	800810a <__kernel_rem_pio2+0x346>
 8008046:	2a00      	cmp	r2, #0
 8008048:	d076      	beq.n	8008138 <__kernel_rem_pio2+0x374>
 800804a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800804e:	ab0c      	add	r3, sp, #48	@ 0x30
 8008050:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008054:	f1aa 0a18 	sub.w	sl, sl, #24
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0f6      	beq.n	800804a <__kernel_rem_pio2+0x286>
 800805c:	4652      	mov	r2, sl
 800805e:	2000      	movs	r0, #0
 8008060:	4914      	ldr	r1, [pc, #80]	@ (80080b4 <__kernel_rem_pio2+0x2f0>)
 8008062:	f000 f9d5 	bl	8008410 <scalbn>
 8008066:	465d      	mov	r5, fp
 8008068:	4606      	mov	r6, r0
 800806a:	460f      	mov	r7, r1
 800806c:	f04f 0900 	mov.w	r9, #0
 8008070:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008072:	f8df a044 	ldr.w	sl, [pc, #68]	@ 80080b8 <__kernel_rem_pio2+0x2f4>
 8008076:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800807a:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800807e:	2d00      	cmp	r5, #0
 8008080:	f280 80c0 	bge.w	8008204 <__kernel_rem_pio2+0x440>
 8008084:	465d      	mov	r5, fp
 8008086:	2d00      	cmp	r5, #0
 8008088:	f2c0 80f0 	blt.w	800826c <__kernel_rem_pio2+0x4a8>
 800808c:	4b0d      	ldr	r3, [pc, #52]	@ (80080c4 <__kernel_rem_pio2+0x300>)
 800808e:	f04f 0900 	mov.w	r9, #0
 8008092:	9306      	str	r3, [sp, #24]
 8008094:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008096:	f04f 0a00 	mov.w	sl, #0
 800809a:	2700      	movs	r7, #0
 800809c:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 80080a0:	ebab 0605 	sub.w	r6, fp, r5
 80080a4:	e0d6      	b.n	8008254 <__kernel_rem_pio2+0x490>
 80080a6:	2302      	movs	r3, #2
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	e758      	b.n	8007f5e <__kernel_rem_pio2+0x19a>
 80080ac:	08008850 	.word	0x08008850
 80080b0:	40200000 	.word	0x40200000
 80080b4:	3ff00000 	.word	0x3ff00000
 80080b8:	3e700000 	.word	0x3e700000
 80080bc:	41700000 	.word	0x41700000
 80080c0:	3fe00000 	.word	0x3fe00000
 80080c4:	08008810 	.word	0x08008810
 80080c8:	f856 3b04 	ldr.w	r3, [r6], #4
 80080cc:	b944      	cbnz	r4, 80080e0 <__kernel_rem_pio2+0x31c>
 80080ce:	b123      	cbz	r3, 80080da <__kernel_rem_pio2+0x316>
 80080d0:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80080d4:	f846 3c04 	str.w	r3, [r6, #-4]
 80080d8:	2301      	movs	r3, #1
 80080da:	461c      	mov	r4, r3
 80080dc:	3201      	adds	r2, #1
 80080de:	e745      	b.n	8007f6c <__kernel_rem_pio2+0x1a8>
 80080e0:	1acb      	subs	r3, r1, r3
 80080e2:	e7f7      	b.n	80080d4 <__kernel_rem_pio2+0x310>
 80080e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80080e8:	ab0c      	add	r3, sp, #48	@ 0x30
 80080ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80080f2:	a90c      	add	r1, sp, #48	@ 0x30
 80080f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80080f8:	e746      	b.n	8007f88 <__kernel_rem_pio2+0x1c4>
 80080fa:	f10b 32ff 	add.w	r2, fp, #4294967295
 80080fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8008100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008104:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008108:	e7f3      	b.n	80080f2 <__kernel_rem_pio2+0x32e>
 800810a:	a90c      	add	r1, sp, #48	@ 0x30
 800810c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008110:	3b01      	subs	r3, #1
 8008112:	430a      	orrs	r2, r1
 8008114:	e794      	b.n	8008040 <__kernel_rem_pio2+0x27c>
 8008116:	3401      	adds	r4, #1
 8008118:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800811c:	2a00      	cmp	r2, #0
 800811e:	d0fa      	beq.n	8008116 <__kernel_rem_pio2+0x352>
 8008120:	9b08      	ldr	r3, [sp, #32]
 8008122:	aa20      	add	r2, sp, #128	@ 0x80
 8008124:	445b      	add	r3, fp
 8008126:	f10b 0801 	add.w	r8, fp, #1
 800812a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800812e:	445c      	add	r4, fp
 8008130:	4544      	cmp	r4, r8
 8008132:	da04      	bge.n	800813e <__kernel_rem_pio2+0x37a>
 8008134:	46a3      	mov	fp, r4
 8008136:	e6bf      	b.n	8007eb8 <__kernel_rem_pio2+0xf4>
 8008138:	2401      	movs	r4, #1
 800813a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800813c:	e7ec      	b.n	8008118 <__kernel_rem_pio2+0x354>
 800813e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008140:	46ab      	mov	fp, r5
 8008142:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008146:	f7f8 fa7f 	bl	8000648 <__aeabi_i2d>
 800814a:	f04f 0900 	mov.w	r9, #0
 800814e:	2600      	movs	r6, #0
 8008150:	2700      	movs	r7, #0
 8008152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008154:	e9c5 0100 	strd	r0, r1, [r5]
 8008158:	3b08      	subs	r3, #8
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	9b06      	ldr	r3, [sp, #24]
 800815e:	4599      	cmp	r9, r3
 8008160:	dd07      	ble.n	8008172 <__kernel_rem_pio2+0x3ae>
 8008162:	9b07      	ldr	r3, [sp, #28]
 8008164:	f108 0801 	add.w	r8, r8, #1
 8008168:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800816c:	3508      	adds	r5, #8
 800816e:	9307      	str	r3, [sp, #28]
 8008170:	e7de      	b.n	8008130 <__kernel_rem_pio2+0x36c>
 8008172:	9900      	ldr	r1, [sp, #0]
 8008174:	f109 0901 	add.w	r9, r9, #1
 8008178:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800817c:	9100      	str	r1, [sp, #0]
 800817e:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8008182:	f7f7 ffe5 	bl	8000150 <__aeabi_dmul>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4630      	mov	r0, r6
 800818c:	4639      	mov	r1, r7
 800818e:	f7f8 f90f 	bl	80003b0 <__adddf3>
 8008192:	4606      	mov	r6, r0
 8008194:	460f      	mov	r7, r1
 8008196:	e7e1      	b.n	800815c <__kernel_rem_pio2+0x398>
 8008198:	f1ca 0200 	rsb	r2, sl, #0
 800819c:	4640      	mov	r0, r8
 800819e:	4649      	mov	r1, r9
 80081a0:	f000 f936 	bl	8008410 <scalbn>
 80081a4:	2200      	movs	r2, #0
 80081a6:	4b97      	ldr	r3, [pc, #604]	@ (8008404 <__kernel_rem_pio2+0x640>)
 80081a8:	4604      	mov	r4, r0
 80081aa:	460d      	mov	r5, r1
 80081ac:	f7f8 fb2a 	bl	8000804 <__aeabi_dcmpge>
 80081b0:	b300      	cbz	r0, 80081f4 <__kernel_rem_pio2+0x430>
 80081b2:	2200      	movs	r2, #0
 80081b4:	4b94      	ldr	r3, [pc, #592]	@ (8008408 <__kernel_rem_pio2+0x644>)
 80081b6:	4620      	mov	r0, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7f7 ffc9 	bl	8000150 <__aeabi_dmul>
 80081be:	f7f8 fb35 	bl	800082c <__aeabi_d2iz>
 80081c2:	4606      	mov	r6, r0
 80081c4:	f7f8 fa40 	bl	8000648 <__aeabi_i2d>
 80081c8:	2200      	movs	r2, #0
 80081ca:	4b8e      	ldr	r3, [pc, #568]	@ (8008404 <__kernel_rem_pio2+0x640>)
 80081cc:	f7f7 ffc0 	bl	8000150 <__aeabi_dmul>
 80081d0:	460b      	mov	r3, r1
 80081d2:	4602      	mov	r2, r0
 80081d4:	4629      	mov	r1, r5
 80081d6:	4620      	mov	r0, r4
 80081d8:	f7f8 f8e8 	bl	80003ac <__aeabi_dsub>
 80081dc:	f7f8 fb26 	bl	800082c <__aeabi_d2iz>
 80081e0:	ab0c      	add	r3, sp, #48	@ 0x30
 80081e2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80081e6:	f10b 0b01 	add.w	fp, fp, #1
 80081ea:	f10a 0a18 	add.w	sl, sl, #24
 80081ee:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80081f2:	e733      	b.n	800805c <__kernel_rem_pio2+0x298>
 80081f4:	4620      	mov	r0, r4
 80081f6:	4629      	mov	r1, r5
 80081f8:	f7f8 fb18 	bl	800082c <__aeabi_d2iz>
 80081fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80081fe:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8008202:	e72b      	b.n	800805c <__kernel_rem_pio2+0x298>
 8008204:	ab0c      	add	r3, sp, #48	@ 0x30
 8008206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800820a:	f7f8 fa1d 	bl	8000648 <__aeabi_i2d>
 800820e:	4632      	mov	r2, r6
 8008210:	463b      	mov	r3, r7
 8008212:	f7f7 ff9d 	bl	8000150 <__aeabi_dmul>
 8008216:	464a      	mov	r2, r9
 8008218:	e868 0102 	strd	r0, r1, [r8], #-8
 800821c:	4653      	mov	r3, sl
 800821e:	4630      	mov	r0, r6
 8008220:	4639      	mov	r1, r7
 8008222:	f7f7 ff95 	bl	8000150 <__aeabi_dmul>
 8008226:	3d01      	subs	r5, #1
 8008228:	4606      	mov	r6, r0
 800822a:	460f      	mov	r7, r1
 800822c:	e727      	b.n	800807e <__kernel_rem_pio2+0x2ba>
 800822e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8008232:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8008236:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800823a:	f8cd c018 	str.w	ip, [sp, #24]
 800823e:	f7f7 ff87 	bl	8000150 <__aeabi_dmul>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4648      	mov	r0, r9
 8008248:	4651      	mov	r1, sl
 800824a:	f7f8 f8b1 	bl	80003b0 <__adddf3>
 800824e:	4681      	mov	r9, r0
 8008250:	468a      	mov	sl, r1
 8008252:	3701      	adds	r7, #1
 8008254:	9b02      	ldr	r3, [sp, #8]
 8008256:	429f      	cmp	r7, r3
 8008258:	dc01      	bgt.n	800825e <__kernel_rem_pio2+0x49a>
 800825a:	42be      	cmp	r6, r7
 800825c:	dae7      	bge.n	800822e <__kernel_rem_pio2+0x46a>
 800825e:	ab48      	add	r3, sp, #288	@ 0x120
 8008260:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008264:	e9c6 9a00 	strd	r9, sl, [r6]
 8008268:	3d01      	subs	r5, #1
 800826a:	e70c      	b.n	8008086 <__kernel_rem_pio2+0x2c2>
 800826c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800826e:	2b02      	cmp	r3, #2
 8008270:	dc09      	bgt.n	8008286 <__kernel_rem_pio2+0x4c2>
 8008272:	2b00      	cmp	r3, #0
 8008274:	dc2c      	bgt.n	80082d0 <__kernel_rem_pio2+0x50c>
 8008276:	d04e      	beq.n	8008316 <__kernel_rem_pio2+0x552>
 8008278:	9b05      	ldr	r3, [sp, #20]
 800827a:	f003 0007 	and.w	r0, r3, #7
 800827e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8008282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008286:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8008288:	2b03      	cmp	r3, #3
 800828a:	d1f5      	bne.n	8008278 <__kernel_rem_pio2+0x4b4>
 800828c:	ab48      	add	r3, sp, #288	@ 0x120
 800828e:	441c      	add	r4, r3
 8008290:	4625      	mov	r5, r4
 8008292:	46da      	mov	sl, fp
 8008294:	f1ba 0f00 	cmp.w	sl, #0
 8008298:	dc63      	bgt.n	8008362 <__kernel_rem_pio2+0x59e>
 800829a:	4625      	mov	r5, r4
 800829c:	46da      	mov	sl, fp
 800829e:	f1ba 0f01 	cmp.w	sl, #1
 80082a2:	dc7b      	bgt.n	800839c <__kernel_rem_pio2+0x5d8>
 80082a4:	2000      	movs	r0, #0
 80082a6:	2100      	movs	r1, #0
 80082a8:	f1bb 0f01 	cmp.w	fp, #1
 80082ac:	f300 8093 	bgt.w	80083d6 <__kernel_rem_pio2+0x612>
 80082b0:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80082b4:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80082b8:	9b00      	ldr	r3, [sp, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f040 8092 	bne.w	80083e4 <__kernel_rem_pio2+0x620>
 80082c0:	9b04      	ldr	r3, [sp, #16]
 80082c2:	e9c3 7800 	strd	r7, r8, [r3]
 80082c6:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80082ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80082ce:	e7d3      	b.n	8008278 <__kernel_rem_pio2+0x4b4>
 80082d0:	465d      	mov	r5, fp
 80082d2:	2000      	movs	r0, #0
 80082d4:	2100      	movs	r1, #0
 80082d6:	ab48      	add	r3, sp, #288	@ 0x120
 80082d8:	441c      	add	r4, r3
 80082da:	2d00      	cmp	r5, #0
 80082dc:	da32      	bge.n	8008344 <__kernel_rem_pio2+0x580>
 80082de:	9b00      	ldr	r3, [sp, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d035      	beq.n	8008350 <__kernel_rem_pio2+0x58c>
 80082e4:	4602      	mov	r2, r0
 80082e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082ea:	9c04      	ldr	r4, [sp, #16]
 80082ec:	2501      	movs	r5, #1
 80082ee:	e9c4 2300 	strd	r2, r3, [r4]
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80082fa:	f7f8 f857 	bl	80003ac <__aeabi_dsub>
 80082fe:	ac48      	add	r4, sp, #288	@ 0x120
 8008300:	45ab      	cmp	fp, r5
 8008302:	da28      	bge.n	8008356 <__kernel_rem_pio2+0x592>
 8008304:	9b00      	ldr	r3, [sp, #0]
 8008306:	b113      	cbz	r3, 800830e <__kernel_rem_pio2+0x54a>
 8008308:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800830c:	4619      	mov	r1, r3
 800830e:	9b04      	ldr	r3, [sp, #16]
 8008310:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008314:	e7b0      	b.n	8008278 <__kernel_rem_pio2+0x4b4>
 8008316:	2000      	movs	r0, #0
 8008318:	2100      	movs	r1, #0
 800831a:	ab48      	add	r3, sp, #288	@ 0x120
 800831c:	441c      	add	r4, r3
 800831e:	f1bb 0f00 	cmp.w	fp, #0
 8008322:	da08      	bge.n	8008336 <__kernel_rem_pio2+0x572>
 8008324:	9b00      	ldr	r3, [sp, #0]
 8008326:	b113      	cbz	r3, 800832e <__kernel_rem_pio2+0x56a>
 8008328:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800832c:	4619      	mov	r1, r3
 800832e:	9b04      	ldr	r3, [sp, #16]
 8008330:	e9c3 0100 	strd	r0, r1, [r3]
 8008334:	e7a0      	b.n	8008278 <__kernel_rem_pio2+0x4b4>
 8008336:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800833a:	f7f8 f839 	bl	80003b0 <__adddf3>
 800833e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008342:	e7ec      	b.n	800831e <__kernel_rem_pio2+0x55a>
 8008344:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8008348:	f7f8 f832 	bl	80003b0 <__adddf3>
 800834c:	3d01      	subs	r5, #1
 800834e:	e7c4      	b.n	80082da <__kernel_rem_pio2+0x516>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	e7c9      	b.n	80082ea <__kernel_rem_pio2+0x526>
 8008356:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800835a:	f7f8 f829 	bl	80003b0 <__adddf3>
 800835e:	3501      	adds	r5, #1
 8008360:	e7ce      	b.n	8008300 <__kernel_rem_pio2+0x53c>
 8008362:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008366:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800836a:	4640      	mov	r0, r8
 800836c:	4649      	mov	r1, r9
 800836e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008372:	f7f8 f81d 	bl	80003b0 <__adddf3>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4606      	mov	r6, r0
 800837c:	460f      	mov	r7, r1
 800837e:	4640      	mov	r0, r8
 8008380:	4649      	mov	r1, r9
 8008382:	f7f8 f813 	bl	80003ac <__aeabi_dsub>
 8008386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800838a:	f7f8 f811 	bl	80003b0 <__adddf3>
 800838e:	e865 0102 	strd	r0, r1, [r5], #-8
 8008392:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008396:	e9c5 6700 	strd	r6, r7, [r5]
 800839a:	e77b      	b.n	8008294 <__kernel_rem_pio2+0x4d0>
 800839c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083a0:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 80083a4:	4640      	mov	r0, r8
 80083a6:	4649      	mov	r1, r9
 80083a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083ac:	f7f8 f800 	bl	80003b0 <__adddf3>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4606      	mov	r6, r0
 80083b6:	460f      	mov	r7, r1
 80083b8:	4640      	mov	r0, r8
 80083ba:	4649      	mov	r1, r9
 80083bc:	f7f7 fff6 	bl	80003ac <__aeabi_dsub>
 80083c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c4:	f7f7 fff4 	bl	80003b0 <__adddf3>
 80083c8:	e865 0102 	strd	r0, r1, [r5], #-8
 80083cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083d0:	e9c5 6700 	strd	r6, r7, [r5]
 80083d4:	e763      	b.n	800829e <__kernel_rem_pio2+0x4da>
 80083d6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80083da:	f7f7 ffe9 	bl	80003b0 <__adddf3>
 80083de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083e2:	e761      	b.n	80082a8 <__kernel_rem_pio2+0x4e4>
 80083e4:	9b04      	ldr	r3, [sp, #16]
 80083e6:	9a04      	ldr	r2, [sp, #16]
 80083e8:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80083ec:	601f      	str	r7, [r3, #0]
 80083ee:	605c      	str	r4, [r3, #4]
 80083f0:	609d      	str	r5, [r3, #8]
 80083f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80083f6:	60d3      	str	r3, [r2, #12]
 80083f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80083fc:	6110      	str	r0, [r2, #16]
 80083fe:	6153      	str	r3, [r2, #20]
 8008400:	e73a      	b.n	8008278 <__kernel_rem_pio2+0x4b4>
 8008402:	bf00      	nop
 8008404:	41700000 	.word	0x41700000
 8008408:	3e700000 	.word	0x3e700000
 800840c:	00000000 	.word	0x00000000

08008410 <scalbn>:
 8008410:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8008414:	4616      	mov	r6, r2
 8008416:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800841a:	4683      	mov	fp, r0
 800841c:	468c      	mov	ip, r1
 800841e:	460b      	mov	r3, r1
 8008420:	b982      	cbnz	r2, 8008444 <scalbn+0x34>
 8008422:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008426:	4303      	orrs	r3, r0
 8008428:	d039      	beq.n	800849e <scalbn+0x8e>
 800842a:	4b2f      	ldr	r3, [pc, #188]	@ (80084e8 <scalbn+0xd8>)
 800842c:	2200      	movs	r2, #0
 800842e:	f7f7 fe8f 	bl	8000150 <__aeabi_dmul>
 8008432:	4b2e      	ldr	r3, [pc, #184]	@ (80084ec <scalbn+0xdc>)
 8008434:	4683      	mov	fp, r0
 8008436:	429e      	cmp	r6, r3
 8008438:	468c      	mov	ip, r1
 800843a:	da0d      	bge.n	8008458 <scalbn+0x48>
 800843c:	a326      	add	r3, pc, #152	@ (adr r3, 80084d8 <scalbn+0xc8>)
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	e01b      	b.n	800847c <scalbn+0x6c>
 8008444:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8008448:	42ba      	cmp	r2, r7
 800844a:	d109      	bne.n	8008460 <scalbn+0x50>
 800844c:	4602      	mov	r2, r0
 800844e:	f7f7 ffaf 	bl	80003b0 <__adddf3>
 8008452:	4683      	mov	fp, r0
 8008454:	468c      	mov	ip, r1
 8008456:	e022      	b.n	800849e <scalbn+0x8e>
 8008458:	460b      	mov	r3, r1
 800845a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800845e:	3a36      	subs	r2, #54	@ 0x36
 8008460:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008464:	428e      	cmp	r6, r1
 8008466:	dd0c      	ble.n	8008482 <scalbn+0x72>
 8008468:	a31d      	add	r3, pc, #116	@ (adr r3, 80084e0 <scalbn+0xd0>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	461c      	mov	r4, r3
 8008470:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8008474:	f361 74df 	bfi	r4, r1, #31, #1
 8008478:	4621      	mov	r1, r4
 800847a:	481d      	ldr	r0, [pc, #116]	@ (80084f0 <scalbn+0xe0>)
 800847c:	f7f7 fe68 	bl	8000150 <__aeabi_dmul>
 8008480:	e7e7      	b.n	8008452 <scalbn+0x42>
 8008482:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008486:	4432      	add	r2, r6
 8008488:	428a      	cmp	r2, r1
 800848a:	dced      	bgt.n	8008468 <scalbn+0x58>
 800848c:	2a00      	cmp	r2, #0
 800848e:	dd0a      	ble.n	80084a6 <scalbn+0x96>
 8008490:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008494:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008498:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800849c:	46ac      	mov	ip, r5
 800849e:	4658      	mov	r0, fp
 80084a0:	4661      	mov	r1, ip
 80084a2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80084a6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80084aa:	da09      	bge.n	80084c0 <scalbn+0xb0>
 80084ac:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80084b0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80084b4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80084b8:	480e      	ldr	r0, [pc, #56]	@ (80084f4 <scalbn+0xe4>)
 80084ba:	f041 011f 	orr.w	r1, r1, #31
 80084be:	e7bd      	b.n	800843c <scalbn+0x2c>
 80084c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80084c4:	3236      	adds	r2, #54	@ 0x36
 80084c6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80084ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80084ce:	4658      	mov	r0, fp
 80084d0:	4629      	mov	r1, r5
 80084d2:	2200      	movs	r2, #0
 80084d4:	4b08      	ldr	r3, [pc, #32]	@ (80084f8 <scalbn+0xe8>)
 80084d6:	e7d1      	b.n	800847c <scalbn+0x6c>
 80084d8:	c2f8f359 	.word	0xc2f8f359
 80084dc:	01a56e1f 	.word	0x01a56e1f
 80084e0:	8800759c 	.word	0x8800759c
 80084e4:	7e37e43c 	.word	0x7e37e43c
 80084e8:	43500000 	.word	0x43500000
 80084ec:	ffff3cb0 	.word	0xffff3cb0
 80084f0:	8800759c 	.word	0x8800759c
 80084f4:	c2f8f359 	.word	0xc2f8f359
 80084f8:	3c900000 	.word	0x3c900000
 80084fc:	00000000 	.word	0x00000000

08008500 <floor>:
 8008500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008504:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008508:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800850c:	2e13      	cmp	r6, #19
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	460c      	mov	r4, r1
 8008514:	4605      	mov	r5, r0
 8008516:	4680      	mov	r8, r0
 8008518:	dc35      	bgt.n	8008586 <floor+0x86>
 800851a:	2e00      	cmp	r6, #0
 800851c:	da17      	bge.n	800854e <floor+0x4e>
 800851e:	a334      	add	r3, pc, #208	@ (adr r3, 80085f0 <floor+0xf0>)
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f7f7 ff44 	bl	80003b0 <__adddf3>
 8008528:	2200      	movs	r2, #0
 800852a:	2300      	movs	r3, #0
 800852c:	f7f8 f974 	bl	8000818 <__aeabi_dcmpgt>
 8008530:	b150      	cbz	r0, 8008548 <floor+0x48>
 8008532:	2c00      	cmp	r4, #0
 8008534:	da57      	bge.n	80085e6 <floor+0xe6>
 8008536:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800853a:	432c      	orrs	r4, r5
 800853c:	2500      	movs	r5, #0
 800853e:	42ac      	cmp	r4, r5
 8008540:	4c2d      	ldr	r4, [pc, #180]	@ (80085f8 <floor+0xf8>)
 8008542:	bf08      	it	eq
 8008544:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008548:	4623      	mov	r3, r4
 800854a:	462a      	mov	r2, r5
 800854c:	e024      	b.n	8008598 <floor+0x98>
 800854e:	4f2b      	ldr	r7, [pc, #172]	@ (80085fc <floor+0xfc>)
 8008550:	4137      	asrs	r7, r6
 8008552:	ea01 0c07 	and.w	ip, r1, r7
 8008556:	ea5c 0c00 	orrs.w	ip, ip, r0
 800855a:	d01d      	beq.n	8008598 <floor+0x98>
 800855c:	a324      	add	r3, pc, #144	@ (adr r3, 80085f0 <floor+0xf0>)
 800855e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008562:	f7f7 ff25 	bl	80003b0 <__adddf3>
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	f7f8 f955 	bl	8000818 <__aeabi_dcmpgt>
 800856e:	2800      	cmp	r0, #0
 8008570:	d0ea      	beq.n	8008548 <floor+0x48>
 8008572:	2c00      	cmp	r4, #0
 8008574:	bfbe      	ittt	lt
 8008576:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800857a:	4133      	asrlt	r3, r6
 800857c:	18e4      	addlt	r4, r4, r3
 800857e:	2500      	movs	r5, #0
 8008580:	ea24 0407 	bic.w	r4, r4, r7
 8008584:	e7e0      	b.n	8008548 <floor+0x48>
 8008586:	2e33      	cmp	r6, #51	@ 0x33
 8008588:	dd0a      	ble.n	80085a0 <floor+0xa0>
 800858a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800858e:	d103      	bne.n	8008598 <floor+0x98>
 8008590:	f7f7 ff0e 	bl	80003b0 <__adddf3>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4610      	mov	r0, r2
 800859a:	4619      	mov	r1, r3
 800859c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a0:	f04f 3cff 	mov.w	ip, #4294967295
 80085a4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80085a8:	fa2c f707 	lsr.w	r7, ip, r7
 80085ac:	4207      	tst	r7, r0
 80085ae:	d0f3      	beq.n	8008598 <floor+0x98>
 80085b0:	a30f      	add	r3, pc, #60	@ (adr r3, 80085f0 <floor+0xf0>)
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	f7f7 fefb 	bl	80003b0 <__adddf3>
 80085ba:	2200      	movs	r2, #0
 80085bc:	2300      	movs	r3, #0
 80085be:	f7f8 f92b 	bl	8000818 <__aeabi_dcmpgt>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d0c0      	beq.n	8008548 <floor+0x48>
 80085c6:	2c00      	cmp	r4, #0
 80085c8:	da0a      	bge.n	80085e0 <floor+0xe0>
 80085ca:	2e14      	cmp	r6, #20
 80085cc:	d101      	bne.n	80085d2 <floor+0xd2>
 80085ce:	3401      	adds	r4, #1
 80085d0:	e006      	b.n	80085e0 <floor+0xe0>
 80085d2:	2301      	movs	r3, #1
 80085d4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80085d8:	40b3      	lsls	r3, r6
 80085da:	441d      	add	r5, r3
 80085dc:	4545      	cmp	r5, r8
 80085de:	d3f6      	bcc.n	80085ce <floor+0xce>
 80085e0:	ea25 0507 	bic.w	r5, r5, r7
 80085e4:	e7b0      	b.n	8008548 <floor+0x48>
 80085e6:	2500      	movs	r5, #0
 80085e8:	462c      	mov	r4, r5
 80085ea:	e7ad      	b.n	8008548 <floor+0x48>
 80085ec:	f3af 8000 	nop.w
 80085f0:	8800759c 	.word	0x8800759c
 80085f4:	7e37e43c 	.word	0x7e37e43c
 80085f8:	bff00000 	.word	0xbff00000
 80085fc:	000fffff 	.word	0x000fffff

08008600 <_init>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr

0800860c <_fini>:
 800860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860e:	bf00      	nop
 8008610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008612:	bc08      	pop	{r3}
 8008614:	469e      	mov	lr, r3
 8008616:	4770      	bx	lr
