
USB_HID_MouseDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c68  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08009d78  08009d78  0000ad78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e18  08009e18  0000b1c8  2**0
                  CONTENTS
  4 .ARM          00000000  08009e18  08009e18  0000b1c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e18  08009e18  0000b1c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e18  08009e18  0000ae18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e1c  08009e1c  0000ae1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c8  20000000  08009e20  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000990  200001c8  08009fe8  0000b1c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b58  08009fe8  0000bb58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d40a  00000000  00000000  0000b1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cfa  00000000  00000000  000185fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0001b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089a  00000000  00000000  0001bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199bb  00000000  00000000  0001c742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc78  00000000  00000000  000360fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e59  00000000  00000000  00045d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfbce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003498  00000000  00000000  000cfc14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d30ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001c8 	.word	0x200001c8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d60 	.word	0x08009d60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001cc 	.word	0x200001cc
 800014c:	08009d60 	.word	0x08009d60

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_frsub>:
 8000a78:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a7c:	e002      	b.n	8000a84 <__addsf3>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_fsub>:
 8000a80:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a84 <__addsf3>:
 8000a84:	0042      	lsls	r2, r0, #1
 8000a86:	bf1f      	itttt	ne
 8000a88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a8c:	ea92 0f03 	teqne	r2, r3
 8000a90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a98:	d06a      	beq.n	8000b70 <__addsf3+0xec>
 8000a9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aa2:	bfc1      	itttt	gt
 8000aa4:	18d2      	addgt	r2, r2, r3
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	4048      	eorgt	r0, r1
 8000aaa:	4041      	eorgt	r1, r0
 8000aac:	bfb8      	it	lt
 8000aae:	425b      	neglt	r3, r3
 8000ab0:	2b19      	cmp	r3, #25
 8000ab2:	bf88      	it	hi
 8000ab4:	4770      	bxhi	lr
 8000ab6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000abe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aca:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ace:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4249      	negne	r1, r1
 8000ad6:	ea92 0f03 	teq	r2, r3
 8000ada:	d03f      	beq.n	8000b5c <__addsf3+0xd8>
 8000adc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae4:	eb10 000c 	adds.w	r0, r0, ip
 8000ae8:	f1c3 0320 	rsb	r3, r3, #32
 8000aec:	fa01 f103 	lsl.w	r1, r1, r3
 8000af0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000af4:	d502      	bpl.n	8000afc <__addsf3+0x78>
 8000af6:	4249      	negs	r1, r1
 8000af8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000afc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b00:	d313      	bcc.n	8000b2a <__addsf3+0xa6>
 8000b02:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b06:	d306      	bcc.n	8000b16 <__addsf3+0x92>
 8000b08:	0840      	lsrs	r0, r0, #1
 8000b0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0e:	f102 0201 	add.w	r2, r2, #1
 8000b12:	2afe      	cmp	r2, #254	@ 0xfe
 8000b14:	d251      	bcs.n	8000bba <__addsf3+0x136>
 8000b16:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1e:	bf08      	it	eq
 8000b20:	f020 0001 	biceq.w	r0, r0, #1
 8000b24:	ea40 0003 	orr.w	r0, r0, r3
 8000b28:	4770      	bx	lr
 8000b2a:	0049      	lsls	r1, r1, #1
 8000b2c:	eb40 0000 	adc.w	r0, r0, r0
 8000b30:	3a01      	subs	r2, #1
 8000b32:	bf28      	it	cs
 8000b34:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b38:	d2ed      	bcs.n	8000b16 <__addsf3+0x92>
 8000b3a:	fab0 fc80 	clz	ip, r0
 8000b3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b42:	ebb2 020c 	subs.w	r2, r2, ip
 8000b46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b4a:	bfaa      	itet	ge
 8000b4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b50:	4252      	neglt	r2, r2
 8000b52:	4318      	orrge	r0, r3
 8000b54:	bfbc      	itt	lt
 8000b56:	40d0      	lsrlt	r0, r2
 8000b58:	4318      	orrlt	r0, r3
 8000b5a:	4770      	bx	lr
 8000b5c:	f092 0f00 	teq	r2, #0
 8000b60:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b64:	bf06      	itte	eq
 8000b66:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b6a:	3201      	addeq	r2, #1
 8000b6c:	3b01      	subne	r3, #1
 8000b6e:	e7b5      	b.n	8000adc <__addsf3+0x58>
 8000b70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b78:	bf18      	it	ne
 8000b7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7e:	d021      	beq.n	8000bc4 <__addsf3+0x140>
 8000b80:	ea92 0f03 	teq	r2, r3
 8000b84:	d004      	beq.n	8000b90 <__addsf3+0x10c>
 8000b86:	f092 0f00 	teq	r2, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	4608      	moveq	r0, r1
 8000b8e:	4770      	bx	lr
 8000b90:	ea90 0f01 	teq	r0, r1
 8000b94:	bf1c      	itt	ne
 8000b96:	2000      	movne	r0, #0
 8000b98:	4770      	bxne	lr
 8000b9a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b9e:	d104      	bne.n	8000baa <__addsf3+0x126>
 8000ba0:	0040      	lsls	r0, r0, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	4770      	bx	lr
 8000baa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bae:	bf3c      	itt	cc
 8000bb0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bb4:	4770      	bxcc	lr
 8000bb6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bba:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	4770      	bx	lr
 8000bc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc8:	bf16      	itet	ne
 8000bca:	4608      	movne	r0, r1
 8000bcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd0:	4601      	movne	r1, r0
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	bf06      	itte	eq
 8000bd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bda:	ea90 0f01 	teqeq	r0, r1
 8000bde:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000be2:	4770      	bx	lr

08000be4 <__aeabi_ui2f>:
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e004      	b.n	8000bf4 <__aeabi_i2f+0x8>
 8000bea:	bf00      	nop

08000bec <__aeabi_i2f>:
 8000bec:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000bf0:	bf48      	it	mi
 8000bf2:	4240      	negmi	r0, r0
 8000bf4:	ea5f 0c00 	movs.w	ip, r0
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c00:	4601      	mov	r1, r0
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	e01c      	b.n	8000c42 <__aeabi_l2f+0x2a>

08000c08 <__aeabi_ul2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e00a      	b.n	8000c2c <__aeabi_l2f+0x14>
 8000c16:	bf00      	nop

08000c18 <__aeabi_l2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__aeabi_l2f+0x14>
 8000c26:	4240      	negs	r0, r0
 8000c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2c:	ea5f 0c01 	movs.w	ip, r1
 8000c30:	bf02      	ittt	eq
 8000c32:	4684      	moveq	ip, r0
 8000c34:	4601      	moveq	r1, r0
 8000c36:	2000      	moveq	r0, #0
 8000c38:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c3c:	bf08      	it	eq
 8000c3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c42:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c46:	fabc f28c 	clz	r2, ip
 8000c4a:	3a08      	subs	r2, #8
 8000c4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c50:	db10      	blt.n	8000c74 <__aeabi_l2f+0x5c>
 8000c52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c56:	4463      	add	r3, ip
 8000c58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5c:	f1c2 0220 	rsb	r2, r2, #32
 8000c60:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	eb43 0002 	adc.w	r0, r3, r2
 8000c6c:	bf08      	it	eq
 8000c6e:	f020 0001 	biceq.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	f102 0220 	add.w	r2, r2, #32
 8000c78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7c:	f1c2 0220 	rsb	r2, r2, #32
 8000c80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c84:	fa21 f202 	lsr.w	r2, r1, r2
 8000c88:	eb43 0002 	adc.w	r0, r3, r2
 8000c8c:	bf08      	it	eq
 8000c8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_fmul>:
 8000c94:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ca2:	ea92 0f0c 	teqne	r2, ip
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d06f      	beq.n	8000d8c <__aeabi_fmul+0xf8>
 8000cac:	441a      	add	r2, r3
 8000cae:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb2:	0240      	lsls	r0, r0, #9
 8000cb4:	bf18      	it	ne
 8000cb6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cba:	d01e      	beq.n	8000cfa <__aeabi_fmul+0x66>
 8000cbc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ccc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cd0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cd4:	bf3e      	ittt	cc
 8000cd6:	0049      	lslcc	r1, r1, #1
 8000cd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cdc:	005b      	lslcc	r3, r3, #1
 8000cde:	ea40 0001 	orr.w	r0, r0, r1
 8000ce2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ce6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ce8:	d81d      	bhi.n	8000d26 <__aeabi_fmul+0x92>
 8000cea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cf2:	bf08      	it	eq
 8000cf4:	f020 0001 	biceq.w	r0, r0, #1
 8000cf8:	4770      	bx	lr
 8000cfa:	f090 0f00 	teq	r0, #0
 8000cfe:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d02:	bf08      	it	eq
 8000d04:	0249      	lsleq	r1, r1, #9
 8000d06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d0e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d10:	bfc2      	ittt	gt
 8000d12:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d1a:	4770      	bxgt	lr
 8000d1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	3a01      	subs	r2, #1
 8000d26:	dc5d      	bgt.n	8000de4 <__aeabi_fmul+0x150>
 8000d28:	f112 0f19 	cmn.w	r2, #25
 8000d2c:	bfdc      	itt	le
 8000d2e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d32:	4770      	bxle	lr
 8000d34:	f1c2 0200 	rsb	r2, r2, #0
 8000d38:	0041      	lsls	r1, r0, #1
 8000d3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d3e:	f1c2 0220 	rsb	r2, r2, #32
 8000d42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d4a:	f140 0000 	adc.w	r0, r0, #0
 8000d4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d52:	bf08      	it	eq
 8000d54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d58:	4770      	bx	lr
 8000d5a:	f092 0f00 	teq	r2, #0
 8000d5e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0040      	lsleq	r0, r0, #1
 8000d66:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d6a:	3a01      	subeq	r2, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fmul+0xce>
 8000d6e:	ea40 000c 	orr.w	r0, r0, ip
 8000d72:	f093 0f00 	teq	r3, #0
 8000d76:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d7a:	bf02      	ittt	eq
 8000d7c:	0049      	lsleq	r1, r1, #1
 8000d7e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d82:	3b01      	subeq	r3, #1
 8000d84:	d0f9      	beq.n	8000d7a <__aeabi_fmul+0xe6>
 8000d86:	ea41 010c 	orr.w	r1, r1, ip
 8000d8a:	e78f      	b.n	8000cac <__aeabi_fmul+0x18>
 8000d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d90:	ea92 0f0c 	teq	r2, ip
 8000d94:	bf18      	it	ne
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d00a      	beq.n	8000db2 <__aeabi_fmul+0x11e>
 8000d9c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000da0:	bf18      	it	ne
 8000da2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000da6:	d1d8      	bne.n	8000d5a <__aeabi_fmul+0xc6>
 8000da8:	ea80 0001 	eor.w	r0, r0, r1
 8000dac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	bf17      	itett	ne
 8000db8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	f091 0f00 	teqne	r1, #0
 8000dc2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dc6:	d014      	beq.n	8000df2 <__aeabi_fmul+0x15e>
 8000dc8:	ea92 0f0c 	teq	r2, ip
 8000dcc:	d101      	bne.n	8000dd2 <__aeabi_fmul+0x13e>
 8000dce:	0242      	lsls	r2, r0, #9
 8000dd0:	d10f      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000dd2:	ea93 0f0c 	teq	r3, ip
 8000dd6:	d103      	bne.n	8000de0 <__aeabi_fmul+0x14c>
 8000dd8:	024b      	lsls	r3, r1, #9
 8000dda:	bf18      	it	ne
 8000ddc:	4608      	movne	r0, r1
 8000dde:	d108      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000de0:	ea80 0001 	eor.w	r0, r0, r1
 8000de4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000de8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df0:	4770      	bx	lr
 8000df2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000df6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fdiv>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d069      	beq.n	8000ee8 <__aeabi_fdiv+0xec>
 8000e14:	eba2 0203 	sub.w	r2, r2, r3
 8000e18:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1c:	0249      	lsls	r1, r1, #9
 8000e1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e22:	d037      	beq.n	8000e94 <__aeabi_fdiv+0x98>
 8000e24:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e34:	428b      	cmp	r3, r1
 8000e36:	bf38      	it	cc
 8000e38:	005b      	lslcc	r3, r3, #1
 8000e3a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e3e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e42:	428b      	cmp	r3, r1
 8000e44:	bf24      	itt	cs
 8000e46:	1a5b      	subcs	r3, r3, r1
 8000e48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e50:	bf24      	itt	cs
 8000e52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e5e:	bf24      	itt	cs
 8000e60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	bf18      	it	ne
 8000e7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e7e:	d1e0      	bne.n	8000e42 <__aeabi_fdiv+0x46>
 8000e80:	2afd      	cmp	r2, #253	@ 0xfd
 8000e82:	f63f af50 	bhi.w	8000d26 <__aeabi_fmul+0x92>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e9c:	327f      	adds	r2, #127	@ 0x7f
 8000e9e:	bfc2      	ittt	gt
 8000ea0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ea4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea8:	4770      	bxgt	lr
 8000eaa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	3a01      	subs	r2, #1
 8000eb4:	e737      	b.n	8000d26 <__aeabi_fmul+0x92>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0040      	lsleq	r0, r0, #1
 8000ec2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ec6:	3a01      	subeq	r2, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fdiv+0xc2>
 8000eca:	ea40 000c 	orr.w	r0, r0, ip
 8000ece:	f093 0f00 	teq	r3, #0
 8000ed2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ed6:	bf02      	ittt	eq
 8000ed8:	0049      	lsleq	r1, r1, #1
 8000eda:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ede:	3b01      	subeq	r3, #1
 8000ee0:	d0f9      	beq.n	8000ed6 <__aeabi_fdiv+0xda>
 8000ee2:	ea41 010c 	orr.w	r1, r1, ip
 8000ee6:	e795      	b.n	8000e14 <__aeabi_fdiv+0x18>
 8000ee8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d108      	bne.n	8000f04 <__aeabi_fdiv+0x108>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	f47f af7d 	bne.w	8000df2 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	f47f af70 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e776      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f04:	ea93 0f0c 	teq	r3, ip
 8000f08:	d104      	bne.n	8000f14 <__aeabi_fdiv+0x118>
 8000f0a:	024b      	lsls	r3, r1, #9
 8000f0c:	f43f af4c 	beq.w	8000da8 <__aeabi_fmul+0x114>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e76e      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f14:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f18:	bf18      	it	ne
 8000f1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f1e:	d1ca      	bne.n	8000eb6 <__aeabi_fdiv+0xba>
 8000f20:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f24:	f47f af5c 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f28:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f2c:	f47f af3c 	bne.w	8000da8 <__aeabi_fmul+0x114>
 8000f30:	e75f      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f32:	bf00      	nop

08000f34 <__gesf2>:
 8000f34:	f04f 3cff 	mov.w	ip, #4294967295
 8000f38:	e006      	b.n	8000f48 <__cmpsf2+0x4>
 8000f3a:	bf00      	nop

08000f3c <__lesf2>:
 8000f3c:	f04f 0c01 	mov.w	ip, #1
 8000f40:	e002      	b.n	8000f48 <__cmpsf2+0x4>
 8000f42:	bf00      	nop

08000f44 <__cmpsf2>:
 8000f44:	f04f 0c01 	mov.w	ip, #1
 8000f48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f58:	bf18      	it	ne
 8000f5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f5e:	d011      	beq.n	8000f84 <__cmpsf2+0x40>
 8000f60:	b001      	add	sp, #4
 8000f62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f66:	bf18      	it	ne
 8000f68:	ea90 0f01 	teqne	r0, r1
 8000f6c:	bf58      	it	pl
 8000f6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f72:	bf88      	it	hi
 8000f74:	17c8      	asrhi	r0, r1, #31
 8000f76:	bf38      	it	cc
 8000f78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f7c:	bf18      	it	ne
 8000f7e:	f040 0001 	orrne.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f88:	d102      	bne.n	8000f90 <__cmpsf2+0x4c>
 8000f8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f8e:	d105      	bne.n	8000f9c <__cmpsf2+0x58>
 8000f90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f94:	d1e4      	bne.n	8000f60 <__cmpsf2+0x1c>
 8000f96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f9a:	d0e1      	beq.n	8000f60 <__cmpsf2+0x1c>
 8000f9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_cfrcmple>:
 8000fa4:	4684      	mov	ip, r0
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	4661      	mov	r1, ip
 8000faa:	e7ff      	b.n	8000fac <__aeabi_cfcmpeq>

08000fac <__aeabi_cfcmpeq>:
 8000fac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fae:	f7ff ffc9 	bl	8000f44 <__cmpsf2>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	bf48      	it	mi
 8000fb6:	f110 0f00 	cmnmi.w	r0, #0
 8000fba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fbc <__aeabi_fcmpeq>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff fff4 	bl	8000fac <__aeabi_cfcmpeq>
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2001      	moveq	r0, #1
 8000fc8:	2000      	movne	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmplt>:
 8000fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd4:	f7ff ffea 	bl	8000fac <__aeabi_cfcmpeq>
 8000fd8:	bf34      	ite	cc
 8000fda:	2001      	movcc	r0, #1
 8000fdc:	2000      	movcs	r0, #0
 8000fde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_fcmple>:
 8000fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe8:	f7ff ffe0 	bl	8000fac <__aeabi_cfcmpeq>
 8000fec:	bf94      	ite	ls
 8000fee:	2001      	movls	r0, #1
 8000ff0:	2000      	movhi	r0, #0
 8000ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fcmpge>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff ffd2 	bl	8000fa4 <__aeabi_cfrcmple>
 8001000:	bf94      	ite	ls
 8001002:	2001      	movls	r0, #1
 8001004:	2000      	movhi	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <__aeabi_fcmpgt>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff ffc8 	bl	8000fa4 <__aeabi_cfrcmple>
 8001014:	bf34      	ite	cc
 8001016:	2001      	movcc	r0, #1
 8001018:	2000      	movcs	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001024:	f000 fad4 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001028:	f000 f84a 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102c:	f000 f932 	bl	8001294 <MX_GPIO_Init>
  MX_DMA_Init();
 8001030:	f000 f912 	bl	8001258 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001034:	f007 fb9a 	bl	800876c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001038:	f000 f8a0 	bl	800117c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_values, 2);
 800103c:	2202      	movs	r2, #2
 800103e:	491a      	ldr	r1, [pc, #104]	@ (80010a8 <main+0x88>)
 8001040:	481a      	ldr	r0, [pc, #104]	@ (80010ac <main+0x8c>)
 8001042:	f000 fc23 	bl	800188c <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	 x=power_map(adc_values[0], 0, 4040, 127);
 8001046:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <main+0x88>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	237f      	movs	r3, #127	@ 0x7f
 800104e:	f640 72c8 	movw	r2, #4040	@ 0xfc8
 8001052:	2100      	movs	r1, #0
 8001054:	f000 f96a 	bl	800132c <power_map>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <main+0x90>)
 800105e:	701a      	strb	r2, [r3, #0]
	  	 y=power_map(adc_values[1], 0, 4040, 127);
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <main+0x88>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	237f      	movs	r3, #127	@ 0x7f
 8001068:	f640 72c8 	movw	r2, #4040	@ 0xfc8
 800106c:	2100      	movs	r1, #0
 800106e:	f000 f95d 	bl	800132c <power_map>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <main+0x94>)
 8001078:	701a      	strb	r2, [r3, #0]
	  	 buffer[1]= x;
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <main+0x90>)
 800107c:	f993 3000 	ldrsb.w	r3, [r3]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <main+0x98>)
 8001084:	705a      	strb	r2, [r3, #1]
	  	 buffer[2]= y;
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <main+0x94>)
 8001088:	f993 3000 	ldrsb.w	r3, [r3]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <main+0x98>)
 8001090:	709a      	strb	r2, [r3, #2]
	  	 USBD_HID_SendReport(&hUsbDeviceFS,  buffer, 4);
 8001092:	2204      	movs	r2, #4
 8001094:	4908      	ldr	r1, [pc, #32]	@ (80010b8 <main+0x98>)
 8001096:	4809      	ldr	r0, [pc, #36]	@ (80010bc <main+0x9c>)
 8001098:	f006 fa7c 	bl	8007594 <USBD_HID_SendReport>
	  	 HAL_Delay(10);
 800109c:	200a      	movs	r0, #10
 800109e:	f000 faf9 	bl	8001694 <HAL_Delay>
	  	 x=power_map(adc_values[0], 0, 4040, 127);
 80010a2:	bf00      	nop
 80010a4:	e7cf      	b.n	8001046 <main+0x26>
 80010a6:	bf00      	nop
 80010a8:	2000025c 	.word	0x2000025c
 80010ac:	200001e4 	.word	0x200001e4
 80010b0:	20000264 	.word	0x20000264
 80010b4:	20000265 	.word	0x20000265
 80010b8:	20000258 	.word	0x20000258
 80010bc:	20000270 	.word	0x20000270

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	@ 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ca:	2228      	movs	r2, #40	@ 0x28
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f007 ff04 	bl	8008edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f0:	2301      	movs	r3, #1
 80010f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fe:	2301      	movs	r3, #1
 8001100:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800110a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800110c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001110:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001112:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001116:	4618      	mov	r0, r3
 8001118:	f003 f8cc 	bl	80042b4 <HAL_RCC_OscConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001122:	f000 f949 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001126:	230f      	movs	r3, #15
 8001128:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001136:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2101      	movs	r1, #1
 8001142:	4618      	mov	r0, r3
 8001144:	f003 fb38 	bl	80047b8 <HAL_RCC_ClockConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800114e:	f000 f933 	bl	80013b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001152:	2312      	movs	r3, #18
 8001154:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001156:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800115a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800115c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001160:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4618      	mov	r0, r3
 8001166:	f003 fc83 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001170:	f000 f922 	bl	80013b8 <Error_Handler>
  }
}
 8001174:	bf00      	nop
 8001176:	3750      	adds	r7, #80	@ 0x50
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
 8001192:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800119e:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <MX_ADC1_Init+0xd0>)
 80011a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001250 <MX_ADC1_Init+0xd4>)
 80011a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011a4:	4b29      	ldr	r3, [pc, #164]	@ (800124c <MX_ADC1_Init+0xd0>)
 80011a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011ac:	4b27      	ldr	r3, [pc, #156]	@ (800124c <MX_ADC1_Init+0xd0>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b2:	4b26      	ldr	r3, [pc, #152]	@ (800124c <MX_ADC1_Init+0xd0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b8:	4b24      	ldr	r3, [pc, #144]	@ (800124c <MX_ADC1_Init+0xd0>)
 80011ba:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c0:	4b22      	ldr	r3, [pc, #136]	@ (800124c <MX_ADC1_Init+0xd0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80011c6:	4b21      	ldr	r3, [pc, #132]	@ (800124c <MX_ADC1_Init+0xd0>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011cc:	481f      	ldr	r0, [pc, #124]	@ (800124c <MX_ADC1_Init+0xd0>)
 80011ce:	f000 fa85 	bl	80016dc <HAL_ADC_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 80011d8:	f000 f8ee 	bl	80013b8 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001254 <MX_ADC1_Init+0xd8>)
 80011de:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	4815      	ldr	r0, [pc, #84]	@ (800124c <MX_ADC1_Init+0xd0>)
 80011f8:	f000 fd3a 	bl	8001c70 <HAL_ADC_AnalogWDGConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001202:	f000 f8d9 	bl	80013b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800120a:	2301      	movs	r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800120e:	2304      	movs	r3, #4
 8001210:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	@ (800124c <MX_ADC1_Init+0xd0>)
 8001218:	f000 fc32 	bl	8001a80 <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001222:	f000 f8c9 	bl	80013b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001226:	2301      	movs	r3, #1
 8001228:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800122a:	2302      	movs	r3, #2
 800122c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	@ (800124c <MX_ADC1_Init+0xd0>)
 8001234:	f000 fc24 	bl	8001a80 <HAL_ADC_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800123e:	f000 f8bb 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	@ 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200001e4 	.word	0x200001e4
 8001250:	40012400 	.word	0x40012400
 8001254:	00800200 	.word	0x00800200

08001258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800125e:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_DMA_Init+0x38>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4a0b      	ldr	r2, [pc, #44]	@ (8001290 <MX_DMA_Init+0x38>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6153      	str	r3, [r2, #20]
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_DMA_Init+0x38>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	200b      	movs	r0, #11
 800127c:	f000 ff27 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001280:	200b      	movs	r0, #11
 8001282:	f000 ff40 	bl	8002106 <HAL_NVIC_EnableIRQ>

}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <MX_GPIO_Init+0x40>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <MX_GPIO_Init+0x40>)
 80012a0:	f043 0320 	orr.w	r3, r3, #32
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <MX_GPIO_Init+0x40>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 0320 	and.w	r3, r3, #32
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <MX_GPIO_Init+0x40>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a07      	ldr	r2, [pc, #28]	@ (80012d4 <MX_GPIO_Init+0x40>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <MX_GPIO_Init+0x40>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40021000 	.word	0x40021000

080012d8 <normalize>:

/* USER CODE BEGIN 4 */
float normalize(uint32_t input, uint32_t min, uint32_t max){
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
	return (2*(float)(input-min)/(max-min))-1;
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fc7a 	bl	8000be4 <__aeabi_ui2f>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fbc5 	bl	8000a84 <__addsf3>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461c      	mov	r4, r3
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fc6d 	bl	8000be4 <__aeabi_ui2f>
 800130a:	4603      	mov	r3, r0
 800130c:	4619      	mov	r1, r3
 800130e:	4620      	mov	r0, r4
 8001310:	f7ff fd74 	bl	8000dfc <__aeabi_fdiv>
 8001314:	4603      	mov	r3, r0
 8001316:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fbb0 	bl	8000a80 <__aeabi_fsub>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bd90      	pop	{r4, r7, pc}
	...

0800132c <power_map>:

int8_t power_map(int32_t input, int32_t in_min, int32_t in_max, int32_t out_extreme) {
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]
    float normalized = normalize(input, in_min, in_max);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ffc9 	bl	80012d8 <normalize>
 8001346:	6138      	str	r0, [r7, #16]
    int sign=1;
 8001348:	2301      	movs	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
    if (normalized<0){
 800134c:	f04f 0100 	mov.w	r1, #0
 8001350:	6938      	ldr	r0, [r7, #16]
 8001352:	f7ff fe3d 	bl	8000fd0 <__aeabi_fcmplt>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <power_map+0x36>
    	sign=-1;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	617b      	str	r3, [r7, #20]
    }
    return (int8_t)sign*out_extreme*pow(fabs(normalized),3);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	b25b      	sxtb	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f840 	bl	80003f4 <__aeabi_i2d>
 8001374:	4604      	mov	r4, r0
 8001376:	460d      	mov	r5, r1
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f84a 	bl	8000418 <__aeabi_f2d>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <power_map+0x88>)
 800138a:	f007 fdd9 	bl	8008f40 <pow>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f7ff f897 	bl	80004c8 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fb41 	bl	8000a28 <__aeabi_d2iz>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b25b      	sxtb	r3, r3
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bdb0      	pop	{r4, r5, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40080000 	.word	0x40080000

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <Error_Handler+0x8>

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_MspInit+0x5c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <HAL_MspInit+0x5c>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_MspInit+0x5c>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <HAL_MspInit+0x5c>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001420 <HAL_MspInit+0x5c>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <HAL_MspInit+0x5c>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <HAL_MspInit+0x60>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <HAL_MspInit+0x60>)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000
 8001424:	40010000 	.word	0x40010000

08001428 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a28      	ldr	r2, [pc, #160]	@ (80014e4 <HAL_ADC_MspInit+0xbc>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d149      	bne.n	80014dc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001448:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <HAL_ADC_MspInit+0xc0>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a26      	ldr	r2, [pc, #152]	@ (80014e8 <HAL_ADC_MspInit+0xc0>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_ADC_MspInit+0xc0>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b21      	ldr	r3, [pc, #132]	@ (80014e8 <HAL_ADC_MspInit+0xc0>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a20      	ldr	r2, [pc, #128]	@ (80014e8 <HAL_ADC_MspInit+0xc0>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b1e      	ldr	r3, [pc, #120]	@ (80014e8 <HAL_ADC_MspInit+0xc0>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001478:	2303      	movs	r3, #3
 800147a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147c:	2303      	movs	r3, #3
 800147e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	4619      	mov	r1, r3
 8001486:	4819      	ldr	r0, [pc, #100]	@ (80014ec <HAL_ADC_MspInit+0xc4>)
 8001488:	f001 f846 	bl	8002518 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <HAL_ADC_MspInit+0xc8>)
 800148e:	4a19      	ldr	r2, [pc, #100]	@ (80014f4 <HAL_ADC_MspInit+0xcc>)
 8001490:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <HAL_ADC_MspInit+0xc8>)
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_ADC_MspInit+0xc8>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800149e:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <HAL_ADC_MspInit+0xc8>)
 80014a0:	2280      	movs	r2, #128	@ 0x80
 80014a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_ADC_MspInit+0xc8>)
 80014a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014ac:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <HAL_ADC_MspInit+0xc8>)
 80014ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_ADC_MspInit+0xc8>)
 80014b6:	2220      	movs	r2, #32
 80014b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <HAL_ADC_MspInit+0xc8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014c0:	480b      	ldr	r0, [pc, #44]	@ (80014f0 <HAL_ADC_MspInit+0xc8>)
 80014c2:	f000 fe3b 	bl	800213c <HAL_DMA_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80014cc:	f7ff ff74 	bl	80013b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <HAL_ADC_MspInit+0xc8>)
 80014d4:	621a      	str	r2, [r3, #32]
 80014d6:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <HAL_ADC_MspInit+0xc8>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014dc:	bf00      	nop
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40012400 	.word	0x40012400
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010800 	.word	0x40010800
 80014f0:	20000214 	.word	0x20000214
 80014f4:	40020008 	.word	0x40020008

080014f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <NMI_Handler+0x4>

08001500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <MemManage_Handler+0x4>

08001510 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <UsageFault_Handler+0x4>

08001520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001548:	f000 f888 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <DMA1_Channel1_IRQHandler+0x10>)
 8001556:	f000 feab 	bl	80022b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000214 	.word	0x20000214

08001564 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800156a:	f001 fa75 	bl	8002a58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000734 	.word	0x20000734

08001578 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001584:	f7ff fff8 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001588:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800158a:	490c      	ldr	r1, [pc, #48]	@ (80015bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800158c:	4a0c      	ldr	r2, [pc, #48]	@ (80015c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a09      	ldr	r2, [pc, #36]	@ (80015c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015a0:	4c09      	ldr	r4, [pc, #36]	@ (80015c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ae:	f007 fca3 	bl	8008ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015b2:	f7ff fd35 	bl	8001020 <main>
  bx lr
 80015b6:	4770      	bx	lr
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 80015c0:	08009e20 	.word	0x08009e20
  ldr r2, =_sbss
 80015c4:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 80015c8:	20000b58 	.word	0x20000b58

080015cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC1_2_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <HAL_Init+0x28>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	@ (80015f8 <HAL_Init+0x28>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 fd69 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	200f      	movs	r0, #15
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff feea 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40022000 	.word	0x40022000

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fd81 	bl	8002122 <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f000 fd49 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	@ (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000000 	.word	0x20000000
 8001654:	20000008 	.word	0x20000008
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <HAL_IncTick+0x1c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_IncTick+0x20>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a03      	ldr	r2, [pc, #12]	@ (800167c <HAL_IncTick+0x20>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	20000008 	.word	0x20000008
 800167c:	20000268 	.word	0x20000268

08001680 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b02      	ldr	r3, [pc, #8]	@ (8001690 <HAL_GetTick+0x10>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000268 	.word	0x20000268

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff fff0 	bl	8001680 <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffe0 	bl	8001680 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008

080016dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0be      	b.n	800187c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001708:	2b00      	cmp	r3, #0
 800170a:	d109      	bne.n	8001720 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fe84 	bl	8001428 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 fb55 	bl	8001dd0 <ADC_ConversionStop_Disable>
 8001726:	4603      	mov	r3, r0
 8001728:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 8099 	bne.w	800186a <HAL_ADC_Init+0x18e>
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 8095 	bne.w	800186a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001748:	f023 0302 	bic.w	r3, r3, #2
 800174c:	f043 0202 	orr.w	r2, r3, #2
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800175c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7b1b      	ldrb	r3, [r3, #12]
 8001762:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001764:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	4313      	orrs	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001774:	d003      	beq.n	800177e <HAL_ADC_Init+0xa2>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d102      	bne.n	8001784 <HAL_ADC_Init+0xa8>
 800177e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001782:	e000      	b.n	8001786 <HAL_ADC_Init+0xaa>
 8001784:	2300      	movs	r3, #0
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	7d1b      	ldrb	r3, [r3, #20]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d119      	bne.n	80017c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7b1b      	ldrb	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	035a      	lsls	r2, r3, #13
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	e00b      	b.n	80017c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b4:	f043 0220 	orr.w	r2, r3, #32
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	430a      	orrs	r2, r1
 80017da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <HAL_ADC_Init+0x1a8>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	430b      	orrs	r3, r1
 80017ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017f8:	d003      	beq.n	8001802 <HAL_ADC_Init+0x126>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d104      	bne.n	800180c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	3b01      	subs	r3, #1
 8001808:	051b      	lsls	r3, r3, #20
 800180a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001812:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	430a      	orrs	r2, r1
 800181e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <HAL_ADC_Init+0x1ac>)
 8001828:	4013      	ands	r3, r2
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	429a      	cmp	r2, r3
 800182e:	d10b      	bne.n	8001848 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183a:	f023 0303 	bic.w	r3, r3, #3
 800183e:	f043 0201 	orr.w	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001846:	e018      	b.n	800187a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184c:	f023 0312 	bic.w	r3, r3, #18
 8001850:	f043 0210 	orr.w	r2, r3, #16
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001868:	e007      	b.n	800187a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	f043 0210 	orr.w	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800187a:	7dfb      	ldrb	r3, [r7, #23]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	ffe1f7fd 	.word	0xffe1f7fd
 8001888:	ff1f0efe 	.word	0xff1f0efe

0800188c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a64      	ldr	r2, [pc, #400]	@ (8001a34 <HAL_ADC_Start_DMA+0x1a8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d004      	beq.n	80018b0 <HAL_ADC_Start_DMA+0x24>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a63      	ldr	r2, [pc, #396]	@ (8001a38 <HAL_ADC_Start_DMA+0x1ac>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d106      	bne.n	80018be <HAL_ADC_Start_DMA+0x32>
 80018b0:	4b60      	ldr	r3, [pc, #384]	@ (8001a34 <HAL_ADC_Start_DMA+0x1a8>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f040 80b3 	bne.w	8001a24 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_ADC_Start_DMA+0x40>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e0ae      	b.n	8001a2a <HAL_ADC_Start_DMA+0x19e>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 fa21 	bl	8001d1c <ADC_Enable>
 80018da:	4603      	mov	r3, r0
 80018dc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018de:	7dfb      	ldrb	r3, [r7, #23]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f040 809a 	bne.w	8001a1a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001a38 <HAL_ADC_Start_DMA+0x1ac>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d105      	bne.n	8001910 <HAL_ADC_Start_DMA+0x84>
 8001904:	4b4b      	ldr	r3, [pc, #300]	@ (8001a34 <HAL_ADC_Start_DMA+0x1a8>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d115      	bne.n	800193c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001914:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001926:	2b00      	cmp	r3, #0
 8001928:	d026      	beq.n	8001978 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001932:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800193a:	e01d      	b.n	8001978 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001940:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a39      	ldr	r2, [pc, #228]	@ (8001a34 <HAL_ADC_Start_DMA+0x1a8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d004      	beq.n	800195c <HAL_ADC_Start_DMA+0xd0>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a38      	ldr	r2, [pc, #224]	@ (8001a38 <HAL_ADC_Start_DMA+0x1ac>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d10d      	bne.n	8001978 <HAL_ADC_Start_DMA+0xec>
 800195c:	4b35      	ldr	r3, [pc, #212]	@ (8001a34 <HAL_ADC_Start_DMA+0x1a8>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d007      	beq.n	8001978 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001970:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001988:	f023 0206 	bic.w	r2, r3, #6
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001990:	e002      	b.n	8001998 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4a25      	ldr	r2, [pc, #148]	@ (8001a3c <HAL_ADC_Start_DMA+0x1b0>)
 80019a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4a24      	ldr	r2, [pc, #144]	@ (8001a40 <HAL_ADC_Start_DMA+0x1b4>)
 80019ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a23      	ldr	r2, [pc, #140]	@ (8001a44 <HAL_ADC_Start_DMA+0x1b8>)
 80019b6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0202 	mvn.w	r2, #2
 80019c0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019d0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a18      	ldr	r0, [r3, #32]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	334c      	adds	r3, #76	@ 0x4c
 80019dc:	4619      	mov	r1, r3
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f000 fc05 	bl	80021f0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019f0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019f4:	d108      	bne.n	8001a08 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001a04:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a06:	e00f      	b.n	8001a28 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001a16:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a18:	e006      	b.n	8001a28 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001a22:	e001      	b.n	8001a28 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40012400 	.word	0x40012400
 8001a38:	40012800 	.word	0x40012800
 8001a3c:	08001e53 	.word	0x08001e53
 8001a40:	08001ecf 	.word	0x08001ecf
 8001a44:	08001eeb 	.word	0x08001eeb

08001a48 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x20>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e0dc      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1da>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b06      	cmp	r3, #6
 8001aae:	d81c      	bhi.n	8001aea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b05      	subs	r3, #5
 8001ac2:	221f      	movs	r2, #31
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4019      	ands	r1, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	3b05      	subs	r3, #5
 8001adc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ae8:	e03c      	b.n	8001b64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d81c      	bhi.n	8001b2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	3b23      	subs	r3, #35	@ 0x23
 8001b04:	221f      	movs	r2, #31
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	4019      	ands	r1, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b23      	subs	r3, #35	@ 0x23
 8001b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b2a:	e01b      	b.n	8001b64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b41      	subs	r3, #65	@ 0x41
 8001b3e:	221f      	movs	r2, #31
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	4019      	ands	r1, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b41      	subs	r3, #65	@ 0x41
 8001b58:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	d91c      	bls.n	8001ba6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68d9      	ldr	r1, [r3, #12]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b1e      	subs	r3, #30
 8001b7e:	2207      	movs	r2, #7
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4019      	ands	r1, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6898      	ldr	r0, [r3, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	e019      	b.n	8001bda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6919      	ldr	r1, [r3, #16]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4019      	ands	r1, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6898      	ldr	r0, [r3, #8]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d003      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001be6:	2b11      	cmp	r3, #17
 8001be8:	d132      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1d      	ldr	r2, [pc, #116]	@ (8001c64 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d125      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d126      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c10:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b10      	cmp	r3, #16
 8001c18:	d11a      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a13      	ldr	r2, [pc, #76]	@ (8001c6c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c20:	fba2 2303 	umull	r2, r3, r2, r3
 8001c24:	0c9a      	lsrs	r2, r3, #18
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c30:	e002      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f9      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x1b2>
 8001c3e:	e007      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	f043 0220 	orr.w	r2, r3, #32
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40012400 	.word	0x40012400
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	431bde83 	.word	0x431bde83

08001c70 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a24      	ldr	r2, [pc, #144]	@ (8001d10 <HAL_ADC_AnalogWDGConfig+0xa0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d003      	beq.n	8001c8c <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8001c88:	4a22      	ldr	r2, [pc, #136]	@ (8001d14 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8001c8a:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_AnalogWDGConfig+0x2a>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e035      	b.n	8001d06 <HAL_ADC_AnalogWDGConfig+0x96>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	7a1b      	ldrb	r3, [r3, #8]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d108      	bne.n	8001cbc <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	e007      	b.n	8001ccc <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cca:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	6811      	ldr	r1, [r2, #0]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	6852      	ldr	r2, [r2, #4]
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	68d2      	ldr	r2, [r2, #12]
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	6912      	ldr	r2, [r2, #16]
 8001cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	00800200 	.word	0x00800200
 8001d14:	00400200 	.word	0x00400200
 8001d18:	ff3ffde0 	.word	0xff3ffde0

08001d1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d040      	beq.n	8001dbc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <ADC_Enable+0xac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dcc <ADC_Enable+0xb0>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	0c9b      	lsrs	r3, r3, #18
 8001d56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d58:	e002      	b.n	8001d60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f9      	bne.n	8001d5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d66:	f7ff fc8b 	bl	8001680 <HAL_GetTick>
 8001d6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d6c:	e01f      	b.n	8001dae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d6e:	f7ff fc87 	bl	8001680 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d918      	bls.n	8001dae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d011      	beq.n	8001dae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8e:	f043 0210 	orr.w	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e007      	b.n	8001dbe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d1d8      	bne.n	8001d6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	431bde83 	.word	0x431bde83

08001dd0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d12e      	bne.n	8001e48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0201 	bic.w	r2, r2, #1
 8001df8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dfa:	f7ff fc41 	bl	8001680 <HAL_GetTick>
 8001dfe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e00:	e01b      	b.n	8001e3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e02:	f7ff fc3d 	bl	8001680 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d914      	bls.n	8001e3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10d      	bne.n	8001e3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e007      	b.n	8001e4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d0dc      	beq.n	8001e02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d127      	bne.n	8001ebc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e82:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e86:	d115      	bne.n	8001eb4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d111      	bne.n	8001eb4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7ff fdc7 	bl	8001a48 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001eba:	e004      	b.n	8001ec6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff fdbc 	bl	8001a5a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f08:	f043 0204 	orr.w	r2, r3, #4
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff fdab 	bl	8001a6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4906      	ldr	r1, [pc, #24]	@ (8001fb8 <__NVIC_EnableIRQ+0x34>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	@ (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	@ (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	@ 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	@ 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff90 	bl	8001fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff2d 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff42 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff90 	bl	8002010 <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5f 	bl	8001fbc <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff35 	bl	8001f84 <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa2 	bl	8002074 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e043      	b.n	80021da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	4b22      	ldr	r3, [pc, #136]	@ (80021e4 <HAL_DMA_Init+0xa8>)
 800215a:	4413      	add	r3, r2
 800215c:	4a22      	ldr	r2, [pc, #136]	@ (80021e8 <HAL_DMA_Init+0xac>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	009a      	lsls	r2, r3, #2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1f      	ldr	r2, [pc, #124]	@ (80021ec <HAL_DMA_Init+0xb0>)
 800216e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002186:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800218a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002194:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	bffdfff8 	.word	0xbffdfff8
 80021e8:	cccccccd 	.word	0xcccccccd
 80021ec:	40020000 	.word	0x40020000

080021f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_DMA_Start_IT+0x20>
 800220c:	2302      	movs	r3, #2
 800220e:	e04b      	b.n	80022a8 <HAL_DMA_Start_IT+0xb8>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	d13a      	bne.n	800229a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f937 	bl	80024bc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 020e 	orr.w	r2, r2, #14
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e00f      	b.n	8002288 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0204 	bic.w	r2, r2, #4
 8002276:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 020a 	orr.w	r2, r2, #10
 8002286:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e005      	b.n	80022a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	2204      	movs	r2, #4
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d04f      	beq.n	8002378 <HAL_DMA_IRQHandler+0xc8>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d04a      	beq.n	8002378 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0204 	bic.w	r2, r2, #4
 80022fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a66      	ldr	r2, [pc, #408]	@ (80024a0 <HAL_DMA_IRQHandler+0x1f0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d029      	beq.n	800235e <HAL_DMA_IRQHandler+0xae>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a65      	ldr	r2, [pc, #404]	@ (80024a4 <HAL_DMA_IRQHandler+0x1f4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d022      	beq.n	800235a <HAL_DMA_IRQHandler+0xaa>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a63      	ldr	r2, [pc, #396]	@ (80024a8 <HAL_DMA_IRQHandler+0x1f8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01a      	beq.n	8002354 <HAL_DMA_IRQHandler+0xa4>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a62      	ldr	r2, [pc, #392]	@ (80024ac <HAL_DMA_IRQHandler+0x1fc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d012      	beq.n	800234e <HAL_DMA_IRQHandler+0x9e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a60      	ldr	r2, [pc, #384]	@ (80024b0 <HAL_DMA_IRQHandler+0x200>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00a      	beq.n	8002348 <HAL_DMA_IRQHandler+0x98>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a5f      	ldr	r2, [pc, #380]	@ (80024b4 <HAL_DMA_IRQHandler+0x204>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d102      	bne.n	8002342 <HAL_DMA_IRQHandler+0x92>
 800233c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002340:	e00e      	b.n	8002360 <HAL_DMA_IRQHandler+0xb0>
 8002342:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002346:	e00b      	b.n	8002360 <HAL_DMA_IRQHandler+0xb0>
 8002348:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800234c:	e008      	b.n	8002360 <HAL_DMA_IRQHandler+0xb0>
 800234e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002352:	e005      	b.n	8002360 <HAL_DMA_IRQHandler+0xb0>
 8002354:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002358:	e002      	b.n	8002360 <HAL_DMA_IRQHandler+0xb0>
 800235a:	2340      	movs	r3, #64	@ 0x40
 800235c:	e000      	b.n	8002360 <HAL_DMA_IRQHandler+0xb0>
 800235e:	2304      	movs	r3, #4
 8002360:	4a55      	ldr	r2, [pc, #340]	@ (80024b8 <HAL_DMA_IRQHandler+0x208>)
 8002362:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8094 	beq.w	8002496 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002376:	e08e      	b.n	8002496 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	2202      	movs	r2, #2
 800237e:	409a      	lsls	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d056      	beq.n	8002436 <HAL_DMA_IRQHandler+0x186>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d051      	beq.n	8002436 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 020a 	bic.w	r2, r2, #10
 80023ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a38      	ldr	r2, [pc, #224]	@ (80024a0 <HAL_DMA_IRQHandler+0x1f0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d029      	beq.n	8002416 <HAL_DMA_IRQHandler+0x166>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a37      	ldr	r2, [pc, #220]	@ (80024a4 <HAL_DMA_IRQHandler+0x1f4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d022      	beq.n	8002412 <HAL_DMA_IRQHandler+0x162>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a35      	ldr	r2, [pc, #212]	@ (80024a8 <HAL_DMA_IRQHandler+0x1f8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01a      	beq.n	800240c <HAL_DMA_IRQHandler+0x15c>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a34      	ldr	r2, [pc, #208]	@ (80024ac <HAL_DMA_IRQHandler+0x1fc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d012      	beq.n	8002406 <HAL_DMA_IRQHandler+0x156>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a32      	ldr	r2, [pc, #200]	@ (80024b0 <HAL_DMA_IRQHandler+0x200>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00a      	beq.n	8002400 <HAL_DMA_IRQHandler+0x150>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a31      	ldr	r2, [pc, #196]	@ (80024b4 <HAL_DMA_IRQHandler+0x204>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d102      	bne.n	80023fa <HAL_DMA_IRQHandler+0x14a>
 80023f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80023f8:	e00e      	b.n	8002418 <HAL_DMA_IRQHandler+0x168>
 80023fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023fe:	e00b      	b.n	8002418 <HAL_DMA_IRQHandler+0x168>
 8002400:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002404:	e008      	b.n	8002418 <HAL_DMA_IRQHandler+0x168>
 8002406:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800240a:	e005      	b.n	8002418 <HAL_DMA_IRQHandler+0x168>
 800240c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002410:	e002      	b.n	8002418 <HAL_DMA_IRQHandler+0x168>
 8002412:	2320      	movs	r3, #32
 8002414:	e000      	b.n	8002418 <HAL_DMA_IRQHandler+0x168>
 8002416:	2302      	movs	r3, #2
 8002418:	4a27      	ldr	r2, [pc, #156]	@ (80024b8 <HAL_DMA_IRQHandler+0x208>)
 800241a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002428:	2b00      	cmp	r3, #0
 800242a:	d034      	beq.n	8002496 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002434:	e02f      	b.n	8002496 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	2208      	movs	r2, #8
 800243c:	409a      	lsls	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d028      	beq.n	8002498 <HAL_DMA_IRQHandler+0x1e8>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d023      	beq.n	8002498 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 020e 	bic.w	r2, r2, #14
 800245e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	2b00      	cmp	r3, #0
 800248c:	d004      	beq.n	8002498 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	4798      	blx	r3
    }
  }
  return;
 8002496:	bf00      	nop
 8002498:	bf00      	nop
}
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40020008 	.word	0x40020008
 80024a4:	4002001c 	.word	0x4002001c
 80024a8:	40020030 	.word	0x40020030
 80024ac:	40020044 	.word	0x40020044
 80024b0:	40020058 	.word	0x40020058
 80024b4:	4002006c 	.word	0x4002006c
 80024b8:	40020000 	.word	0x40020000

080024bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d2:	2101      	movs	r1, #1
 80024d4:	fa01 f202 	lsl.w	r2, r1, r2
 80024d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d108      	bne.n	80024fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024fa:	e007      	b.n	800250c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	60da      	str	r2, [r3, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
	...

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b08b      	sub	sp, #44	@ 0x2c
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002522:	2300      	movs	r3, #0
 8002524:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252a:	e169      	b.n	8002800 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800252c:	2201      	movs	r2, #1
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 8158 	bne.w	80027fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4a9a      	ldr	r2, [pc, #616]	@ (80027b8 <HAL_GPIO_Init+0x2a0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d05e      	beq.n	8002612 <HAL_GPIO_Init+0xfa>
 8002554:	4a98      	ldr	r2, [pc, #608]	@ (80027b8 <HAL_GPIO_Init+0x2a0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d875      	bhi.n	8002646 <HAL_GPIO_Init+0x12e>
 800255a:	4a98      	ldr	r2, [pc, #608]	@ (80027bc <HAL_GPIO_Init+0x2a4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d058      	beq.n	8002612 <HAL_GPIO_Init+0xfa>
 8002560:	4a96      	ldr	r2, [pc, #600]	@ (80027bc <HAL_GPIO_Init+0x2a4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d86f      	bhi.n	8002646 <HAL_GPIO_Init+0x12e>
 8002566:	4a96      	ldr	r2, [pc, #600]	@ (80027c0 <HAL_GPIO_Init+0x2a8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d052      	beq.n	8002612 <HAL_GPIO_Init+0xfa>
 800256c:	4a94      	ldr	r2, [pc, #592]	@ (80027c0 <HAL_GPIO_Init+0x2a8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d869      	bhi.n	8002646 <HAL_GPIO_Init+0x12e>
 8002572:	4a94      	ldr	r2, [pc, #592]	@ (80027c4 <HAL_GPIO_Init+0x2ac>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d04c      	beq.n	8002612 <HAL_GPIO_Init+0xfa>
 8002578:	4a92      	ldr	r2, [pc, #584]	@ (80027c4 <HAL_GPIO_Init+0x2ac>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d863      	bhi.n	8002646 <HAL_GPIO_Init+0x12e>
 800257e:	4a92      	ldr	r2, [pc, #584]	@ (80027c8 <HAL_GPIO_Init+0x2b0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d046      	beq.n	8002612 <HAL_GPIO_Init+0xfa>
 8002584:	4a90      	ldr	r2, [pc, #576]	@ (80027c8 <HAL_GPIO_Init+0x2b0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d85d      	bhi.n	8002646 <HAL_GPIO_Init+0x12e>
 800258a:	2b12      	cmp	r3, #18
 800258c:	d82a      	bhi.n	80025e4 <HAL_GPIO_Init+0xcc>
 800258e:	2b12      	cmp	r3, #18
 8002590:	d859      	bhi.n	8002646 <HAL_GPIO_Init+0x12e>
 8002592:	a201      	add	r2, pc, #4	@ (adr r2, 8002598 <HAL_GPIO_Init+0x80>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	08002613 	.word	0x08002613
 800259c:	080025ed 	.word	0x080025ed
 80025a0:	080025ff 	.word	0x080025ff
 80025a4:	08002641 	.word	0x08002641
 80025a8:	08002647 	.word	0x08002647
 80025ac:	08002647 	.word	0x08002647
 80025b0:	08002647 	.word	0x08002647
 80025b4:	08002647 	.word	0x08002647
 80025b8:	08002647 	.word	0x08002647
 80025bc:	08002647 	.word	0x08002647
 80025c0:	08002647 	.word	0x08002647
 80025c4:	08002647 	.word	0x08002647
 80025c8:	08002647 	.word	0x08002647
 80025cc:	08002647 	.word	0x08002647
 80025d0:	08002647 	.word	0x08002647
 80025d4:	08002647 	.word	0x08002647
 80025d8:	08002647 	.word	0x08002647
 80025dc:	080025f5 	.word	0x080025f5
 80025e0:	08002609 	.word	0x08002609
 80025e4:	4a79      	ldr	r2, [pc, #484]	@ (80027cc <HAL_GPIO_Init+0x2b4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025ea:	e02c      	b.n	8002646 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	623b      	str	r3, [r7, #32]
          break;
 80025f2:	e029      	b.n	8002648 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	3304      	adds	r3, #4
 80025fa:	623b      	str	r3, [r7, #32]
          break;
 80025fc:	e024      	b.n	8002648 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	3308      	adds	r3, #8
 8002604:	623b      	str	r3, [r7, #32]
          break;
 8002606:	e01f      	b.n	8002648 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	330c      	adds	r3, #12
 800260e:	623b      	str	r3, [r7, #32]
          break;
 8002610:	e01a      	b.n	8002648 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800261a:	2304      	movs	r3, #4
 800261c:	623b      	str	r3, [r7, #32]
          break;
 800261e:	e013      	b.n	8002648 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d105      	bne.n	8002634 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002628:	2308      	movs	r3, #8
 800262a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	611a      	str	r2, [r3, #16]
          break;
 8002632:	e009      	b.n	8002648 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002634:	2308      	movs	r3, #8
 8002636:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	615a      	str	r2, [r3, #20]
          break;
 800263e:	e003      	b.n	8002648 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002640:	2300      	movs	r3, #0
 8002642:	623b      	str	r3, [r7, #32]
          break;
 8002644:	e000      	b.n	8002648 <HAL_GPIO_Init+0x130>
          break;
 8002646:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2bff      	cmp	r3, #255	@ 0xff
 800264c:	d801      	bhi.n	8002652 <HAL_GPIO_Init+0x13a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	e001      	b.n	8002656 <HAL_GPIO_Init+0x13e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3304      	adds	r3, #4
 8002656:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2bff      	cmp	r3, #255	@ 0xff
 800265c:	d802      	bhi.n	8002664 <HAL_GPIO_Init+0x14c>
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	e002      	b.n	800266a <HAL_GPIO_Init+0x152>
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	3b08      	subs	r3, #8
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	210f      	movs	r1, #15
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	fa01 f303 	lsl.w	r3, r1, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	401a      	ands	r2, r3
 800267c:	6a39      	ldr	r1, [r7, #32]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	431a      	orrs	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80b1 	beq.w	80027fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002698:	4b4d      	ldr	r3, [pc, #308]	@ (80027d0 <HAL_GPIO_Init+0x2b8>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	4a4c      	ldr	r2, [pc, #304]	@ (80027d0 <HAL_GPIO_Init+0x2b8>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6193      	str	r3, [r2, #24]
 80026a4:	4b4a      	ldr	r3, [pc, #296]	@ (80027d0 <HAL_GPIO_Init+0x2b8>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026b0:	4a48      	ldr	r2, [pc, #288]	@ (80027d4 <HAL_GPIO_Init+0x2bc>)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	3302      	adds	r3, #2
 80026b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	220f      	movs	r2, #15
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4013      	ands	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a40      	ldr	r2, [pc, #256]	@ (80027d8 <HAL_GPIO_Init+0x2c0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d013      	beq.n	8002704 <HAL_GPIO_Init+0x1ec>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a3f      	ldr	r2, [pc, #252]	@ (80027dc <HAL_GPIO_Init+0x2c4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d00d      	beq.n	8002700 <HAL_GPIO_Init+0x1e8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a3e      	ldr	r2, [pc, #248]	@ (80027e0 <HAL_GPIO_Init+0x2c8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d007      	beq.n	80026fc <HAL_GPIO_Init+0x1e4>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a3d      	ldr	r2, [pc, #244]	@ (80027e4 <HAL_GPIO_Init+0x2cc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_GPIO_Init+0x1e0>
 80026f4:	2303      	movs	r3, #3
 80026f6:	e006      	b.n	8002706 <HAL_GPIO_Init+0x1ee>
 80026f8:	2304      	movs	r3, #4
 80026fa:	e004      	b.n	8002706 <HAL_GPIO_Init+0x1ee>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e002      	b.n	8002706 <HAL_GPIO_Init+0x1ee>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_GPIO_Init+0x1ee>
 8002704:	2300      	movs	r3, #0
 8002706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002708:	f002 0203 	and.w	r2, r2, #3
 800270c:	0092      	lsls	r2, r2, #2
 800270e:	4093      	lsls	r3, r2
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002716:	492f      	ldr	r1, [pc, #188]	@ (80027d4 <HAL_GPIO_Init+0x2bc>)
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3302      	adds	r3, #2
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d006      	beq.n	800273e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002730:	4b2d      	ldr	r3, [pc, #180]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	492c      	ldr	r1, [pc, #176]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	608b      	str	r3, [r1, #8]
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800273e:	4b2a      	ldr	r3, [pc, #168]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	43db      	mvns	r3, r3
 8002746:	4928      	ldr	r1, [pc, #160]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002748:	4013      	ands	r3, r2
 800274a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002758:	4b23      	ldr	r3, [pc, #140]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	4922      	ldr	r1, [pc, #136]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	60cb      	str	r3, [r1, #12]
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002766:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	43db      	mvns	r3, r3
 800276e:	491e      	ldr	r1, [pc, #120]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002770:	4013      	ands	r3, r2
 8002772:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002780:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	4918      	ldr	r1, [pc, #96]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800278e:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	43db      	mvns	r3, r3
 8002796:	4914      	ldr	r1, [pc, #80]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002798:	4013      	ands	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d021      	beq.n	80027ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027a8:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	490e      	ldr	r1, [pc, #56]	@ (80027e8 <HAL_GPIO_Init+0x2d0>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]
 80027b4:	e021      	b.n	80027fa <HAL_GPIO_Init+0x2e2>
 80027b6:	bf00      	nop
 80027b8:	10320000 	.word	0x10320000
 80027bc:	10310000 	.word	0x10310000
 80027c0:	10220000 	.word	0x10220000
 80027c4:	10210000 	.word	0x10210000
 80027c8:	10120000 	.word	0x10120000
 80027cc:	10110000 	.word	0x10110000
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40010800 	.word	0x40010800
 80027dc:	40010c00 	.word	0x40010c00
 80027e0:	40011000 	.word	0x40011000
 80027e4:	40011400 	.word	0x40011400
 80027e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_GPIO_Init+0x304>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	4909      	ldr	r1, [pc, #36]	@ (800281c <HAL_GPIO_Init+0x304>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	3301      	adds	r3, #1
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	fa22 f303 	lsr.w	r3, r2, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	f47f ae8e 	bne.w	800252c <HAL_GPIO_Init+0x14>
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	372c      	adds	r7, #44	@ 0x2c
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40010400 	.word	0x40010400

08002820 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0e8      	b.n	8002a04 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f006 f8c4 	bl	80089d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2203      	movs	r2, #3
 8002850:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f002 f9df 	bl	8004c22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286e:	f002 f9b5 	bl	8004bdc <USB_CoreInit>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0bf      	b.n	8002a04 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f002 f9e3 	bl	8004c56 <USB_SetCurrentMode>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0b0      	b.n	8002a04 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e03e      	b.n	8002926 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	3311      	adds	r3, #17
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	3310      	adds	r3, #16
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3313      	adds	r3, #19
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	3320      	adds	r3, #32
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	3324      	adds	r3, #36	@ 0x24
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	3301      	adds	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	791b      	ldrb	r3, [r3, #4]
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	429a      	cmp	r2, r3
 800292e:	d3bb      	bcc.n	80028a8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e044      	b.n	80029c0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	3301      	adds	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	791b      	ldrb	r3, [r3, #4]
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d3b5      	bcc.n	8002936 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d4:	f002 f94b 	bl	8004c6e <USB_DevInit>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00c      	b.n	8002a04 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f004 fbca 	bl	8007196 <USB_DevDisconnect>

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_PCD_Start+0x16>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e016      	b.n	8002a50 <HAL_PCD_Start+0x44>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f002 f8e1 	bl	8004bf6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002a34:	2101      	movs	r1, #1
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f006 fa19 	bl	8008e6e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fb9e 	bl	8007182 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f004 fba0 	bl	80071aa <USB_ReadInterrupts>
 8002a6a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fb03 	bl	8003082 <PCD_EP_ISR_Handler>

    return;
 8002a7c:	e119      	b.n	8002cb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d013      	beq.n	8002ab0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a9a:	b292      	uxth	r2, r2
 8002a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f006 f812 	bl	8008aca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f905 	bl	8002cb8 <HAL_PCD_SetAddress>

    return;
 8002aae:	e100      	b.n	8002cb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00c      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002acc:	b292      	uxth	r2, r2
 8002ace:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ad2:	e0ee      	b.n	8002cb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00c      	beq.n	8002af8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002af0:	b292      	uxth	r2, r2
 8002af2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002af6:	e0dc      	b.n	8002cb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d027      	beq.n	8002b52 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0204 	bic.w	r2, r2, #4
 8002b14:	b292      	uxth	r2, r2
 8002b16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0208 	bic.w	r2, r2, #8
 8002b2c:	b292      	uxth	r2, r2
 8002b2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f006 f802 	bl	8008b3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b4a:	b292      	uxth	r2, r2
 8002b4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b50:	e0af      	b.n	8002cb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 8083 	beq.w	8002c64 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	77fb      	strb	r3, [r7, #31]
 8002b62:	e010      	b.n	8002b86 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	441a      	add	r2, r3
 8002b70:	7ffb      	ldrb	r3, [r7, #31]
 8002b72:	8812      	ldrh	r2, [r2, #0]
 8002b74:	b292      	uxth	r2, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	3320      	adds	r3, #32
 8002b7a:	443b      	add	r3, r7
 8002b7c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
 8002b82:	3301      	adds	r3, #1
 8002b84:	77fb      	strb	r3, [r7, #31]
 8002b86:	7ffb      	ldrb	r3, [r7, #31]
 8002b88:	2b07      	cmp	r3, #7
 8002b8a:	d9eb      	bls.n	8002b64 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	b292      	uxth	r2, r2
 8002ba0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	b292      	uxth	r2, r2
 8002bb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002bbc:	bf00      	nop
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f6      	beq.n	8002bbe <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be2:	b292      	uxth	r2, r2
 8002be4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002be8:	2300      	movs	r3, #0
 8002bea:	77fb      	strb	r3, [r7, #31]
 8002bec:	e00f      	b.n	8002c0e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002bee:	7ffb      	ldrb	r3, [r7, #31]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	7ffa      	ldrb	r2, [r7, #31]
 8002bf8:	0092      	lsls	r2, r2, #2
 8002bfa:	440a      	add	r2, r1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	3320      	adds	r3, #32
 8002c00:	443b      	add	r3, r7
 8002c02:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002c06:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002c08:	7ffb      	ldrb	r3, [r7, #31]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	77fb      	strb	r3, [r7, #31]
 8002c0e:	7ffb      	ldrb	r3, [r7, #31]
 8002c10:	2b07      	cmp	r3, #7
 8002c12:	d9ec      	bls.n	8002bee <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0208 	orr.w	r2, r2, #8
 8002c26:	b292      	uxth	r2, r2
 8002c28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c3e:	b292      	uxth	r2, r2
 8002c40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0204 	orr.w	r2, r2, #4
 8002c56:	b292      	uxth	r2, r2
 8002c58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f005 ff53 	bl	8008b08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c62:	e026      	b.n	8002cb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00f      	beq.n	8002c8e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c80:	b292      	uxth	r2, r2
 8002c82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f005 ff11 	bl	8008aae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c8c:	e011      	b.n	8002cb2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00c      	beq.n	8002cb2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002caa:	b292      	uxth	r2, r2
 8002cac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002cb0:	bf00      	nop
  }
}
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_PCD_SetAddress+0x1a>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e012      	b.n	8002cf8 <HAL_PCD_SetAddress+0x40>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f004 fa37 	bl	800715c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	4608      	mov	r0, r1
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	70fb      	strb	r3, [r7, #3]
 8002d12:	460b      	mov	r3, r1
 8002d14:	803b      	strh	r3, [r7, #0]
 8002d16:	4613      	mov	r3, r2
 8002d18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	da0e      	bge.n	8002d44 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	f003 0207 	and.w	r2, r3, #7
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	3310      	adds	r3, #16
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	705a      	strb	r2, [r3, #1]
 8002d42:	e00e      	b.n	8002d62 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	f003 0207 	and.w	r2, r3, #7
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d6e:	883a      	ldrh	r2, [r7, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	78ba      	ldrb	r2, [r7, #2]
 8002d78:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d7a:	78bb      	ldrb	r3, [r7, #2]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d102      	bne.n	8002d86 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_PCD_EP_Open+0x94>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e00e      	b.n	8002db2 <HAL_PCD_EP_Open+0xb2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68f9      	ldr	r1, [r7, #12]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f001 ff80 	bl	8004ca8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002db0:	7afb      	ldrb	r3, [r7, #11]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	da0e      	bge.n	8002dec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	f003 0207 	and.w	r2, r3, #7
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	3310      	adds	r3, #16
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	705a      	strb	r2, [r3, #1]
 8002dea:	e00e      	b.n	8002e0a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	f003 0207 	and.w	r2, r3, #7
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_PCD_EP_Close+0x6a>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e00e      	b.n	8002e42 <HAL_PCD_EP_Close+0x88>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68f9      	ldr	r1, [r7, #12]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f002 faf8 	bl	8005428 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	460b      	mov	r3, r1
 8002e58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
 8002e5c:	f003 0207 	and.w	r2, r3, #7
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2200      	movs	r2, #0
 8002e82:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2200      	movs	r2, #0
 8002e88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e8a:	7afb      	ldrb	r3, [r7, #11]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6979      	ldr	r1, [r7, #20]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f002 fcaf 	bl	8005800 <USB_EPStartXfer>

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
 8002ebe:	f003 0207 	and.w	r2, r3, #7
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	3310      	adds	r3, #16
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6979      	ldr	r1, [r7, #20]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f002 fc78 	bl	8005800 <USB_EPStartXfer>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	7912      	ldrb	r2, [r2, #4]
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e04c      	b.n	8002fd2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	da0e      	bge.n	8002f5e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 0207 	and.w	r2, r3, #7
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	3310      	adds	r3, #16
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	705a      	strb	r2, [r3, #1]
 8002f5c:	e00c      	b.n	8002f78 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_PCD_EP_SetStall+0x7e>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e01c      	b.n	8002fd2 <HAL_PCD_EP_SetStall+0xb8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68f9      	ldr	r1, [r7, #12]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 ffdb 	bl	8006f62 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d108      	bne.n	8002fc8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f004 f900 	bl	80071c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	7912      	ldrb	r2, [r2, #4]
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e040      	b.n	800307a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	da0e      	bge.n	800301e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 0207 	and.w	r2, r3, #7
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	3310      	adds	r3, #16
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	705a      	strb	r2, [r3, #1]
 800301c:	e00e      	b.n	800303c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	f003 0207 	and.w	r2, r3, #7
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	4413      	add	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_PCD_EP_ClrStall+0x82>
 8003058:	2302      	movs	r3, #2
 800305a:	e00e      	b.n	800307a <HAL_PCD_EP_ClrStall+0xa0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68f9      	ldr	r1, [r7, #12]
 800306a:	4618      	mov	r0, r3
 800306c:	f003 ffc9 	bl	8007002 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b096      	sub	sp, #88	@ 0x58
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800308a:	e3bb      	b.n	8003804 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003094:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003098:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80030a6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f040 8175 	bne.w	800339a <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d14e      	bne.n	800315a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80030c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030cc:	81fb      	strh	r3, [r7, #14]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	89fb      	ldrh	r3, [r7, #14]
 80030d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030dc:	b29b      	uxth	r3, r3
 80030de:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3310      	adds	r3, #16
 80030e4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	3302      	adds	r3, #2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800310e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003110:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	441a      	add	r2, r3
 800311c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800311e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003120:	2100      	movs	r1, #0
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f005 fca9 	bl	8008a7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	7b5b      	ldrb	r3, [r3, #13]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8368 	beq.w	8003804 <PCD_EP_ISR_Handler+0x782>
 8003134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 8363 	bne.w	8003804 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7b5b      	ldrb	r3, [r3, #13]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003148:	b2da      	uxtb	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	735a      	strb	r2, [r3, #13]
 8003158:	e354      	b.n	8003804 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003160:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800316c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003174:	2b00      	cmp	r3, #0
 8003176:	d034      	beq.n	80031e2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003180:	b29b      	uxth	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	3306      	adds	r3, #6
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80031ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f004 f856 	bl	8007268 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80031c8:	4013      	ands	r3, r2
 80031ca:	823b      	strh	r3, [r7, #16]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	8a3a      	ldrh	r2, [r7, #16]
 80031d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031d6:	b292      	uxth	r2, r2
 80031d8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f005 fc20 	bl	8008a20 <HAL_PCD_SetupStageCallback>
 80031e0:	e310      	b.n	8003804 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031e2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f280 830c 	bge.w	8003804 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80031f8:	4013      	ands	r3, r2
 80031fa:	83fb      	strh	r3, [r7, #30]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	8bfa      	ldrh	r2, [r7, #30]
 8003202:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003206:	b292      	uxth	r2, r2
 8003208:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003212:	b29b      	uxth	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	3306      	adds	r3, #6
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003234:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d019      	beq.n	8003272 <PCD_EP_ISR_Handler+0x1f0>
 800323e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d015      	beq.n	8003272 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324c:	6959      	ldr	r1, [r3, #20]
 800324e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003250:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003254:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003256:	b29b      	uxth	r3, r3
 8003258:	f004 f806 	bl	8007268 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800325c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	441a      	add	r2, r3
 8003266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003268:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800326a:	2100      	movs	r1, #0
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f005 fbe9 	bl	8008a44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800327c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003280:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003284:	2b00      	cmp	r3, #0
 8003286:	f040 82bd 	bne.w	8003804 <PCD_EP_ISR_Handler+0x782>
 800328a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800328e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003292:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003296:	f000 82b5 	beq.w	8003804 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	61bb      	str	r3, [r7, #24]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	4413      	add	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	801a      	strh	r2, [r3, #0]
 80032ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80032d0:	d91d      	bls.n	800330e <PCD_EP_ISR_Handler+0x28c>
 80032d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80032da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <PCD_EP_ISR_Handler+0x26a>
 80032e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032e8:	3b01      	subs	r3, #1
 80032ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	029b      	lsls	r3, r3, #10
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	4313      	orrs	r3, r2
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003306:	b29a      	uxth	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	801a      	strh	r2, [r3, #0]
 800330c:	e026      	b.n	800335c <PCD_EP_ISR_Handler+0x2da>
 800330e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10a      	bne.n	800332c <PCD_EP_ISR_Handler+0x2aa>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003324:	b29a      	uxth	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	801a      	strh	r2, [r3, #0]
 800332a:	e017      	b.n	800335c <PCD_EP_ISR_Handler+0x2da>
 800332c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	647b      	str	r3, [r7, #68]	@ 0x44
 8003334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <PCD_EP_ISR_Handler+0x2c4>
 8003340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003342:	3301      	adds	r3, #1
 8003344:	647b      	str	r3, [r7, #68]	@ 0x44
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29a      	uxth	r2, r3
 800334c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800334e:	b29b      	uxth	r3, r3
 8003350:	029b      	lsls	r3, r3, #10
 8003352:	b29b      	uxth	r3, r3
 8003354:	4313      	orrs	r3, r2
 8003356:	b29a      	uxth	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800336c:	827b      	strh	r3, [r7, #18]
 800336e:	8a7b      	ldrh	r3, [r7, #18]
 8003370:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003374:	827b      	strh	r3, [r7, #18]
 8003376:	8a7b      	ldrh	r3, [r7, #18]
 8003378:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800337c:	827b      	strh	r3, [r7, #18]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	8a7b      	ldrh	r3, [r7, #18]
 8003384:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003388:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800338c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003394:	b29b      	uxth	r3, r3
 8003396:	8013      	strh	r3, [r2, #0]
 8003398:	e234      	b.n	8003804 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f280 80fc 	bge.w	80035b0 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033ce:	4013      	ands	r3, r2
 80033d0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80033e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033ea:	b292      	uxth	r2, r2
 80033ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033ee:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003406:	7b1b      	ldrb	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d125      	bne.n	8003458 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003414:	b29b      	uxth	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	3306      	adds	r3, #6
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003434:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003438:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8092 	beq.w	8003566 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003448:	6959      	ldr	r1, [r3, #20]
 800344a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344c:	88da      	ldrh	r2, [r3, #6]
 800344e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003452:	f003 ff09 	bl	8007268 <USB_ReadPMA>
 8003456:	e086      	b.n	8003566 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345a:	78db      	ldrb	r3, [r3, #3]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d10a      	bne.n	8003476 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003460:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003464:	461a      	mov	r2, r3
 8003466:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f9d9 	bl	8003820 <HAL_PCD_EP_DB_Receive>
 800346e:	4603      	mov	r3, r0
 8003470:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003474:	e077      	b.n	8003566 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800348c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003490:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	441a      	add	r2, r3
 80034a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80034a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d024      	beq.n	800351e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034dc:	b29b      	uxth	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	3302      	adds	r3, #2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034fc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003500:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02e      	beq.n	8003566 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350e:	6959      	ldr	r1, [r3, #20]
 8003510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003512:	891a      	ldrh	r2, [r3, #8]
 8003514:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003518:	f003 fea6 	bl	8007268 <USB_ReadPMA>
 800351c:	e023      	b.n	8003566 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003526:	b29b      	uxth	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	3306      	adds	r3, #6
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003546:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800354a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003558:	6959      	ldr	r1, [r3, #20]
 800355a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355c:	895a      	ldrh	r2, [r3, #10]
 800355e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003562:	f003 fe81 	bl	8007268 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800356e:	441a      	add	r2, r3
 8003570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003572:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800357c:	441a      	add	r2, r3
 800357e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003580:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <PCD_EP_ISR_Handler+0x514>
 800358a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800358e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	429a      	cmp	r2, r3
 8003594:	d206      	bcs.n	80035a4 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	4619      	mov	r1, r3
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f005 fa51 	bl	8008a44 <HAL_PCD_DataOutStageCallback>
 80035a2:	e005      	b.n	80035b0 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 f928 	bl	8005800 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8123 	beq.w	8003804 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80035be:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	3310      	adds	r3, #16
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80035e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800360a:	b29b      	uxth	r3, r3
 800360c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800360e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003610:	78db      	ldrb	r3, [r3, #3]
 8003612:	2b01      	cmp	r3, #1
 8003614:	f040 80a2 	bne.w	800375c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361a:	2200      	movs	r2, #0
 800361c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800361e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003620:	7b1b      	ldrb	r3, [r3, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8093 	beq.w	800374e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003628:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800362c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d046      	beq.n	80036c2 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d126      	bne.n	800368a <PCD_EP_ISR_Handler+0x608>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800364a:	b29b      	uxth	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	4413      	add	r3, r2
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
 8003654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	011a      	lsls	r2, r3, #4
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	4413      	add	r3, r2
 800365e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003662:	623b      	str	r3, [r7, #32]
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800366e:	b29a      	uxth	r2, r3
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800367e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003682:	b29a      	uxth	r2, r3
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	801a      	strh	r2, [r3, #0]
 8003688:	e061      	b.n	800374e <PCD_EP_ISR_Handler+0x6cc>
 800368a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368c:	785b      	ldrb	r3, [r3, #1]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d15d      	bne.n	800374e <PCD_EP_ISR_Handler+0x6cc>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a6:	4413      	add	r3, r2
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	011a      	lsls	r2, r3, #4
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b2:	4413      	add	r3, r2
 80036b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036bc:	2200      	movs	r2, #0
 80036be:	801a      	strh	r2, [r3, #0]
 80036c0:	e045      	b.n	800374e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ca:	785b      	ldrb	r3, [r3, #1]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d126      	bne.n	800371e <PCD_EP_ISR_Handler+0x69c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036de:	b29b      	uxth	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e4:	4413      	add	r3, r2
 80036e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	011a      	lsls	r2, r3, #4
 80036ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f0:	4413      	add	r3, r2
 80036f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003702:	b29a      	uxth	r2, r3
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003716:	b29a      	uxth	r2, r3
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	801a      	strh	r2, [r3, #0]
 800371c:	e017      	b.n	800374e <PCD_EP_ISR_Handler+0x6cc>
 800371e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003720:	785b      	ldrb	r3, [r3, #1]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d113      	bne.n	800374e <PCD_EP_ISR_Handler+0x6cc>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800372e:	b29b      	uxth	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003734:	4413      	add	r3, r2
 8003736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	011a      	lsls	r2, r3, #4
 800373e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003740:	4413      	add	r3, r2
 8003742:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003746:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374a:	2200      	movs	r2, #0
 800374c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800374e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f005 f990 	bl	8008a7a <HAL_PCD_DataInStageCallback>
 800375a:	e053      	b.n	8003804 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800375c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d146      	bne.n	80037f6 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003770:	b29b      	uxth	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	3302      	adds	r3, #2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003790:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800379c:	429a      	cmp	r2, r3
 800379e:	d907      	bls.n	80037b0 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80037a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a2:	699a      	ldr	r2, [r3, #24]
 80037a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037a8:	1ad2      	subs	r2, r2, r3
 80037aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ac:	619a      	str	r2, [r3, #24]
 80037ae:	e002      	b.n	80037b6 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80037b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b2:	2200      	movs	r2, #0
 80037b4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80037b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	4619      	mov	r1, r3
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f005 f958 	bl	8008a7a <HAL_PCD_DataInStageCallback>
 80037ca:	e01b      	b.n	8003804 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80037cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037d4:	441a      	add	r2, r3
 80037d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80037da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037e2:	441a      	add	r2, r3
 80037e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 f806 	bl	8005800 <USB_EPStartXfer>
 80037f4:	e006      	b.n	8003804 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037fa:	461a      	mov	r2, r3
 80037fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f91b 	bl	8003a3a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800380c:	b29b      	uxth	r3, r3
 800380e:	b21b      	sxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	f6ff ac3b 	blt.w	800308c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3758      	adds	r7, #88	@ 0x58
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	4613      	mov	r3, r2
 800382c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d07e      	beq.n	8003936 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003840:	b29b      	uxth	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	3302      	adds	r3, #2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003860:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	8b7b      	ldrh	r3, [r7, #26]
 8003868:	429a      	cmp	r2, r3
 800386a:	d306      	bcc.n	800387a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	8b7b      	ldrh	r3, [r7, #26]
 8003872:	1ad2      	subs	r2, r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	619a      	str	r2, [r3, #24]
 8003878:	e002      	b.n	8003880 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2200      	movs	r2, #0
 800387e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d123      	bne.n	80038d0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800389e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a2:	833b      	strh	r3, [r7, #24]
 80038a4:	8b3b      	ldrh	r3, [r7, #24]
 80038a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038aa:	833b      	strh	r3, [r7, #24]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	441a      	add	r2, r3
 80038ba:	8b3b      	ldrh	r3, [r7, #24]
 80038bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01f      	beq.n	800391a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f4:	82fb      	strh	r3, [r7, #22]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	441a      	add	r2, r3
 8003904:	8afb      	ldrh	r3, [r7, #22]
 8003906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800390a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800390e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003912:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003916:	b29b      	uxth	r3, r3
 8003918:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800391a:	8b7b      	ldrh	r3, [r7, #26]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8087 	beq.w	8003a30 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6959      	ldr	r1, [r3, #20]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	891a      	ldrh	r2, [r3, #8]
 800392e:	8b7b      	ldrh	r3, [r7, #26]
 8003930:	f003 fc9a 	bl	8007268 <USB_ReadPMA>
 8003934:	e07c      	b.n	8003a30 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800393e:	b29b      	uxth	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	3306      	adds	r3, #6
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800395e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	8b7b      	ldrh	r3, [r7, #26]
 8003966:	429a      	cmp	r2, r3
 8003968:	d306      	bcc.n	8003978 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	8b7b      	ldrh	r3, [r7, #26]
 8003970:	1ad2      	subs	r2, r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	619a      	str	r2, [r3, #24]
 8003976:	e002      	b.n	800397e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2200      	movs	r2, #0
 800397c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d123      	bne.n	80039ce <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800399c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a0:	83fb      	strh	r3, [r7, #30]
 80039a2:	8bfb      	ldrh	r3, [r7, #30]
 80039a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80039a8:	83fb      	strh	r3, [r7, #30]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	441a      	add	r2, r3
 80039b8:	8bfb      	ldrh	r3, [r7, #30]
 80039ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d11f      	bne.n	8003a18 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f2:	83bb      	strh	r3, [r7, #28]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	8bbb      	ldrh	r3, [r7, #28]
 8003a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a18:	8b7b      	ldrh	r3, [r7, #26]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6959      	ldr	r1, [r3, #20]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	895a      	ldrh	r2, [r3, #10]
 8003a2a:	8b7b      	ldrh	r3, [r7, #26]
 8003a2c:	f003 fc1c 	bl	8007268 <USB_ReadPMA>
    }
  }

  return count;
 8003a30:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b0a4      	sub	sp, #144	@ 0x90
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	4613      	mov	r3, r2
 8003a46:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a48:	88fb      	ldrh	r3, [r7, #6]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 81dd 	beq.w	8003e0e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	3302      	adds	r3, #2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a7c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	699a      	ldr	r2, [r3, #24]
 8003a84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d907      	bls.n	8003a9c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a94:	1ad2      	subs	r2, r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	619a      	str	r2, [r3, #24]
 8003a9a:	e002      	b.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f040 80b9 	bne.w	8003c1e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d126      	bne.n	8003b02 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac8:	4413      	add	r3, r2
 8003aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	011a      	lsls	r2, r3, #4
 8003ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aea:	801a      	strh	r2, [r3, #0]
 8003aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afe:	801a      	strh	r2, [r3, #0]
 8003b00:	e01a      	b.n	8003b38 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	785b      	ldrb	r3, [r3, #1]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d116      	bne.n	8003b38 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1e:	4413      	add	r3, r2
 8003b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	011a      	lsls	r2, r3, #4
 8003b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b34:	2200      	movs	r2, #0
 8003b36:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	785b      	ldrb	r3, [r3, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d126      	bne.n	8003b94 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	011a      	lsls	r2, r3, #4
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	801a      	strh	r2, [r3, #0]
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	801a      	strh	r2, [r3, #0]
 8003b92:	e017      	b.n	8003bc4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d113      	bne.n	8003bc4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	4413      	add	r3, r2
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	011a      	lsls	r2, r3, #4
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003bbc:	623b      	str	r3, [r7, #32]
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f004 ff55 	bl	8008a7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 82fc 	beq.w	80041d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf6:	82fb      	strh	r3, [r7, #22]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	8afb      	ldrh	r3, [r7, #22]
 8003c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	8013      	strh	r3, [r2, #0]
 8003c1c:	e2da      	b.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d021      	beq.n	8003c6c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c42:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	441a      	add	r2, r3
 8003c54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003c58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	f040 82ae 	bne.w	80041d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c80:	441a      	add	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c8e:	441a      	add	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6a1a      	ldr	r2, [r3, #32]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d30b      	bcc.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6a1a      	ldr	r2, [r3, #32]
 8003cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cb0:	1ad2      	subs	r2, r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	621a      	str	r2, [r3, #32]
 8003cb6:	e017      	b.n	8003ce8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d108      	bne.n	8003cd2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003cc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003cd0:	e00a      	b.n	8003ce8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d165      	bne.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x382>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d04:	4413      	add	r3, r2
 8003d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	011a      	lsls	r2, r3, #4
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d10:	4413      	add	r3, r2
 8003d12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d26:	801a      	strh	r2, [r3, #0]
 8003d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d2e:	d91d      	bls.n	8003d6c <HAL_PCD_EP_DB_Transmit+0x332>
 8003d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <HAL_PCD_EP_DB_Transmit+0x310>
 8003d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d46:	3b01      	subs	r3, #1
 8003d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	029b      	lsls	r3, r3, #10
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d68:	801a      	strh	r2, [r3, #0]
 8003d6a:	e044      	b.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <HAL_PCD_EP_DB_Transmit+0x350>
 8003d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d86:	801a      	strh	r2, [r3, #0]
 8003d88:	e035      	b.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003da0:	3301      	adds	r3, #1
 8003da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	029b      	lsls	r3, r3, #10
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4313      	orrs	r3, r2
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	e01c      	b.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	785b      	ldrb	r3, [r3, #1]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d118      	bne.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dd8:	4413      	add	r3, r2
 8003dda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	011a      	lsls	r2, r3, #4
 8003de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003de4:	4413      	add	r3, r2
 8003de6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003dea:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003df4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	6959      	ldr	r1, [r3, #20]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	891a      	ldrh	r2, [r3, #8]
 8003e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f003 f9e9 	bl	80071de <USB_WritePMA>
 8003e0c:	e1e2      	b.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	3306      	adds	r3, #6
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e36:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d307      	bcc.n	8003e56 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e4e:	1ad2      	subs	r2, r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	619a      	str	r2, [r3, #24]
 8003e54:	e002      	b.n	8003e5c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 80c0 	bne.w	8003fe6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	785b      	ldrb	r3, [r3, #1]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d126      	bne.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x482>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e82:	4413      	add	r3, r2
 8003e84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	011a      	lsls	r2, r3, #4
 8003e8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e8e:	4413      	add	r3, r2
 8003e90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ea4:	801a      	strh	r2, [r3, #0]
 8003ea6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	e01a      	b.n	8003ef2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	785b      	ldrb	r3, [r3, #1]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d116      	bne.n	8003ef2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ed8:	4413      	add	r3, r2
 8003eda:	667b      	str	r3, [r7, #100]	@ 0x64
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	011a      	lsls	r2, r3, #4
 8003ee2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003eea:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eee:	2200      	movs	r2, #0
 8003ef0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	785b      	ldrb	r3, [r3, #1]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d12b      	bne.n	8003f58 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f14:	4413      	add	r3, r2
 8003f16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	011a      	lsls	r2, r3, #4
 8003f1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f20:	4413      	add	r3, r2
 8003f22:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f54:	801a      	strh	r2, [r3, #0]
 8003f56:	e017      	b.n	8003f88 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	785b      	ldrb	r3, [r3, #1]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d113      	bne.n	8003f88 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f6e:	4413      	add	r3, r2
 8003f70:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	011a      	lsls	r2, r3, #4
 8003f78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f80:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f84:	2200      	movs	r2, #0
 8003f86:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f004 fd73 	bl	8008a7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f040 811a 	bne.w	80041d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fba:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	441a      	add	r2, r3
 8003fcc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	8013      	strh	r3, [r2, #0]
 8003fe4:	e0f6      	b.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d121      	bne.n	8004034 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	441a      	add	r2, r3
 800401c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004028:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800402c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004030:	b29b      	uxth	r3, r3
 8004032:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800403a:	2b01      	cmp	r3, #1
 800403c:	f040 80ca 	bne.w	80041d4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004048:	441a      	add	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004056:	441a      	add	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d30b      	bcc.n	8004080 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004078:	1ad2      	subs	r2, r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	621a      	str	r2, [r3, #32]
 800407e:	e017      	b.n	80040b0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d108      	bne.n	800409a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004088:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800408c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004098:	e00a      	b.n	80040b0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2200      	movs	r2, #0
 80040a6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	785b      	ldrb	r3, [r3, #1]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d165      	bne.n	800418a <HAL_PCD_EP_DB_Transmit+0x750>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040d2:	4413      	add	r3, r2
 80040d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	011a      	lsls	r2, r3, #4
 80040dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040de:	4413      	add	r3, r2
 80040e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80040fc:	d91d      	bls.n	800413a <HAL_PCD_EP_DB_Transmit+0x700>
 80040fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004106:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004112:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004114:	3b01      	subs	r3, #1
 8004116:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004118:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29a      	uxth	r2, r3
 800411e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004120:	b29b      	uxth	r3, r3
 8004122:	029b      	lsls	r3, r3, #10
 8004124:	b29b      	uxth	r3, r3
 8004126:	4313      	orrs	r3, r2
 8004128:	b29b      	uxth	r3, r3
 800412a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800412e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004132:	b29a      	uxth	r2, r3
 8004134:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004136:	801a      	strh	r2, [r3, #0]
 8004138:	e041      	b.n	80041be <HAL_PCD_EP_DB_Transmit+0x784>
 800413a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004142:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800414c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004150:	b29a      	uxth	r2, r3
 8004152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004154:	801a      	strh	r2, [r3, #0]
 8004156:	e032      	b.n	80041be <HAL_PCD_EP_DB_Transmit+0x784>
 8004158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <HAL_PCD_EP_DB_Transmit+0x738>
 800416c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800416e:	3301      	adds	r3, #1
 8004170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004172:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29a      	uxth	r2, r3
 8004178:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800417a:	b29b      	uxth	r3, r3
 800417c:	029b      	lsls	r3, r3, #10
 800417e:	b29b      	uxth	r3, r3
 8004180:	4313      	orrs	r3, r2
 8004182:	b29a      	uxth	r2, r3
 8004184:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004186:	801a      	strh	r2, [r3, #0]
 8004188:	e019      	b.n	80041be <HAL_PCD_EP_DB_Transmit+0x784>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	785b      	ldrb	r3, [r3, #1]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d115      	bne.n	80041be <HAL_PCD_EP_DB_Transmit+0x784>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800419a:	b29b      	uxth	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a0:	4413      	add	r3, r2
 80041a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	011a      	lsls	r2, r3, #4
 80041aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ac:	4413      	add	r3, r2
 80041ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041bc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6959      	ldr	r1, [r3, #20]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	895a      	ldrh	r2, [r3, #10]
 80041ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f003 f805 	bl	80071de <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041ee:	82bb      	strh	r3, [r7, #20]
 80041f0:	8abb      	ldrh	r3, [r7, #20]
 80041f2:	f083 0310 	eor.w	r3, r3, #16
 80041f6:	82bb      	strh	r3, [r7, #20]
 80041f8:	8abb      	ldrh	r3, [r7, #20]
 80041fa:	f083 0320 	eor.w	r3, r3, #32
 80041fe:	82bb      	strh	r3, [r7, #20]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	441a      	add	r2, r3
 800420e:	8abb      	ldrh	r3, [r7, #20]
 8004210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800421c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004220:	b29b      	uxth	r3, r3
 8004222:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3790      	adds	r7, #144	@ 0x90
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800422e:	b480      	push	{r7}
 8004230:	b087      	sub	sp, #28
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	607b      	str	r3, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	817b      	strh	r3, [r7, #10]
 800423c:	4613      	mov	r3, r2
 800423e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004240:	897b      	ldrh	r3, [r7, #10]
 8004242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800424c:	897b      	ldrh	r3, [r7, #10]
 800424e:	f003 0207 	and.w	r2, r3, #7
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	3310      	adds	r3, #16
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e009      	b.n	8004278 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004264:	897a      	ldrh	r2, [r7, #10]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004278:	893b      	ldrh	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d107      	bne.n	800428e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	b29a      	uxth	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	80da      	strh	r2, [r3, #6]
 800428c:	e00b      	b.n	80042a6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2201      	movs	r2, #1
 8004292:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	b29a      	uxth	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	0c1b      	lsrs	r3, r3, #16
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e272      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8087 	beq.w	80043e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042d4:	4b92      	ldr	r3, [pc, #584]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 030c 	and.w	r3, r3, #12
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d00c      	beq.n	80042fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d112      	bne.n	8004312 <HAL_RCC_OscConfig+0x5e>
 80042ec:	4b8c      	ldr	r3, [pc, #560]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042f8:	d10b      	bne.n	8004312 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fa:	4b89      	ldr	r3, [pc, #548]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d06c      	beq.n	80043e0 <HAL_RCC_OscConfig+0x12c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d168      	bne.n	80043e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e24c      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800431a:	d106      	bne.n	800432a <HAL_RCC_OscConfig+0x76>
 800431c:	4b80      	ldr	r3, [pc, #512]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a7f      	ldr	r2, [pc, #508]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	e02e      	b.n	8004388 <HAL_RCC_OscConfig+0xd4>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0x98>
 8004332:	4b7b      	ldr	r3, [pc, #492]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a7a      	ldr	r2, [pc, #488]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4b78      	ldr	r3, [pc, #480]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a77      	ldr	r2, [pc, #476]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004344:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e01d      	b.n	8004388 <HAL_RCC_OscConfig+0xd4>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0xbc>
 8004356:	4b72      	ldr	r3, [pc, #456]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a71      	ldr	r2, [pc, #452]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 800435c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b6f      	ldr	r3, [pc, #444]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6e      	ldr	r2, [pc, #440]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0xd4>
 8004370:	4b6b      	ldr	r3, [pc, #428]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a6a      	ldr	r2, [pc, #424]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b68      	ldr	r3, [pc, #416]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a67      	ldr	r2, [pc, #412]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004386:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fd f976 	bl	8001680 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004398:	f7fd f972 	bl	8001680 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	@ 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e200      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0xe4>
 80043b6:	e014      	b.n	80043e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fd f962 	bl	8001680 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fd f95e 	bl	8001680 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	@ 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e1ec      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d2:	4b53      	ldr	r3, [pc, #332]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x10c>
 80043de:	e000      	b.n	80043e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d063      	beq.n	80044b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ee:	4b4c      	ldr	r3, [pc, #304]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043fa:	4b49      	ldr	r3, [pc, #292]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b08      	cmp	r3, #8
 8004404:	d11c      	bne.n	8004440 <HAL_RCC_OscConfig+0x18c>
 8004406:	4b46      	ldr	r3, [pc, #280]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d116      	bne.n	8004440 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004412:	4b43      	ldr	r3, [pc, #268]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCC_OscConfig+0x176>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d001      	beq.n	800442a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e1c0      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442a:	4b3d      	ldr	r3, [pc, #244]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4939      	ldr	r1, [pc, #228]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443e:	e03a      	b.n	80044b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d020      	beq.n	800448a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004448:	4b36      	ldr	r3, [pc, #216]	@ (8004524 <HAL_RCC_OscConfig+0x270>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444e:	f7fd f917 	bl	8001680 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004456:	f7fd f913 	bl	8001680 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e1a1      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004468:	4b2d      	ldr	r3, [pc, #180]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004474:	4b2a      	ldr	r3, [pc, #168]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4927      	ldr	r1, [pc, #156]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]
 8004488:	e015      	b.n	80044b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448a:	4b26      	ldr	r3, [pc, #152]	@ (8004524 <HAL_RCC_OscConfig+0x270>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fd f8f6 	bl	8001680 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004498:	f7fd f8f2 	bl	8001680 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e180      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d03a      	beq.n	8004538 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d019      	beq.n	80044fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ca:	4b17      	ldr	r3, [pc, #92]	@ (8004528 <HAL_RCC_OscConfig+0x274>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d0:	f7fd f8d6 	bl	8001680 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fd f8d2 	bl	8001680 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e160      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044f6:	2001      	movs	r0, #1
 80044f8:	f000 fa9c 	bl	8004a34 <RCC_Delay>
 80044fc:	e01c      	b.n	8004538 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <HAL_RCC_OscConfig+0x274>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004504:	f7fd f8bc 	bl	8001680 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450a:	e00f      	b.n	800452c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800450c:	f7fd f8b8 	bl	8001680 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d908      	bls.n	800452c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e146      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
 800451e:	bf00      	nop
 8004520:	40021000 	.word	0x40021000
 8004524:	42420000 	.word	0x42420000
 8004528:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452c:	4b92      	ldr	r3, [pc, #584]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e9      	bne.n	800450c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80a6 	beq.w	8004692 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454a:	4b8b      	ldr	r3, [pc, #556]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10d      	bne.n	8004572 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004556:	4b88      	ldr	r3, [pc, #544]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4a87      	ldr	r2, [pc, #540]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800455c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004560:	61d3      	str	r3, [r2, #28]
 8004562:	4b85      	ldr	r3, [pc, #532]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456e:	2301      	movs	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004572:	4b82      	ldr	r3, [pc, #520]	@ (800477c <HAL_RCC_OscConfig+0x4c8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d118      	bne.n	80045b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800457e:	4b7f      	ldr	r3, [pc, #508]	@ (800477c <HAL_RCC_OscConfig+0x4c8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a7e      	ldr	r2, [pc, #504]	@ (800477c <HAL_RCC_OscConfig+0x4c8>)
 8004584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458a:	f7fd f879 	bl	8001680 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004592:	f7fd f875 	bl	8001680 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b64      	cmp	r3, #100	@ 0x64
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e103      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a4:	4b75      	ldr	r3, [pc, #468]	@ (800477c <HAL_RCC_OscConfig+0x4c8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x312>
 80045b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	6213      	str	r3, [r2, #32]
 80045c4:	e02d      	b.n	8004622 <HAL_RCC_OscConfig+0x36e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x334>
 80045ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4a69      	ldr	r2, [pc, #420]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	6213      	str	r3, [r2, #32]
 80045da:	4b67      	ldr	r3, [pc, #412]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	4a66      	ldr	r2, [pc, #408]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045e0:	f023 0304 	bic.w	r3, r3, #4
 80045e4:	6213      	str	r3, [r2, #32]
 80045e6:	e01c      	b.n	8004622 <HAL_RCC_OscConfig+0x36e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b05      	cmp	r3, #5
 80045ee:	d10c      	bne.n	800460a <HAL_RCC_OscConfig+0x356>
 80045f0:	4b61      	ldr	r3, [pc, #388]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	4a60      	ldr	r2, [pc, #384]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045f6:	f043 0304 	orr.w	r3, r3, #4
 80045fa:	6213      	str	r3, [r2, #32]
 80045fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	4a5d      	ldr	r2, [pc, #372]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6213      	str	r3, [r2, #32]
 8004608:	e00b      	b.n	8004622 <HAL_RCC_OscConfig+0x36e>
 800460a:	4b5b      	ldr	r3, [pc, #364]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4a5a      	ldr	r2, [pc, #360]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	6213      	str	r3, [r2, #32]
 8004616:	4b58      	ldr	r3, [pc, #352]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4a57      	ldr	r2, [pc, #348]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d015      	beq.n	8004656 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462a:	f7fd f829 	bl	8001680 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004630:	e00a      	b.n	8004648 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004632:	f7fd f825 	bl	8001680 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0b1      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004648:	4b4b      	ldr	r3, [pc, #300]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ee      	beq.n	8004632 <HAL_RCC_OscConfig+0x37e>
 8004654:	e014      	b.n	8004680 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004656:	f7fd f813 	bl	8001680 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465c:	e00a      	b.n	8004674 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465e:	f7fd f80f 	bl	8001680 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466c:	4293      	cmp	r3, r2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e09b      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004674:	4b40      	ldr	r3, [pc, #256]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1ee      	bne.n	800465e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d105      	bne.n	8004692 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004686:	4b3c      	ldr	r3, [pc, #240]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	4a3b      	ldr	r2, [pc, #236]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800468c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004690:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8087 	beq.w	80047aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800469c:	4b36      	ldr	r3, [pc, #216]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 030c 	and.w	r3, r3, #12
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d061      	beq.n	800476c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d146      	bne.n	800473e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b0:	4b33      	ldr	r3, [pc, #204]	@ (8004780 <HAL_RCC_OscConfig+0x4cc>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b6:	f7fc ffe3 	bl	8001680 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046be:	f7fc ffdf 	bl	8001680 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e06d      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d0:	4b29      	ldr	r3, [pc, #164]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f0      	bne.n	80046be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e4:	d108      	bne.n	80046f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046e6:	4b24      	ldr	r3, [pc, #144]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	4921      	ldr	r1, [pc, #132]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a19      	ldr	r1, [r3, #32]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	430b      	orrs	r3, r1
 800470a:	491b      	ldr	r1, [pc, #108]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800470c:	4313      	orrs	r3, r2
 800470e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004710:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <HAL_RCC_OscConfig+0x4cc>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004716:	f7fc ffb3 	bl	8001680 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471e:	f7fc ffaf 	bl	8001680 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e03d      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004730:	4b11      	ldr	r3, [pc, #68]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x46a>
 800473c:	e035      	b.n	80047aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473e:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <HAL_RCC_OscConfig+0x4cc>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fc ff9c 	bl	8001680 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fc ff98 	bl	8001680 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e026      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800475e:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x498>
 800476a:	e01e      	b.n	80047aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e019      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
 8004778:	40021000 	.word	0x40021000
 800477c:	40007000 	.word	0x40007000
 8004780:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004784:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <HAL_RCC_OscConfig+0x500>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	429a      	cmp	r2, r3
 8004796:	d106      	bne.n	80047a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000

080047b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0d0      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d910      	bls.n	80047fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047da:	4b67      	ldr	r3, [pc, #412]	@ (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 0207 	bic.w	r2, r3, #7
 80047e2:	4965      	ldr	r1, [pc, #404]	@ (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b63      	ldr	r3, [pc, #396]	@ (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0b8      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d020      	beq.n	800484a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004814:	4b59      	ldr	r3, [pc, #356]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a58      	ldr	r2, [pc, #352]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800481e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800482c:	4b53      	ldr	r3, [pc, #332]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4a52      	ldr	r2, [pc, #328]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004836:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004838:	4b50      	ldr	r3, [pc, #320]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	494d      	ldr	r1, [pc, #308]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	4313      	orrs	r3, r2
 8004848:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d040      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485e:	4b47      	ldr	r3, [pc, #284]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d115      	bne.n	8004896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e07f      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d107      	bne.n	8004886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004876:	4b41      	ldr	r3, [pc, #260]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e073      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004886:	4b3d      	ldr	r3, [pc, #244]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e06b      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004896:	4b39      	ldr	r3, [pc, #228]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f023 0203 	bic.w	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4936      	ldr	r1, [pc, #216]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a8:	f7fc feea 	bl	8001680 <HAL_GetTick>
 80048ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b0:	f7fc fee6 	bl	8001680 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e053      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	4b2d      	ldr	r3, [pc, #180]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 020c 	and.w	r2, r3, #12
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d1eb      	bne.n	80048b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048d8:	4b27      	ldr	r3, [pc, #156]	@ (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d210      	bcs.n	8004908 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e6:	4b24      	ldr	r3, [pc, #144]	@ (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 0207 	bic.w	r2, r3, #7
 80048ee:	4922      	ldr	r1, [pc, #136]	@ (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f6:	4b20      	ldr	r3, [pc, #128]	@ (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e032      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004914:	4b19      	ldr	r3, [pc, #100]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4916      	ldr	r1, [pc, #88]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004922:	4313      	orrs	r3, r2
 8004924:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004932:	4b12      	ldr	r3, [pc, #72]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	490e      	ldr	r1, [pc, #56]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004942:	4313      	orrs	r3, r2
 8004944:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004946:	f000 f821 	bl	800498c <HAL_RCC_GetSysClockFreq>
 800494a:	4602      	mov	r2, r0
 800494c:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <HAL_RCC_ClockConfig+0x1c4>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	490a      	ldr	r1, [pc, #40]	@ (8004980 <HAL_RCC_ClockConfig+0x1c8>)
 8004958:	5ccb      	ldrb	r3, [r1, r3]
 800495a:	fa22 f303 	lsr.w	r3, r2, r3
 800495e:	4a09      	ldr	r2, [pc, #36]	@ (8004984 <HAL_RCC_ClockConfig+0x1cc>)
 8004960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004962:	4b09      	ldr	r3, [pc, #36]	@ (8004988 <HAL_RCC_ClockConfig+0x1d0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f7fc fe48 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40022000 	.word	0x40022000
 800497c:	40021000 	.word	0x40021000
 8004980:	08009dc0 	.word	0x08009dc0
 8004984:	20000000 	.word	0x20000000
 8004988:	20000004 	.word	0x20000004

0800498c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	2300      	movs	r3, #0
 80049a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x94>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d002      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x30>
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d003      	beq.n	80049c2 <HAL_RCC_GetSysClockFreq+0x36>
 80049ba:	e027      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049bc:	4b19      	ldr	r3, [pc, #100]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x98>)
 80049be:	613b      	str	r3, [r7, #16]
      break;
 80049c0:	e027      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	0c9b      	lsrs	r3, r3, #18
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	4a17      	ldr	r2, [pc, #92]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x9c>)
 80049cc:	5cd3      	ldrb	r3, [r2, r3]
 80049ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d010      	beq.n	80049fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049da:	4b11      	ldr	r3, [pc, #68]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x94>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	0c5b      	lsrs	r3, r3, #17
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	4a11      	ldr	r2, [pc, #68]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0xa0>)
 80049e6:	5cd3      	ldrb	r3, [r2, r3]
 80049e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ee:	fb03 f202 	mul.w	r2, r3, r2
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	e004      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a00:	fb02 f303 	mul.w	r3, r2, r3
 8004a04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	613b      	str	r3, [r7, #16]
      break;
 8004a0a:	e002      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a0c:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a0e:	613b      	str	r3, [r7, #16]
      break;
 8004a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a12:	693b      	ldr	r3, [r7, #16]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
 8004a24:	007a1200 	.word	0x007a1200
 8004a28:	08009dd0 	.word	0x08009dd0
 8004a2c:	08009de0 	.word	0x08009de0
 8004a30:	003d0900 	.word	0x003d0900

08004a34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a68 <RCC_Delay+0x34>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a0a      	ldr	r2, [pc, #40]	@ (8004a6c <RCC_Delay+0x38>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	0a5b      	lsrs	r3, r3, #9
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a50:	bf00      	nop
  }
  while (Delay --);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1e5a      	subs	r2, r3, #1
 8004a56:	60fa      	str	r2, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f9      	bne.n	8004a50 <RCC_Delay+0x1c>
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr
 8004a68:	20000000 	.word	0x20000000
 8004a6c:	10624dd3 	.word	0x10624dd3

08004a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d07d      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a90:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10d      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa6:	61d3      	str	r3, [r2, #28]
 8004aa8:	4b49      	ldr	r3, [pc, #292]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab8:	4b46      	ldr	r3, [pc, #280]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d118      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac4:	4b43      	ldr	r3, [pc, #268]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a42      	ldr	r2, [pc, #264]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ace:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ad0:	f7fc fdd6 	bl	8001680 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad6:	e008      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad8:	f7fc fdd2 	bl	8001680 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b64      	cmp	r3, #100	@ 0x64
 8004ae4:	d901      	bls.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e06d      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aea:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004af6:	4b36      	ldr	r3, [pc, #216]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004afe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d02e      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d027      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b14:	4b2e      	ldr	r3, [pc, #184]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b24:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b2a:	4a29      	ldr	r2, [pc, #164]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d014      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3a:	f7fc fda1 	bl	8001680 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b40:	e00a      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b42:	f7fc fd9d 	bl	8001680 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e036      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b58:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0ee      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b64:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4917      	ldr	r1, [pc, #92]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7c:	4b14      	ldr	r3, [pc, #80]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	4a13      	ldr	r2, [pc, #76]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b94:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	490b      	ldr	r1, [pc, #44]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d008      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bb2:	4b07      	ldr	r3, [pc, #28]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	4904      	ldr	r1, [pc, #16]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40007000 	.word	0x40007000
 8004bd8:	42420440 	.word	0x42420440

08004bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	4638      	mov	r0, r7
 8004be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr

08004bf6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c06:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004c0a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc80      	pop	{r7}
 8004c20:	4770      	bx	lr

08004c22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b085      	sub	sp, #20
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c2a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004c2e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	4013      	ands	r3, r2
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr

08004c56 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	4638      	mov	r0, r7
 8004c78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b09d      	sub	sp, #116	@ 0x74
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	78db      	ldrb	r3, [r3, #3]
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d81f      	bhi.n	8004d1a <USB_ActivateEndpoint+0x72>
 8004cda:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce0 <USB_ActivateEndpoint+0x38>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004d0d 	.word	0x08004d0d
 8004ce8:	08004d23 	.word	0x08004d23
 8004cec:	08004cff 	.word	0x08004cff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004cf0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004cf4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cf8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004cfc:	e012      	b.n	8004d24 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004cfe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d02:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004d06:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004d0a:	e00b      	b.n	8004d24 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d14:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004d18:	e004      	b.n	8004d24 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004d20:	e000      	b.n	8004d24 <USB_ActivateEndpoint+0x7c>
      break;
 8004d22:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	7812      	ldrb	r2, [r2, #0]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	441a      	add	r2, r3
 8004d72:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004d76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	7b1b      	ldrb	r3, [r3, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f040 8178 	bne.w	8005084 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8084 	beq.w	8004ea6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	4413      	add	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	011a      	lsls	r2, r3, #4
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	88db      	ldrh	r3, [r3, #6]
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	827b      	strh	r3, [r7, #18]
 8004de0:	8a7b      	ldrh	r3, [r7, #18]
 8004de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01b      	beq.n	8004e22 <USB_ActivateEndpoint+0x17a>
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e00:	823b      	strh	r3, [r7, #16]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	441a      	add	r2, r3
 8004e0c:	8a3b      	ldrh	r3, [r7, #16]
 8004e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	78db      	ldrb	r3, [r3, #3]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d020      	beq.n	8004e6c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e40:	81bb      	strh	r3, [r7, #12]
 8004e42:	89bb      	ldrh	r3, [r7, #12]
 8004e44:	f083 0320 	eor.w	r3, r3, #32
 8004e48:	81bb      	strh	r3, [r7, #12]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	89bb      	ldrh	r3, [r7, #12]
 8004e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8013      	strh	r3, [r2, #0]
 8004e6a:	e2d5      	b.n	8005418 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e82:	81fb      	strh	r3, [r7, #14]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	89fb      	ldrh	r3, [r7, #14]
 8004e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	8013      	strh	r3, [r2, #0]
 8004ea4:	e2b8      	b.n	8005418 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	4413      	add	r3, r2
 8004eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	011a      	lsls	r2, r3, #4
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	88db      	ldrh	r3, [r3, #6]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eea:	4413      	add	r3, r2
 8004eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	011a      	lsls	r2, r3, #4
 8004ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	801a      	strh	r2, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f14:	d91d      	bls.n	8004f52 <USB_ActivateEndpoint+0x2aa>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d102      	bne.n	8004f30 <USB_ActivateEndpoint+0x288>
 8004f2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	029b      	lsls	r3, r3, #10
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	e026      	b.n	8004fa0 <USB_ActivateEndpoint+0x2f8>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <USB_ActivateEndpoint+0x2c8>
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	801a      	strh	r2, [r3, #0]
 8004f6e:	e017      	b.n	8004fa0 <USB_ActivateEndpoint+0x2f8>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <USB_ActivateEndpoint+0x2e2>
 8004f84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f86:	3301      	adds	r3, #1
 8004f88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	029b      	lsls	r3, r3, #10
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004fae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004fb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01b      	beq.n	8004ff0 <USB_ActivateEndpoint+0x348>
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fce:	843b      	strh	r3, [r7, #32]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	8c3b      	ldrh	r3, [r7, #32]
 8004fdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fe4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d124      	bne.n	8005042 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b29b      	uxth	r3, r3
 8005006:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800500a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500e:	83bb      	strh	r3, [r7, #28]
 8005010:	8bbb      	ldrh	r3, [r7, #28]
 8005012:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005016:	83bb      	strh	r3, [r7, #28]
 8005018:	8bbb      	ldrh	r3, [r7, #28]
 800501a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800501e:	83bb      	strh	r3, [r7, #28]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	441a      	add	r2, r3
 800502a:	8bbb      	ldrh	r3, [r7, #28]
 800502c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800503c:	b29b      	uxth	r3, r3
 800503e:	8013      	strh	r3, [r2, #0]
 8005040:	e1ea      	b.n	8005418 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005058:	83fb      	strh	r3, [r7, #30]
 800505a:	8bfb      	ldrh	r3, [r7, #30]
 800505c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005060:	83fb      	strh	r3, [r7, #30]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	8bfb      	ldrh	r3, [r7, #30]
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800507a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]
 8005082:	e1c9      	b.n	8005418 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	78db      	ldrb	r3, [r3, #3]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d11e      	bne.n	80050ca <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800509e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	441a      	add	r2, r3
 80050b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80050b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050bc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80050c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	8013      	strh	r3, [r2, #0]
 80050c8:	e01d      	b.n	8005106 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80050dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	441a      	add	r2, r3
 80050ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80050f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005102:	b29b      	uxth	r3, r3
 8005104:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005110:	b29b      	uxth	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005116:	4413      	add	r3, r2
 8005118:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	011a      	lsls	r2, r3, #4
 8005120:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005122:	4413      	add	r3, r2
 8005124:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005128:	65bb      	str	r3, [r7, #88]	@ 0x58
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	891b      	ldrh	r3, [r3, #8]
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	b29b      	uxth	r3, r3
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005138:	801a      	strh	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	657b      	str	r3, [r7, #84]	@ 0x54
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005144:	b29b      	uxth	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800514a:	4413      	add	r3, r2
 800514c:	657b      	str	r3, [r7, #84]	@ 0x54
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	011a      	lsls	r2, r3, #4
 8005154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005156:	4413      	add	r3, r2
 8005158:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800515c:	653b      	str	r3, [r7, #80]	@ 0x50
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	895b      	ldrh	r3, [r3, #10]
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800516c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f040 8093 	bne.w	800529e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005188:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800518c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01b      	beq.n	80051cc <USB_ActivateEndpoint+0x524>
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	441a      	add	r2, r3
 80051b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80051b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80051da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80051dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01b      	beq.n	800521c <USB_ActivateEndpoint+0x574>
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	441a      	add	r2, r3
 8005206:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800520c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005214:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005218:	b29b      	uxth	r3, r3
 800521a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800522e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005232:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005234:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005236:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800523a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800523c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800523e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005242:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800525c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29b      	uxth	r3, r3
 8005272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800527a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	441a      	add	r2, r3
 8005286:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005288:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800528c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005298:	b29b      	uxth	r3, r3
 800529a:	8013      	strh	r3, [r2, #0]
 800529c:	e0bc      	b.n	8005418 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80052ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80052b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01d      	beq.n	80052f6 <USB_ActivateEndpoint+0x64e>
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	441a      	add	r2, r3
 80052de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80052e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005306:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800530a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01d      	beq.n	800534e <USB_ActivateEndpoint+0x6a6>
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005328:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	441a      	add	r2, r3
 8005336:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800533a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800533e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005346:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800534a:	b29b      	uxth	r3, r3
 800534c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	78db      	ldrb	r3, [r3, #3]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d024      	beq.n	80053a0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800536c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005370:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005374:	f083 0320 	eor.w	r3, r3, #32
 8005378:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	441a      	add	r2, r3
 8005386:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800538a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800538e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800539a:	b29b      	uxth	r3, r3
 800539c:	8013      	strh	r3, [r2, #0]
 800539e:	e01d      	b.n	80053dc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80053c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053d8:	b29b      	uxth	r3, r3
 80053da:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	441a      	add	r2, r3
 8005400:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800540c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005414:	b29b      	uxth	r3, r3
 8005416:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005418:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800541c:	4618      	mov	r0, r3
 800541e:	3774      	adds	r7, #116	@ 0x74
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop

08005428 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005428:	b480      	push	{r7}
 800542a:	b08d      	sub	sp, #52	@ 0x34
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	7b1b      	ldrb	r3, [r3, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f040 808e 	bne.w	8005558 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d044      	beq.n	80054ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	81bb      	strh	r3, [r7, #12]
 8005452:	89bb      	ldrh	r3, [r7, #12]
 8005454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01b      	beq.n	8005494 <USB_DeactivateEndpoint+0x6c>
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800546e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005472:	817b      	strh	r3, [r7, #10]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	897b      	ldrh	r3, [r7, #10]
 8005480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800548c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005490:	b29b      	uxth	r3, r3
 8005492:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054aa:	813b      	strh	r3, [r7, #8]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	441a      	add	r2, r3
 80054b6:	893b      	ldrh	r3, [r7, #8]
 80054b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	8013      	strh	r3, [r2, #0]
 80054cc:	e192      	b.n	80057f4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	827b      	strh	r3, [r7, #18]
 80054dc:	8a7b      	ldrh	r3, [r7, #18]
 80054de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01b      	beq.n	800551e <USB_DeactivateEndpoint+0xf6>
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fc:	823b      	strh	r3, [r7, #16]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	441a      	add	r2, r3
 8005508:	8a3b      	ldrh	r3, [r7, #16]
 800550a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005512:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800551a:	b29b      	uxth	r3, r3
 800551c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	b29b      	uxth	r3, r3
 800552c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005534:	81fb      	strh	r3, [r7, #14]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	441a      	add	r2, r3
 8005540:	89fb      	ldrh	r3, [r7, #14]
 8005542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800554a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800554e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005552:	b29b      	uxth	r3, r3
 8005554:	8013      	strh	r3, [r2, #0]
 8005556:	e14d      	b.n	80057f4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f040 80a5 	bne.w	80056ac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	843b      	strh	r3, [r7, #32]
 8005570:	8c3b      	ldrh	r3, [r7, #32]
 8005572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d01b      	beq.n	80055b2 <USB_DeactivateEndpoint+0x18a>
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800558c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005590:	83fb      	strh	r3, [r7, #30]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	441a      	add	r2, r3
 800559c:	8bfb      	ldrh	r3, [r7, #30]
 800559e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	83bb      	strh	r3, [r7, #28]
 80055c0:	8bbb      	ldrh	r3, [r7, #28]
 80055c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01b      	beq.n	8005602 <USB_DeactivateEndpoint+0x1da>
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e0:	837b      	strh	r3, [r7, #26]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	441a      	add	r2, r3
 80055ec:	8b7b      	ldrh	r3, [r7, #26]
 80055ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055fe:	b29b      	uxth	r3, r3
 8005600:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005618:	833b      	strh	r3, [r7, #24]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	441a      	add	r2, r3
 8005624:	8b3b      	ldrh	r3, [r7, #24]
 8005626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800562a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800562e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005632:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800564c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005650:	82fb      	strh	r3, [r7, #22]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	8afb      	ldrh	r3, [r7, #22]
 800565e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800566a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800566e:	b29b      	uxth	r3, r3
 8005670:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005688:	82bb      	strh	r3, [r7, #20]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	8abb      	ldrh	r3, [r7, #20]
 8005696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800569a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800569e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	8013      	strh	r3, [r2, #0]
 80056aa:	e0a3      	b.n	80057f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80056ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80056bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01b      	beq.n	80056fc <USB_DeactivateEndpoint+0x2d4>
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056da:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	441a      	add	r2, r3
 80056e6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80056e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800570a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800570c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01b      	beq.n	800574c <USB_DeactivateEndpoint+0x324>
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800572a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800573c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005744:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800575e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005762:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	441a      	add	r2, r3
 800576e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005778:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800577c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005780:	b29b      	uxth	r3, r3
 8005782:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800579a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	441a      	add	r2, r3
 80057a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	441a      	add	r2, r3
 80057de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80057e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3734      	adds	r7, #52	@ 0x34
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr

08005800 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b0c2      	sub	sp, #264	@ 0x108
 8005804:	af00      	add	r7, sp, #0
 8005806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800580e:	6018      	str	r0, [r3, #0]
 8005810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005818:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800581a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	2b01      	cmp	r3, #1
 8005828:	f040 86b7 	bne.w	800659a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800582c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	429a      	cmp	r2, r3
 8005846:	d908      	bls.n	800585a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005858:	e007      	b.n	800586a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800585a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800586a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	7b1b      	ldrb	r3, [r3, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d13a      	bne.n	80058f0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800587a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800587e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6959      	ldr	r1, [r3, #20]
 8005886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	88da      	ldrh	r2, [r3, #6]
 8005892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005896:	b29b      	uxth	r3, r3
 8005898:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800589c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058a0:	6800      	ldr	r0, [r0, #0]
 80058a2:	f001 fc9c 	bl	80071de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4413      	add	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	011a      	lsls	r2, r3, #4
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4413      	add	r3, r2
 80058dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	801a      	strh	r2, [r3, #0]
 80058ec:	f000 be1f 	b.w	800652e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80058f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	78db      	ldrb	r3, [r3, #3]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	f040 8462 	bne.w	80061c6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	429a      	cmp	r2, r3
 800591c:	f240 83df 	bls.w	80060de <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005924:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005946:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800594a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	441a      	add	r2, r3
 8005964:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800596c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005970:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005978:	b29b      	uxth	r3, r3
 800597a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800597c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6a1a      	ldr	r2, [r3, #32]
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598c:	1ad2      	subs	r2, r2, r3
 800598e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800599a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 81c7 	beq.w	8005d50 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80059ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d177      	bne.n	8005ace <USB_EPStartXfer+0x2ce>
 80059de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fe:	4413      	add	r3, r2
 8005a00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	011a      	lsls	r2, r3, #4
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	4413      	add	r3, r2
 8005a14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a30:	d921      	bls.n	8005a76 <USB_EPStartXfer+0x276>
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <USB_EPStartXfer+0x252>
 8005a48:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	029b      	lsls	r3, r3, #10
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	4313      	orrs	r3, r2
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	801a      	strh	r2, [r3, #0]
 8005a74:	e050      	b.n	8005b18 <USB_EPStartXfer+0x318>
 8005a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <USB_EPStartXfer+0x294>
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	e041      	b.n	8005b18 <USB_EPStartXfer+0x318>
 8005a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <USB_EPStartXfer+0x2b4>
 8005aaa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005aae:	3301      	adds	r3, #1
 8005ab0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	029b      	lsls	r3, r3, #10
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	801a      	strh	r2, [r3, #0]
 8005acc:	e024      	b.n	8005b18 <USB_EPStartXfer+0x318>
 8005ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d11c      	bne.n	8005b18 <USB_EPStartXfer+0x318>
 8005ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af2:	4413      	add	r3, r2
 8005af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	011a      	lsls	r2, r3, #4
 8005b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b06:	4413      	add	r3, r2
 8005b08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	895b      	ldrh	r3, [r3, #10]
 8005b24:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6959      	ldr	r1, [r3, #20]
 8005b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b3e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b42:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b46:	6800      	ldr	r0, [r0, #0]
 8005b48:	f001 fb49 	bl	80071de <USB_WritePMA>
            ep->xfer_buff += len;
 8005b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5c:	441a      	add	r2, r3
 8005b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6a1a      	ldr	r2, [r3, #32]
 8005b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d90f      	bls.n	8005ba6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6a1a      	ldr	r2, [r3, #32]
 8005b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b96:	1ad2      	subs	r2, r2, r3
 8005b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	621a      	str	r2, [r3, #32]
 8005ba4:	e00e      	b.n	8005bc4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d177      	bne.n	8005cc4 <USB_EPStartXfer+0x4c4>
 8005bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	011a      	lsls	r2, r3, #4
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	801a      	strh	r2, [r3, #0]
 8005c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c24:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c26:	d921      	bls.n	8005c6c <USB_EPStartXfer+0x46c>
 8005c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c36:	f003 031f 	and.w	r3, r3, #31
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d104      	bne.n	8005c48 <USB_EPStartXfer+0x448>
 8005c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c42:	3b01      	subs	r3, #1
 8005c44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	029b      	lsls	r3, r3, #10
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	801a      	strh	r2, [r3, #0]
 8005c6a:	e056      	b.n	8005d1a <USB_EPStartXfer+0x51a>
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <USB_EPStartXfer+0x48a>
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	801a      	strh	r2, [r3, #0]
 8005c88:	e047      	b.n	8005d1a <USB_EPStartXfer+0x51a>
 8005c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <USB_EPStartXfer+0x4aa>
 8005ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	029b      	lsls	r3, r3, #10
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	e02a      	b.n	8005d1a <USB_EPStartXfer+0x51a>
 8005cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	785b      	ldrb	r3, [r3, #1]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d122      	bne.n	8005d1a <USB_EPStartXfer+0x51a>
 8005cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	623b      	str	r3, [r7, #32]
 8005ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	623b      	str	r3, [r7, #32]
 8005cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	011a      	lsls	r2, r3, #4
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	891b      	ldrh	r3, [r3, #8]
 8005d26:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6959      	ldr	r1, [r3, #20]
 8005d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d40:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d44:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d48:	6800      	ldr	r0, [r0, #0]
 8005d4a:	f001 fa48 	bl	80071de <USB_WritePMA>
 8005d4e:	e3ee      	b.n	800652e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	785b      	ldrb	r3, [r3, #1]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d177      	bne.n	8005e50 <USB_EPStartXfer+0x650>
 8005d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d80:	4413      	add	r3, r2
 8005d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	011a      	lsls	r2, r3, #4
 8005d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d94:	4413      	add	r3, r2
 8005d96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005daa:	801a      	strh	r2, [r3, #0]
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005db2:	d921      	bls.n	8005df8 <USB_EPStartXfer+0x5f8>
 8005db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db8:	095b      	lsrs	r3, r3, #5
 8005dba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <USB_EPStartXfer+0x5d4>
 8005dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	029b      	lsls	r3, r3, #10
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	4313      	orrs	r3, r2
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df4:	801a      	strh	r2, [r3, #0]
 8005df6:	e056      	b.n	8005ea6 <USB_EPStartXfer+0x6a6>
 8005df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <USB_EPStartXfer+0x616>
 8005e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e047      	b.n	8005ea6 <USB_EPStartXfer+0x6a6>
 8005e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d004      	beq.n	8005e36 <USB_EPStartXfer+0x636>
 8005e2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e30:	3301      	adds	r3, #1
 8005e32:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	029b      	lsls	r3, r3, #10
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	4313      	orrs	r3, r2
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	e02a      	b.n	8005ea6 <USB_EPStartXfer+0x6a6>
 8005e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d122      	bne.n	8005ea6 <USB_EPStartXfer+0x6a6>
 8005e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e80:	4413      	add	r3, r2
 8005e82:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	011a      	lsls	r2, r3, #4
 8005e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e94:	4413      	add	r3, r2
 8005e96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ea4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	891b      	ldrh	r3, [r3, #8]
 8005eb2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6959      	ldr	r1, [r3, #20]
 8005ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005ecc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ed0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ed4:	6800      	ldr	r0, [r0, #0]
 8005ed6:	f001 f982 	bl	80071de <USB_WritePMA>
            ep->xfer_buff += len;
 8005eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695a      	ldr	r2, [r3, #20]
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eea:	441a      	add	r2, r3
 8005eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d90f      	bls.n	8005f34 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f24:	1ad2      	subs	r2, r2, r3
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	621a      	str	r2, [r3, #32]
 8005f32:	e00e      	b.n	8005f52 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d177      	bne.n	800605e <USB_EPStartXfer+0x85e>
 8005f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8e:	4413      	add	r3, r2
 8005f90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	011a      	lsls	r2, r3, #4
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fc0:	d921      	bls.n	8006006 <USB_EPStartXfer+0x806>
 8005fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd0:	f003 031f 	and.w	r3, r3, #31
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <USB_EPStartXfer+0x7e2>
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	029b      	lsls	r3, r3, #10
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	e050      	b.n	80060a8 <USB_EPStartXfer+0x8a8>
 8006006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <USB_EPStartXfer+0x824>
 800600e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800601c:	b29a      	uxth	r2, r3
 800601e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006020:	801a      	strh	r2, [r3, #0]
 8006022:	e041      	b.n	80060a8 <USB_EPStartXfer+0x8a8>
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006028:	085b      	lsrs	r3, r3, #1
 800602a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d004      	beq.n	8006044 <USB_EPStartXfer+0x844>
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800603e:	3301      	adds	r3, #1
 8006040:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29a      	uxth	r2, r3
 800604a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604e:	b29b      	uxth	r3, r3
 8006050:	029b      	lsls	r3, r3, #10
 8006052:	b29b      	uxth	r3, r3
 8006054:	4313      	orrs	r3, r2
 8006056:	b29a      	uxth	r2, r3
 8006058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	e024      	b.n	80060a8 <USB_EPStartXfer+0x8a8>
 800605e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	785b      	ldrb	r3, [r3, #1]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d11c      	bne.n	80060a8 <USB_EPStartXfer+0x8a8>
 800606e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006072:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800607c:	b29b      	uxth	r3, r3
 800607e:	461a      	mov	r2, r3
 8006080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006082:	4413      	add	r3, r2
 8006084:	643b      	str	r3, [r7, #64]	@ 0x40
 8006086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	011a      	lsls	r2, r3, #4
 8006094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006096:	4413      	add	r3, r2
 8006098:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800609c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800609e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	895b      	ldrh	r3, [r3, #10]
 80060b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6959      	ldr	r1, [r3, #20]
 80060c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80060ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80060d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80060d6:	6800      	ldr	r0, [r0, #0]
 80060d8:	f001 f881 	bl	80071de <USB_WritePMA>
 80060dc:	e227      	b.n	800652e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80060de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80060ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006114:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	441a      	add	r2, r3
 8006132:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800613a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800614a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006164:	b29b      	uxth	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800616a:	4413      	add	r3, r2
 800616c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800616e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	011a      	lsls	r2, r3, #4
 800617c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800617e:	4413      	add	r3, r2
 8006180:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006184:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618a:	b29a      	uxth	r2, r3
 800618c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800618e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	891b      	ldrh	r3, [r3, #8]
 800619c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6959      	ldr	r1, [r3, #20]
 80061ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80061b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80061ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061be:	6800      	ldr	r0, [r0, #0]
 80061c0:	f001 f80d 	bl	80071de <USB_WritePMA>
 80061c4:	e1b3      	b.n	800652e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80061c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6a1a      	ldr	r2, [r3, #32]
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d6:	1ad2      	subs	r2, r2, r3
 80061d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29b      	uxth	r3, r3
 8006202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 80c6 	beq.w	8006398 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800620c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	673b      	str	r3, [r7, #112]	@ 0x70
 8006218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d177      	bne.n	8006318 <USB_EPStartXfer+0xb18>
 8006228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006238:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006242:	b29b      	uxth	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006248:	4413      	add	r3, r2
 800624a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800624c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	011a      	lsls	r2, r3, #4
 800625a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800625c:	4413      	add	r3, r2
 800625e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006262:	667b      	str	r3, [r7, #100]	@ 0x64
 8006264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800626e:	b29a      	uxth	r2, r3
 8006270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006278:	2b3e      	cmp	r3, #62	@ 0x3e
 800627a:	d921      	bls.n	80062c0 <USB_EPStartXfer+0xac0>
 800627c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	2b00      	cmp	r3, #0
 8006290:	d104      	bne.n	800629c <USB_EPStartXfer+0xa9c>
 8006292:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006296:	3b01      	subs	r3, #1
 8006298:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800629c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	029b      	lsls	r3, r3, #10
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	4313      	orrs	r3, r2
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	e050      	b.n	8006362 <USB_EPStartXfer+0xb62>
 80062c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <USB_EPStartXfer+0xade>
 80062c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	e041      	b.n	8006362 <USB_EPStartXfer+0xb62>
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e2:	085b      	lsrs	r3, r3, #1
 80062e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <USB_EPStartXfer+0xafe>
 80062f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80062f8:	3301      	adds	r3, #1
 80062fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29a      	uxth	r2, r3
 8006304:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006308:	b29b      	uxth	r3, r3
 800630a:	029b      	lsls	r3, r3, #10
 800630c:	b29b      	uxth	r3, r3
 800630e:	4313      	orrs	r3, r2
 8006310:	b29a      	uxth	r2, r3
 8006312:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	e024      	b.n	8006362 <USB_EPStartXfer+0xb62>
 8006318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d11c      	bne.n	8006362 <USB_EPStartXfer+0xb62>
 8006328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006336:	b29b      	uxth	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800633c:	4413      	add	r3, r2
 800633e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	011a      	lsls	r2, r3, #4
 800634e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006350:	4413      	add	r3, r2
 8006352:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006356:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635c:	b29a      	uxth	r2, r3
 800635e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006360:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	895b      	ldrh	r3, [r3, #10]
 800636e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6959      	ldr	r1, [r3, #20]
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006382:	b29b      	uxth	r3, r3
 8006384:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006388:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800638c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006390:	6800      	ldr	r0, [r0, #0]
 8006392:	f000 ff24 	bl	80071de <USB_WritePMA>
 8006396:	e0ca      	b.n	800652e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d177      	bne.n	8006498 <USB_EPStartXfer+0xc98>
 80063a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063c8:	4413      	add	r3, r2
 80063ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	011a      	lsls	r2, r3, #4
 80063da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063dc:	4413      	add	r3, r2
 80063de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80063fa:	d921      	bls.n	8006440 <USB_EPStartXfer+0xc40>
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640a:	f003 031f 	and.w	r3, r3, #31
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <USB_EPStartXfer+0xc1c>
 8006412:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006416:	3b01      	subs	r3, #1
 8006418:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800641c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29a      	uxth	r2, r3
 8006422:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006426:	b29b      	uxth	r3, r3
 8006428:	029b      	lsls	r3, r3, #10
 800642a:	b29b      	uxth	r3, r3
 800642c:	4313      	orrs	r3, r2
 800642e:	b29b      	uxth	r3, r3
 8006430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006438:	b29a      	uxth	r2, r3
 800643a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	e05c      	b.n	80064fa <USB_EPStartXfer+0xcfa>
 8006440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <USB_EPStartXfer+0xc5e>
 8006448:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006456:	b29a      	uxth	r2, r3
 8006458:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	e04d      	b.n	80064fa <USB_EPStartXfer+0xcfa>
 800645e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d004      	beq.n	800647e <USB_EPStartXfer+0xc7e>
 8006474:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006478:	3301      	adds	r3, #1
 800647a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800647e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29a      	uxth	r2, r3
 8006484:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006488:	b29b      	uxth	r3, r3
 800648a:	029b      	lsls	r3, r3, #10
 800648c:	b29b      	uxth	r3, r3
 800648e:	4313      	orrs	r3, r2
 8006490:	b29a      	uxth	r2, r3
 8006492:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	e030      	b.n	80064fa <USB_EPStartXfer+0xcfa>
 8006498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d128      	bne.n	80064fa <USB_EPStartXfer+0xcfa>
 80064a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064cc:	4413      	add	r3, r2
 80064ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	011a      	lsls	r2, r3, #4
 80064e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064e4:	4413      	add	r3, r2
 80064e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	891b      	ldrh	r3, [r3, #8]
 8006506:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800650a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6959      	ldr	r1, [r3, #20]
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651a:	b29b      	uxth	r3, r3
 800651c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006520:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006524:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006528:	6800      	ldr	r0, [r0, #0]
 800652a:	f000 fe58 	bl	80071de <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800652e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006554:	817b      	strh	r3, [r7, #10]
 8006556:	897b      	ldrh	r3, [r7, #10]
 8006558:	f083 0310 	eor.w	r3, r3, #16
 800655c:	817b      	strh	r3, [r7, #10]
 800655e:	897b      	ldrh	r3, [r7, #10]
 8006560:	f083 0320 	eor.w	r3, r3, #32
 8006564:	817b      	strh	r3, [r7, #10]
 8006566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	441a      	add	r2, r3
 8006580:	897b      	ldrh	r3, [r7, #10]
 8006582:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006586:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800658a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800658e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006592:	b29b      	uxth	r3, r3
 8006594:	8013      	strh	r3, [r2, #0]
 8006596:	f000 bcde 	b.w	8006f56 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800659a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	7b1b      	ldrb	r3, [r3, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f040 80bb 	bne.w	8006722 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80065ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	699a      	ldr	r2, [r3, #24]
 80065b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d917      	bls.n	80065f8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80065c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80065d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699a      	ldr	r2, [r3, #24]
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e8:	1ad2      	subs	r2, r2, r3
 80065ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	619a      	str	r2, [r3, #24]
 80065f6:	e00e      	b.n	8006616 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80065f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006628:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006632:	b29b      	uxth	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800663a:	4413      	add	r3, r2
 800663c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	011a      	lsls	r2, r3, #4
 800664e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006652:	4413      	add	r3, r2
 8006654:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006658:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800665c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006668:	b29a      	uxth	r2, r3
 800666a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006674:	2b3e      	cmp	r3, #62	@ 0x3e
 8006676:	d924      	bls.n	80066c2 <USB_EPStartXfer+0xec2>
 8006678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006686:	f003 031f 	and.w	r3, r3, #31
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <USB_EPStartXfer+0xe98>
 800668e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006692:	3b01      	subs	r3, #1
 8006694:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006698:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29a      	uxth	r2, r3
 80066a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	029b      	lsls	r3, r3, #10
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	4313      	orrs	r3, r2
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066bc:	801a      	strh	r2, [r3, #0]
 80066be:	f000 bc10 	b.w	8006ee2 <USB_EPStartXfer+0x16e2>
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10c      	bne.n	80066e4 <USB_EPStartXfer+0xee4>
 80066ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066da:	b29a      	uxth	r2, r3
 80066dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066e0:	801a      	strh	r2, [r3, #0]
 80066e2:	e3fe      	b.n	8006ee2 <USB_EPStartXfer+0x16e2>
 80066e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d004      	beq.n	8006704 <USB_EPStartXfer+0xf04>
 80066fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80066fe:	3301      	adds	r3, #1
 8006700:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006704:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29a      	uxth	r2, r3
 800670c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006710:	b29b      	uxth	r3, r3
 8006712:	029b      	lsls	r3, r3, #10
 8006714:	b29b      	uxth	r3, r3
 8006716:	4313      	orrs	r3, r2
 8006718:	b29a      	uxth	r2, r3
 800671a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800671e:	801a      	strh	r2, [r3, #0]
 8006720:	e3df      	b.n	8006ee2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	78db      	ldrb	r3, [r3, #3]
 800672e:	2b02      	cmp	r3, #2
 8006730:	f040 8218 	bne.w	8006b64 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f040 809d 	bne.w	8006880 <USB_EPStartXfer+0x1080>
 8006746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006762:	b29b      	uxth	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800676a:	4413      	add	r3, r2
 800676c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	011a      	lsls	r2, r3, #4
 800677e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006782:	4413      	add	r3, r2
 8006784:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006788:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800678c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006798:	b29a      	uxth	r2, r3
 800679a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80067ae:	d92b      	bls.n	8006808 <USB_EPStartXfer+0x1008>
 80067b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <USB_EPStartXfer+0xfe0>
 80067d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067da:	3b01      	subs	r3, #1
 80067dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	029b      	lsls	r3, r3, #10
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	4313      	orrs	r3, r2
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fe:	b29a      	uxth	r2, r3
 8006800:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006804:	801a      	strh	r2, [r3, #0]
 8006806:	e070      	b.n	80068ea <USB_EPStartXfer+0x10ea>
 8006808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10c      	bne.n	8006832 <USB_EPStartXfer+0x1032>
 8006818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006828:	b29a      	uxth	r2, r3
 800682a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800682e:	801a      	strh	r2, [r3, #0]
 8006830:	e05b      	b.n	80068ea <USB_EPStartXfer+0x10ea>
 8006832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d004      	beq.n	8006862 <USB_EPStartXfer+0x1062>
 8006858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800685c:	3301      	adds	r3, #1
 800685e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29a      	uxth	r2, r3
 800686a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800686e:	b29b      	uxth	r3, r3
 8006870:	029b      	lsls	r3, r3, #10
 8006872:	b29b      	uxth	r3, r3
 8006874:	4313      	orrs	r3, r2
 8006876:	b29a      	uxth	r2, r3
 8006878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800687c:	801a      	strh	r2, [r3, #0]
 800687e:	e034      	b.n	80068ea <USB_EPStartXfer+0x10ea>
 8006880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d12c      	bne.n	80068ea <USB_EPStartXfer+0x10ea>
 8006890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006894:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800689e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068b4:	4413      	add	r3, r2
 80068b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	011a      	lsls	r2, r3, #4
 80068c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068cc:	4413      	add	r3, r2
 80068ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f040 809d 	bne.w	8006a44 <USB_EPStartXfer+0x1244>
 800690a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006926:	b29b      	uxth	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800692e:	4413      	add	r3, r2
 8006930:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	011a      	lsls	r2, r3, #4
 8006942:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006946:	4413      	add	r3, r2
 8006948:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800694c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006950:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800695c:	b29a      	uxth	r2, r3
 800695e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2b3e      	cmp	r3, #62	@ 0x3e
 8006972:	d92b      	bls.n	80069cc <USB_EPStartXfer+0x11cc>
 8006974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <USB_EPStartXfer+0x11a4>
 800699a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800699e:	3b01      	subs	r3, #1
 80069a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	029b      	lsls	r3, r3, #10
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	4313      	orrs	r3, r2
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069c8:	801a      	strh	r2, [r3, #0]
 80069ca:	e069      	b.n	8006aa0 <USB_EPStartXfer+0x12a0>
 80069cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10c      	bne.n	80069f6 <USB_EPStartXfer+0x11f6>
 80069dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	e054      	b.n	8006aa0 <USB_EPStartXfer+0x12a0>
 80069f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	085b      	lsrs	r3, r3, #1
 8006a04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d004      	beq.n	8006a26 <USB_EPStartXfer+0x1226>
 8006a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a20:	3301      	adds	r3, #1
 8006a22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	029b      	lsls	r3, r3, #10
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a40:	801a      	strh	r2, [r3, #0]
 8006a42:	e02d      	b.n	8006aa0 <USB_EPStartXfer+0x12a0>
 8006a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d125      	bne.n	8006aa0 <USB_EPStartXfer+0x12a0>
 8006a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	011a      	lsls	r2, r3, #4
 8006a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a82:	4413      	add	r3, r2
 8006a84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a9e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8218 	beq.w	8006ee2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ad2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d005      	beq.n	8006aea <USB_EPStartXfer+0x12ea>
 8006ade:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10d      	bne.n	8006b06 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006aea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f040 81f5 	bne.w	8006ee2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006af8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f040 81ee 	bne.w	8006ee2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b2c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	441a      	add	r2, r3
 8006b4a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	8013      	strh	r3, [r2, #0]
 8006b62:	e1be      	b.n	8006ee2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	78db      	ldrb	r3, [r3, #3]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	f040 81b4 	bne.w	8006ede <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d917      	bls.n	8006bc2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb2:	1ad2      	subs	r2, r2, r3
 8006bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	619a      	str	r2, [r3, #24]
 8006bc0:	e00e      	b.n	8006be0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f040 8085 	bne.w	8006cfc <USB_EPStartXfer+0x14fc>
 8006bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c16:	4413      	add	r3, r2
 8006c18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	011a      	lsls	r2, r3, #4
 8006c2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c2e:	4413      	add	r3, r2
 8006c30:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c4a:	801a      	strh	r2, [r3, #0]
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c50:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c52:	d923      	bls.n	8006c9c <USB_EPStartXfer+0x149c>
 8006c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c58:	095b      	lsrs	r3, r3, #5
 8006c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c62:	f003 031f 	and.w	r3, r3, #31
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d104      	bne.n	8006c74 <USB_EPStartXfer+0x1474>
 8006c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	029b      	lsls	r3, r3, #10
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	4313      	orrs	r3, r2
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c98:	801a      	strh	r2, [r3, #0]
 8006c9a:	e060      	b.n	8006d5e <USB_EPStartXfer+0x155e>
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10c      	bne.n	8006cbe <USB_EPStartXfer+0x14be>
 8006ca4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	e04f      	b.n	8006d5e <USB_EPStartXfer+0x155e>
 8006cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc2:	085b      	lsrs	r3, r3, #1
 8006cc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <USB_EPStartXfer+0x14de>
 8006cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cd8:	3301      	adds	r3, #1
 8006cda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	029b      	lsls	r3, r3, #10
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	e030      	b.n	8006d5e <USB_EPStartXfer+0x155e>
 8006cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d128      	bne.n	8006d5e <USB_EPStartXfer+0x155e>
 8006d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d30:	4413      	add	r3, r2
 8006d32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	011a      	lsls	r2, r3, #4
 8006d44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d48:	4413      	add	r3, r2
 8006d4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	785b      	ldrb	r3, [r3, #1]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f040 8085 	bne.w	8006e88 <USB_EPStartXfer+0x1688>
 8006d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006da2:	4413      	add	r3, r2
 8006da4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	011a      	lsls	r2, r3, #4
 8006db6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006dba:	4413      	add	r3, r2
 8006dbc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dd6:	801a      	strh	r2, [r3, #0]
 8006dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ddc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dde:	d923      	bls.n	8006e28 <USB_EPStartXfer+0x1628>
 8006de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d104      	bne.n	8006e00 <USB_EPStartXfer+0x1600>
 8006df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	029b      	lsls	r3, r3, #10
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	4313      	orrs	r3, r2
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	e05c      	b.n	8006ee2 <USB_EPStartXfer+0x16e2>
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10c      	bne.n	8006e4a <USB_EPStartXfer+0x164a>
 8006e30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e46:	801a      	strh	r2, [r3, #0]
 8006e48:	e04b      	b.n	8006ee2 <USB_EPStartXfer+0x16e2>
 8006e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4e:	085b      	lsrs	r3, r3, #1
 8006e50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d004      	beq.n	8006e6a <USB_EPStartXfer+0x166a>
 8006e60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e64:	3301      	adds	r3, #1
 8006e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	029b      	lsls	r3, r3, #10
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	e02c      	b.n	8006ee2 <USB_EPStartXfer+0x16e2>
 8006e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d124      	bne.n	8006ee2 <USB_EPStartXfer+0x16e2>
 8006e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006eae:	4413      	add	r3, r2
 8006eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	011a      	lsls	r2, r3, #4
 8006ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	e001      	b.n	8006ee2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e03a      	b.n	8006f58 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f08:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006f0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f10:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f14:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006f18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	441a      	add	r2, r3
 8006f3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d020      	beq.n	8006fb6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f8a:	81bb      	strh	r3, [r7, #12]
 8006f8c:	89bb      	ldrh	r3, [r7, #12]
 8006f8e:	f083 0310 	eor.w	r3, r3, #16
 8006f92:	81bb      	strh	r3, [r7, #12]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	441a      	add	r2, r3
 8006f9e:	89bb      	ldrh	r3, [r7, #12]
 8006fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	8013      	strh	r3, [r2, #0]
 8006fb4:	e01f      	b.n	8006ff6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fcc:	81fb      	strh	r3, [r7, #14]
 8006fce:	89fb      	ldrh	r3, [r7, #14]
 8006fd0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006fd4:	81fb      	strh	r3, [r7, #14]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	441a      	add	r2, r3
 8006fe0:	89fb      	ldrh	r3, [r7, #14]
 8006fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr

08007002 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007002:	b480      	push	{r7}
 8007004:	b087      	sub	sp, #28
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	7b1b      	ldrb	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f040 809d 	bne.w	8007150 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d04c      	beq.n	80070b8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	823b      	strh	r3, [r7, #16]
 800702c:	8a3b      	ldrh	r3, [r7, #16]
 800702e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	d01b      	beq.n	800706e <USB_EPClearStall+0x6c>
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800704c:	81fb      	strh	r3, [r7, #14]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	441a      	add	r2, r3
 8007058:	89fb      	ldrh	r3, [r7, #14]
 800705a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800705e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007066:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800706a:	b29b      	uxth	r3, r3
 800706c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	78db      	ldrb	r3, [r3, #3]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d06c      	beq.n	8007150 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800708c:	81bb      	strh	r3, [r7, #12]
 800708e:	89bb      	ldrh	r3, [r7, #12]
 8007090:	f083 0320 	eor.w	r3, r3, #32
 8007094:	81bb      	strh	r3, [r7, #12]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	441a      	add	r2, r3
 80070a0:	89bb      	ldrh	r3, [r7, #12]
 80070a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	8013      	strh	r3, [r2, #0]
 80070b6:	e04b      	b.n	8007150 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	82fb      	strh	r3, [r7, #22]
 80070c6:	8afb      	ldrh	r3, [r7, #22]
 80070c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01b      	beq.n	8007108 <USB_EPClearStall+0x106>
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e6:	82bb      	strh	r3, [r7, #20]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	441a      	add	r2, r3
 80070f2:	8abb      	ldrh	r3, [r7, #20]
 80070f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007104:	b29b      	uxth	r3, r3
 8007106:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800711a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711e:	827b      	strh	r3, [r7, #18]
 8007120:	8a7b      	ldrh	r3, [r7, #18]
 8007122:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007126:	827b      	strh	r3, [r7, #18]
 8007128:	8a7b      	ldrh	r3, [r7, #18]
 800712a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800712e:	827b      	strh	r3, [r7, #18]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	441a      	add	r2, r3
 800713a:	8a7b      	ldrh	r3, [r7, #18]
 800713c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800714c:	b29b      	uxth	r3, r3
 800714e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	bc80      	pop	{r7}
 800715a:	4770      	bx	lr

0800715c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d103      	bne.n	8007176 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2280      	movs	r2, #128	@ 0x80
 8007172:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr

08007182 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr

08007196 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr

080071aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80071bc:	68fb      	ldr	r3, [r7, #12]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bc80      	pop	{r7}
 80071c6:	4770      	bx	lr

080071c8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr

080071de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071de:	b480      	push	{r7}
 80071e0:	b08b      	sub	sp, #44	@ 0x2c
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	4611      	mov	r1, r2
 80071ea:	461a      	mov	r2, r3
 80071ec:	460b      	mov	r3, r1
 80071ee:	80fb      	strh	r3, [r7, #6]
 80071f0:	4613      	mov	r3, r2
 80071f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80071f4:	88bb      	ldrh	r3, [r7, #4]
 80071f6:	3301      	adds	r3, #1
 80071f8:	085b      	lsrs	r3, r3, #1
 80071fa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	005a      	lsls	r2, r3, #1
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007210:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	627b      	str	r3, [r7, #36]	@ 0x24
 8007216:	e01e      	b.n	8007256 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	3301      	adds	r3, #1
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	b21a      	sxth	r2, r3
 8007228:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800722c:	4313      	orrs	r3, r2
 800722e:	b21b      	sxth	r3, r3
 8007230:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	8a7a      	ldrh	r2, [r7, #18]
 8007236:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	3302      	adds	r3, #2
 800723c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	3302      	adds	r3, #2
 8007242:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	3301      	adds	r3, #1
 8007248:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	3301      	adds	r3, #1
 800724e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	3b01      	subs	r3, #1
 8007254:	627b      	str	r3, [r7, #36]	@ 0x24
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1dd      	bne.n	8007218 <USB_WritePMA+0x3a>
  }
}
 800725c:	bf00      	nop
 800725e:	bf00      	nop
 8007260:	372c      	adds	r7, #44	@ 0x2c
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr

08007268 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007268:	b480      	push	{r7}
 800726a:	b08b      	sub	sp, #44	@ 0x2c
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4611      	mov	r1, r2
 8007274:	461a      	mov	r2, r3
 8007276:	460b      	mov	r3, r1
 8007278:	80fb      	strh	r3, [r7, #6]
 800727a:	4613      	mov	r3, r2
 800727c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800727e:	88bb      	ldrh	r3, [r7, #4]
 8007280:	085b      	lsrs	r3, r3, #1
 8007282:	b29b      	uxth	r3, r3
 8007284:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800728e:	88fb      	ldrh	r3, [r7, #6]
 8007290:	005a      	lsls	r2, r3, #1
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800729a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a0:	e01b      	b.n	80072da <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	3302      	adds	r3, #2
 80072ae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	3301      	adds	r3, #1
 80072bc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	3301      	adds	r3, #1
 80072cc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	3302      	adds	r3, #2
 80072d2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80072d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d6:	3b01      	subs	r3, #1
 80072d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e0      	bne.n	80072a2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80072e0:	88bb      	ldrh	r3, [r7, #4]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d007      	beq.n	80072fc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	701a      	strb	r2, [r3, #0]
  }
}
 80072fc:	bf00      	nop
 80072fe:	372c      	adds	r7, #44	@ 0x2c
 8007300:	46bd      	mov	sp, r7
 8007302:	bc80      	pop	{r7}
 8007304:	4770      	bx	lr

08007306 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b082      	sub	sp, #8
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007312:	2304      	movs	r3, #4
 8007314:	2203      	movs	r2, #3
 8007316:	2181      	movs	r1, #129	@ 0x81
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 fc80 	bl	8008c1e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007324:	2010      	movs	r0, #16
 8007326:	f001 fd8d 	bl	8008e44 <USBD_static_malloc>
 800732a:	4602      	mov	r2, r0
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800733c:	2302      	movs	r3, #2
 800733e:	e005      	b.n	800734c <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007346:	2200      	movs	r2, #0
 8007348:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007360:	2181      	movs	r1, #129	@ 0x81
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 fc81 	bl	8008c6a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800737e:	4618      	mov	r0, r3
 8007380:	f001 fd6c 	bl	8008e5c <USBD_static_free>
    pdev->pClassData = NULL;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073a8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d045      	beq.n	8007452 <USBD_HID_Setup+0xba>
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	f040 80d3 	bne.w	8007572 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	785b      	ldrb	r3, [r3, #1]
 80073d0:	3b02      	subs	r3, #2
 80073d2:	2b09      	cmp	r3, #9
 80073d4:	d835      	bhi.n	8007442 <USBD_HID_Setup+0xaa>
 80073d6:	a201      	add	r2, pc, #4	@ (adr r2, 80073dc <USBD_HID_Setup+0x44>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	08007433 	.word	0x08007433
 80073e0:	08007413 	.word	0x08007413
 80073e4:	08007443 	.word	0x08007443
 80073e8:	08007443 	.word	0x08007443
 80073ec:	08007443 	.word	0x08007443
 80073f0:	08007443 	.word	0x08007443
 80073f4:	08007443 	.word	0x08007443
 80073f8:	08007443 	.word	0x08007443
 80073fc:	08007421 	.word	0x08007421
 8007400:	08007405 	.word	0x08007405
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	885b      	ldrh	r3, [r3, #2]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	461a      	mov	r2, r3
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	601a      	str	r2, [r3, #0]
          break;
 8007410:	e01e      	b.n	8007450 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2201      	movs	r2, #1
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f941 	bl	80086a0 <USBD_CtlSendData>
          break;
 800741e:	e017      	b.n	8007450 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	885b      	ldrh	r3, [r3, #2]
 8007424:	0a1b      	lsrs	r3, r3, #8
 8007426:	b29b      	uxth	r3, r3
 8007428:	b2db      	uxtb	r3, r3
 800742a:	461a      	mov	r2, r3
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	605a      	str	r2, [r3, #4]
          break;
 8007430:	e00e      	b.n	8007450 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	3304      	adds	r3, #4
 8007436:	2201      	movs	r2, #1
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 f930 	bl	80086a0 <USBD_CtlSendData>
          break;
 8007440:	e006      	b.n	8007450 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 f8c1 	bl	80085cc <USBD_CtlError>
          ret = USBD_FAIL;
 800744a:	2302      	movs	r3, #2
 800744c:	75fb      	strb	r3, [r7, #23]
          break;
 800744e:	bf00      	nop
      }
      break;
 8007450:	e096      	b.n	8007580 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b0b      	cmp	r3, #11
 8007458:	f200 8083 	bhi.w	8007562 <USBD_HID_Setup+0x1ca>
 800745c:	a201      	add	r2, pc, #4	@ (adr r2, 8007464 <USBD_HID_Setup+0xcc>)
 800745e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007462:	bf00      	nop
 8007464:	08007495 	.word	0x08007495
 8007468:	08007563 	.word	0x08007563
 800746c:	08007563 	.word	0x08007563
 8007470:	08007563 	.word	0x08007563
 8007474:	08007563 	.word	0x08007563
 8007478:	08007563 	.word	0x08007563
 800747c:	080074bd 	.word	0x080074bd
 8007480:	08007563 	.word	0x08007563
 8007484:	08007563 	.word	0x08007563
 8007488:	08007563 	.word	0x08007563
 800748c:	08007515 	.word	0x08007515
 8007490:	0800753d 	.word	0x0800753d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800749a:	2b03      	cmp	r3, #3
 800749c:	d107      	bne.n	80074ae <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800749e:	f107 030e 	add.w	r3, r7, #14
 80074a2:	2202      	movs	r2, #2
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 f8fa 	bl	80086a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074ac:	e060      	b.n	8007570 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 f88b 	bl	80085cc <USBD_CtlError>
            ret = USBD_FAIL;
 80074b6:	2302      	movs	r3, #2
 80074b8:	75fb      	strb	r3, [r7, #23]
          break;
 80074ba:	e059      	b.n	8007570 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	885b      	ldrh	r3, [r3, #2]
 80074c0:	0a1b      	lsrs	r3, r3, #8
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	2b22      	cmp	r3, #34	@ 0x22
 80074c6:	d108      	bne.n	80074da <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	88db      	ldrh	r3, [r3, #6]
 80074cc:	2b4a      	cmp	r3, #74	@ 0x4a
 80074ce:	bf28      	it	cs
 80074d0:	234a      	movcs	r3, #74	@ 0x4a
 80074d2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80074d4:	4b2d      	ldr	r3, [pc, #180]	@ (800758c <USBD_HID_Setup+0x1f4>)
 80074d6:	61bb      	str	r3, [r7, #24]
 80074d8:	e015      	b.n	8007506 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	885b      	ldrh	r3, [r3, #2]
 80074de:	0a1b      	lsrs	r3, r3, #8
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b21      	cmp	r3, #33	@ 0x21
 80074e4:	d108      	bne.n	80074f8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80074e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007590 <USBD_HID_Setup+0x1f8>)
 80074e8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	88db      	ldrh	r3, [r3, #6]
 80074ee:	2b09      	cmp	r3, #9
 80074f0:	bf28      	it	cs
 80074f2:	2309      	movcs	r3, #9
 80074f4:	83fb      	strh	r3, [r7, #30]
 80074f6:	e006      	b.n	8007506 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 f866 	bl	80085cc <USBD_CtlError>
            ret = USBD_FAIL;
 8007500:	2302      	movs	r3, #2
 8007502:	75fb      	strb	r3, [r7, #23]
            break;
 8007504:	e034      	b.n	8007570 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007506:	8bfb      	ldrh	r3, [r7, #30]
 8007508:	461a      	mov	r2, r3
 800750a:	69b9      	ldr	r1, [r7, #24]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 f8c7 	bl	80086a0 <USBD_CtlSendData>
          break;
 8007512:	e02d      	b.n	8007570 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800751a:	2b03      	cmp	r3, #3
 800751c:	d107      	bne.n	800752e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	3308      	adds	r3, #8
 8007522:	2201      	movs	r2, #1
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 f8ba 	bl	80086a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800752c:	e020      	b.n	8007570 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 f84b 	bl	80085cc <USBD_CtlError>
            ret = USBD_FAIL;
 8007536:	2302      	movs	r3, #2
 8007538:	75fb      	strb	r3, [r7, #23]
          break;
 800753a:	e019      	b.n	8007570 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007542:	2b03      	cmp	r3, #3
 8007544:	d106      	bne.n	8007554 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	885b      	ldrh	r3, [r3, #2]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	461a      	mov	r2, r3
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007552:	e00d      	b.n	8007570 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 f838 	bl	80085cc <USBD_CtlError>
            ret = USBD_FAIL;
 800755c:	2302      	movs	r3, #2
 800755e:	75fb      	strb	r3, [r7, #23]
          break;
 8007560:	e006      	b.n	8007570 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 f831 	bl	80085cc <USBD_CtlError>
          ret = USBD_FAIL;
 800756a:	2302      	movs	r3, #2
 800756c:	75fb      	strb	r3, [r7, #23]
          break;
 800756e:	bf00      	nop
      }
      break;
 8007570:	e006      	b.n	8007580 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 f829 	bl	80085cc <USBD_CtlError>
      ret = USBD_FAIL;
 800757a:	2302      	movs	r3, #2
 800757c:	75fb      	strb	r3, [r7, #23]
      break;
 800757e:	bf00      	nop
  }

  return ret;
 8007580:	7dfb      	ldrb	r3, [r7, #23]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	200000c8 	.word	0x200000c8
 8007590:	200000b0 	.word	0x200000b0

08007594 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075a8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d10c      	bne.n	80075ce <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	7b1b      	ldrb	r3, [r3, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d108      	bne.n	80075ce <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2201      	movs	r2, #1
 80075c0:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80075c2:	88fb      	ldrh	r3, [r7, #6]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	2181      	movs	r1, #129	@ 0x81
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f001 fbf5 	bl	8008db8 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2222      	movs	r2, #34	@ 0x22
 80075e4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80075e6:	4b03      	ldr	r3, [pc, #12]	@ (80075f4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000044 	.word	0x20000044

080075f8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2222      	movs	r2, #34	@ 0x22
 8007604:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007606:	4b03      	ldr	r3, [pc, #12]	@ (8007614 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	bc80      	pop	{r7}
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	20000068 	.word	0x20000068

08007618 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2222      	movs	r2, #34	@ 0x22
 8007624:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007626:	4b03      	ldr	r3, [pc, #12]	@ (8007634 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	2000008c 	.word	0x2000008c

08007638 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800764a:	2200      	movs	r2, #0
 800764c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	bc80      	pop	{r7}
 8007658:	4770      	bx	lr
	...

0800765c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	220a      	movs	r2, #10
 8007668:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800766a:	4b03      	ldr	r3, [pc, #12]	@ (8007678 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	200000bc 	.word	0x200000bc

0800767c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	4613      	mov	r3, r2
 8007688:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007690:	2302      	movs	r3, #2
 8007692:	e01a      	b.n	80076ca <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	79fa      	ldrb	r2, [r7, #7]
 80076c0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f001 fa48 	bl	8008b58 <USBD_LL_Init>

  return USBD_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b085      	sub	sp, #20
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d006      	beq.n	80076f4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	73fb      	strb	r3, [r7, #15]
 80076f2:	e001      	b.n	80076f8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80076f4:	2302      	movs	r3, #2
 80076f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	bc80      	pop	{r7}
 8007702:	4770      	bx	lr

08007704 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 fa6b 	bl	8008be8 <USBD_LL_Start>

  return USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	bc80      	pop	{r7}
 800772e:	4770      	bx	lr

08007730 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800773c:	2302      	movs	r3, #2
 800773e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00c      	beq.n	8007764 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	78fa      	ldrb	r2, [r7, #3]
 8007754:	4611      	mov	r1, r2
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	78fa      	ldrb	r2, [r7, #3]
 8007784:	4611      	mov	r1, r2
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	4798      	blx	r3

  return USBD_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fed7 	bl	800855a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80077ba:	461a      	mov	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d016      	beq.n	80077fe <USBD_LL_SetupStage+0x6a>
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d81c      	bhi.n	800780e <USBD_LL_SetupStage+0x7a>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <USBD_LL_SetupStage+0x4a>
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d008      	beq.n	80077ee <USBD_LL_SetupStage+0x5a>
 80077dc:	e017      	b.n	800780e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f9ca 	bl	8007b80 <USBD_StdDevReq>
      break;
 80077ec:	e01a      	b.n	8007824 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa2c 	bl	8007c54 <USBD_StdItfReq>
      break;
 80077fc:	e012      	b.n	8007824 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa6c 	bl	8007ce4 <USBD_StdEPReq>
      break;
 800780c:	e00a      	b.n	8007824 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007814:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007818:	b2db      	uxtb	r3, r3
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 fa43 	bl	8008ca8 <USBD_LL_StallEP>
      break;
 8007822:	bf00      	nop
  }

  return USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b086      	sub	sp, #24
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	460b      	mov	r3, r1
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d14b      	bne.n	80078da <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007848:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007850:	2b03      	cmp	r3, #3
 8007852:	d134      	bne.n	80078be <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	429a      	cmp	r2, r3
 800785e:	d919      	bls.n	8007894 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	68da      	ldr	r2, [r3, #12]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	1ad2      	subs	r2, r2, r3
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	68da      	ldr	r2, [r3, #12]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007876:	429a      	cmp	r2, r3
 8007878:	d203      	bcs.n	8007882 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800787e:	b29b      	uxth	r3, r3
 8007880:	e002      	b.n	8007888 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007886:	b29b      	uxth	r3, r3
 8007888:	461a      	mov	r2, r3
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 ff35 	bl	80086fc <USBD_CtlContinueRx>
 8007892:	e038      	b.n	8007906 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00a      	beq.n	80078b6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d105      	bne.n	80078b6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 ff32 	bl	8008720 <USBD_CtlSendStatus>
 80078bc:	e023      	b.n	8007906 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80078c4:	2b05      	cmp	r3, #5
 80078c6:	d11e      	bne.n	8007906 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80078d0:	2100      	movs	r1, #0
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f001 f9e8 	bl	8008ca8 <USBD_LL_StallEP>
 80078d8:	e015      	b.n	8007906 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00d      	beq.n	8007902 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d108      	bne.n	8007902 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	7afa      	ldrb	r2, [r7, #11]
 80078fa:	4611      	mov	r1, r2
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	4798      	blx	r3
 8007900:	e001      	b.n	8007906 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007902:	2302      	movs	r3, #2
 8007904:	e000      	b.n	8007908 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	460b      	mov	r3, r1
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800791e:	7afb      	ldrb	r3, [r7, #11]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d17f      	bne.n	8007a24 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3314      	adds	r3, #20
 8007928:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007930:	2b02      	cmp	r3, #2
 8007932:	d15c      	bne.n	80079ee <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	68da      	ldr	r2, [r3, #12]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	429a      	cmp	r2, r3
 800793e:	d915      	bls.n	800796c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	1ad2      	subs	r2, r2, r3
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	b29b      	uxth	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 febd 	bl	80086d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800795e:	2300      	movs	r3, #0
 8007960:	2200      	movs	r2, #0
 8007962:	2100      	movs	r1, #0
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f001 fa4a 	bl	8008dfe <USBD_LL_PrepareReceive>
 800796a:	e04e      	b.n	8007a0a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	6912      	ldr	r2, [r2, #16]
 8007974:	fbb3 f1f2 	udiv	r1, r3, r2
 8007978:	fb01 f202 	mul.w	r2, r1, r2
 800797c:	1a9b      	subs	r3, r3, r2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d11c      	bne.n	80079bc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800798a:	429a      	cmp	r2, r3
 800798c:	d316      	bcc.n	80079bc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007998:	429a      	cmp	r2, r3
 800799a:	d20f      	bcs.n	80079bc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800799c:	2200      	movs	r2, #0
 800799e:	2100      	movs	r1, #0
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 fe99 	bl	80086d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079ae:	2300      	movs	r3, #0
 80079b0:	2200      	movs	r2, #0
 80079b2:	2100      	movs	r1, #0
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f001 fa22 	bl	8008dfe <USBD_LL_PrepareReceive>
 80079ba:	e026      	b.n	8007a0a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00a      	beq.n	80079de <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d105      	bne.n	80079de <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80079de:	2180      	movs	r1, #128	@ 0x80
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f001 f961 	bl	8008ca8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 fead 	bl	8008746 <USBD_CtlReceiveStatus>
 80079ec:	e00d      	b.n	8007a0a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d004      	beq.n	8007a02 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d103      	bne.n	8007a0a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007a02:	2180      	movs	r1, #128	@ 0x80
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f001 f94f 	bl	8008ca8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d11d      	bne.n	8007a50 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f7ff fe81 	bl	800771c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007a22:	e015      	b.n	8007a50 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00d      	beq.n	8007a4c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d108      	bne.n	8007a4c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	7afa      	ldrb	r2, [r7, #11]
 8007a44:	4611      	mov	r1, r2
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	4798      	blx	r3
 8007a4a:	e001      	b.n	8007a50 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e000      	b.n	8007a52 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a62:	2340      	movs	r3, #64	@ 0x40
 8007a64:	2200      	movs	r2, #0
 8007a66:	2100      	movs	r1, #0
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 f8d8 	bl	8008c1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2240      	movs	r2, #64	@ 0x40
 8007a7a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a7e:	2340      	movs	r3, #64	@ 0x40
 8007a80:	2200      	movs	r2, #0
 8007a82:	2180      	movs	r1, #128	@ 0x80
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f8ca 	bl	8008c1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2240      	movs	r2, #64	@ 0x40
 8007a94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d009      	beq.n	8007ad2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6852      	ldr	r2, [r2, #4]
 8007aca:	b2d2      	uxtb	r2, r2
 8007acc:	4611      	mov	r1, r2
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	4798      	blx	r3
  }

  return USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	78fa      	ldrb	r2, [r7, #3]
 8007aec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr

08007afa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2204      	movs	r2, #4
 8007b12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr

08007b22 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d105      	bne.n	8007b40 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr

08007b4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d10b      	bne.n	8007b76 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b96:	2b40      	cmp	r3, #64	@ 0x40
 8007b98:	d005      	beq.n	8007ba6 <USBD_StdDevReq+0x26>
 8007b9a:	2b40      	cmp	r3, #64	@ 0x40
 8007b9c:	d84f      	bhi.n	8007c3e <USBD_StdDevReq+0xbe>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <USBD_StdDevReq+0x36>
 8007ba2:	2b20      	cmp	r3, #32
 8007ba4:	d14b      	bne.n	8007c3e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	4798      	blx	r3
      break;
 8007bb4:	e048      	b.n	8007c48 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b09      	cmp	r3, #9
 8007bbc:	d839      	bhi.n	8007c32 <USBD_StdDevReq+0xb2>
 8007bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc4 <USBD_StdDevReq+0x44>)
 8007bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc4:	08007c15 	.word	0x08007c15
 8007bc8:	08007c29 	.word	0x08007c29
 8007bcc:	08007c33 	.word	0x08007c33
 8007bd0:	08007c1f 	.word	0x08007c1f
 8007bd4:	08007c33 	.word	0x08007c33
 8007bd8:	08007bf7 	.word	0x08007bf7
 8007bdc:	08007bed 	.word	0x08007bed
 8007be0:	08007c33 	.word	0x08007c33
 8007be4:	08007c0b 	.word	0x08007c0b
 8007be8:	08007c01 	.word	0x08007c01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f9dc 	bl	8007fac <USBD_GetDescriptor>
          break;
 8007bf4:	e022      	b.n	8007c3c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fb3f 	bl	800827c <USBD_SetAddress>
          break;
 8007bfe:	e01d      	b.n	8007c3c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fb7e 	bl	8008304 <USBD_SetConfig>
          break;
 8007c08:	e018      	b.n	8007c3c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fc07 	bl	8008420 <USBD_GetConfig>
          break;
 8007c12:	e013      	b.n	8007c3c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fc37 	bl	800848a <USBD_GetStatus>
          break;
 8007c1c:	e00e      	b.n	8007c3c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fc65 	bl	80084f0 <USBD_SetFeature>
          break;
 8007c26:	e009      	b.n	8007c3c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fc74 	bl	8008518 <USBD_ClrFeature>
          break;
 8007c30:	e004      	b.n	8007c3c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fcc9 	bl	80085cc <USBD_CtlError>
          break;
 8007c3a:	bf00      	nop
      }
      break;
 8007c3c:	e004      	b.n	8007c48 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fcc3 	bl	80085cc <USBD_CtlError>
      break;
 8007c46:	bf00      	nop
  }

  return ret;
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop

08007c54 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c6a:	2b40      	cmp	r3, #64	@ 0x40
 8007c6c:	d005      	beq.n	8007c7a <USBD_StdItfReq+0x26>
 8007c6e:	2b40      	cmp	r3, #64	@ 0x40
 8007c70:	d82e      	bhi.n	8007cd0 <USBD_StdItfReq+0x7c>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <USBD_StdItfReq+0x26>
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d12a      	bne.n	8007cd0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c80:	3b01      	subs	r3, #1
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d81d      	bhi.n	8007cc2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	889b      	ldrh	r3, [r3, #4]
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d813      	bhi.n	8007cb8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	4798      	blx	r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	88db      	ldrh	r3, [r3, #6]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d110      	bne.n	8007ccc <USBD_StdItfReq+0x78>
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10d      	bne.n	8007ccc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fd35 	bl	8008720 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cb6:	e009      	b.n	8007ccc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fc86 	bl	80085cc <USBD_CtlError>
          break;
 8007cc0:	e004      	b.n	8007ccc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fc81 	bl	80085cc <USBD_CtlError>
          break;
 8007cca:	e000      	b.n	8007cce <USBD_StdItfReq+0x7a>
          break;
 8007ccc:	bf00      	nop
      }
      break;
 8007cce:	e004      	b.n	8007cda <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fc7a 	bl	80085cc <USBD_CtlError>
      break;
 8007cd8:	bf00      	nop
  }

  return USBD_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	889b      	ldrh	r3, [r3, #4]
 8007cf6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d00:	2b40      	cmp	r3, #64	@ 0x40
 8007d02:	d007      	beq.n	8007d14 <USBD_StdEPReq+0x30>
 8007d04:	2b40      	cmp	r3, #64	@ 0x40
 8007d06:	f200 8146 	bhi.w	8007f96 <USBD_StdEPReq+0x2b2>
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <USBD_StdEPReq+0x40>
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	f040 8141 	bne.w	8007f96 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	4798      	blx	r3
      break;
 8007d22:	e13d      	b.n	8007fa0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	d10a      	bne.n	8007d46 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	e12d      	b.n	8007fa2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	785b      	ldrb	r3, [r3, #1]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d007      	beq.n	8007d5e <USBD_StdEPReq+0x7a>
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	f300 811b 	bgt.w	8007f8a <USBD_StdEPReq+0x2a6>
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d072      	beq.n	8007e3e <USBD_StdEPReq+0x15a>
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d03a      	beq.n	8007dd2 <USBD_StdEPReq+0xee>
 8007d5c:	e115      	b.n	8007f8a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d002      	beq.n	8007d6e <USBD_StdEPReq+0x8a>
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d015      	beq.n	8007d98 <USBD_StdEPReq+0xb4>
 8007d6c:	e02b      	b.n	8007dc6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00c      	beq.n	8007d8e <USBD_StdEPReq+0xaa>
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	2b80      	cmp	r3, #128	@ 0x80
 8007d78:	d009      	beq.n	8007d8e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 ff92 	bl	8008ca8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d84:	2180      	movs	r1, #128	@ 0x80
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 ff8e 	bl	8008ca8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d8c:	e020      	b.n	8007dd0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fc1b 	bl	80085cc <USBD_CtlError>
              break;
 8007d96:	e01b      	b.n	8007dd0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	885b      	ldrh	r3, [r3, #2]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10e      	bne.n	8007dbe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00b      	beq.n	8007dbe <USBD_StdEPReq+0xda>
 8007da6:	7bbb      	ldrb	r3, [r7, #14]
 8007da8:	2b80      	cmp	r3, #128	@ 0x80
 8007daa:	d008      	beq.n	8007dbe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	88db      	ldrh	r3, [r3, #6]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d104      	bne.n	8007dbe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 ff75 	bl	8008ca8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fcae 	bl	8008720 <USBD_CtlSendStatus>

              break;
 8007dc4:	e004      	b.n	8007dd0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fbff 	bl	80085cc <USBD_CtlError>
              break;
 8007dce:	bf00      	nop
          }
          break;
 8007dd0:	e0e0      	b.n	8007f94 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d002      	beq.n	8007de2 <USBD_StdEPReq+0xfe>
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d015      	beq.n	8007e0c <USBD_StdEPReq+0x128>
 8007de0:	e026      	b.n	8007e30 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00c      	beq.n	8007e02 <USBD_StdEPReq+0x11e>
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b80      	cmp	r3, #128	@ 0x80
 8007dec:	d009      	beq.n	8007e02 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 ff58 	bl	8008ca8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007df8:	2180      	movs	r1, #128	@ 0x80
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 ff54 	bl	8008ca8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e00:	e01c      	b.n	8007e3c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fbe1 	bl	80085cc <USBD_CtlError>
              break;
 8007e0a:	e017      	b.n	8007e3c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	885b      	ldrh	r3, [r3, #2]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d112      	bne.n	8007e3a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 ff5f 	bl	8008ce6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fc79 	bl	8008720 <USBD_CtlSendStatus>
              }
              break;
 8007e2e:	e004      	b.n	8007e3a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fbca 	bl	80085cc <USBD_CtlError>
              break;
 8007e38:	e000      	b.n	8007e3c <USBD_StdEPReq+0x158>
              break;
 8007e3a:	bf00      	nop
          }
          break;
 8007e3c:	e0aa      	b.n	8007f94 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d002      	beq.n	8007e4e <USBD_StdEPReq+0x16a>
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d032      	beq.n	8007eb2 <USBD_StdEPReq+0x1ce>
 8007e4c:	e097      	b.n	8007f7e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <USBD_StdEPReq+0x180>
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	2b80      	cmp	r3, #128	@ 0x80
 8007e58:	d004      	beq.n	8007e64 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fbb5 	bl	80085cc <USBD_CtlError>
                break;
 8007e62:	e091      	b.n	8007f88 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	da0b      	bge.n	8007e84 <USBD_StdEPReq+0x1a0>
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	3310      	adds	r3, #16
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	4413      	add	r3, r2
 8007e80:	3304      	adds	r3, #4
 8007e82:	e00b      	b.n	8007e9c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	4413      	add	r3, r2
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fbf8 	bl	80086a0 <USBD_CtlSendData>
              break;
 8007eb0:	e06a      	b.n	8007f88 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007eb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da11      	bge.n	8007ede <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	f003 020f 	and.w	r2, r3, #15
 8007ec0:	6879      	ldr	r1, [r7, #4]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	440b      	add	r3, r1
 8007ecc:	3318      	adds	r3, #24
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d117      	bne.n	8007f04 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fb78 	bl	80085cc <USBD_CtlError>
                  break;
 8007edc:	e054      	b.n	8007f88 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	f003 020f 	and.w	r2, r3, #15
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	440b      	add	r3, r1
 8007ef0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d104      	bne.n	8007f04 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fb65 	bl	80085cc <USBD_CtlError>
                  break;
 8007f02:	e041      	b.n	8007f88 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	da0b      	bge.n	8007f24 <USBD_StdEPReq+0x240>
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	3310      	adds	r3, #16
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	4413      	add	r3, r2
 8007f20:	3304      	adds	r3, #4
 8007f22:	e00b      	b.n	8007f3c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	4413      	add	r3, r2
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <USBD_StdEPReq+0x266>
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b80      	cmp	r3, #128	@ 0x80
 8007f48:	d103      	bne.n	8007f52 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	e00e      	b.n	8007f70 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fee4 	bl	8008d24 <USBD_LL_IsStallEP>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2201      	movs	r2, #1
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	e002      	b.n	8007f70 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2202      	movs	r2, #2
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fb92 	bl	80086a0 <USBD_CtlSendData>
              break;
 8007f7c:	e004      	b.n	8007f88 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fb23 	bl	80085cc <USBD_CtlError>
              break;
 8007f86:	bf00      	nop
          }
          break;
 8007f88:	e004      	b.n	8007f94 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fb1d 	bl	80085cc <USBD_CtlError>
          break;
 8007f92:	bf00      	nop
      }
      break;
 8007f94:	e004      	b.n	8007fa0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fb17 	bl	80085cc <USBD_CtlError>
      break;
 8007f9e:	bf00      	nop
  }

  return ret;
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	885b      	ldrh	r3, [r3, #2]
 8007fc6:	0a1b      	lsrs	r3, r3, #8
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	2b06      	cmp	r3, #6
 8007fce:	f200 8128 	bhi.w	8008222 <USBD_GetDescriptor+0x276>
 8007fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd8 <USBD_GetDescriptor+0x2c>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	08007ff5 	.word	0x08007ff5
 8007fdc:	0800800d 	.word	0x0800800d
 8007fe0:	0800804d 	.word	0x0800804d
 8007fe4:	08008223 	.word	0x08008223
 8007fe8:	08008223 	.word	0x08008223
 8007fec:	080081c3 	.word	0x080081c3
 8007ff0:	080081ef 	.word	0x080081ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	7c12      	ldrb	r2, [r2, #16]
 8008000:	f107 0108 	add.w	r1, r7, #8
 8008004:	4610      	mov	r0, r2
 8008006:	4798      	blx	r3
 8008008:	60f8      	str	r0, [r7, #12]
      break;
 800800a:	e112      	b.n	8008232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7c1b      	ldrb	r3, [r3, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10d      	bne.n	8008030 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800801a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801c:	f107 0208 	add.w	r2, r7, #8
 8008020:	4610      	mov	r0, r2
 8008022:	4798      	blx	r3
 8008024:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3301      	adds	r3, #1
 800802a:	2202      	movs	r2, #2
 800802c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800802e:	e100      	b.n	8008232 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008038:	f107 0208 	add.w	r2, r7, #8
 800803c:	4610      	mov	r0, r2
 800803e:	4798      	blx	r3
 8008040:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	3301      	adds	r3, #1
 8008046:	2202      	movs	r2, #2
 8008048:	701a      	strb	r2, [r3, #0]
      break;
 800804a:	e0f2      	b.n	8008232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	885b      	ldrh	r3, [r3, #2]
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b05      	cmp	r3, #5
 8008054:	f200 80ac 	bhi.w	80081b0 <USBD_GetDescriptor+0x204>
 8008058:	a201      	add	r2, pc, #4	@ (adr r2, 8008060 <USBD_GetDescriptor+0xb4>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	08008079 	.word	0x08008079
 8008064:	080080ad 	.word	0x080080ad
 8008068:	080080e1 	.word	0x080080e1
 800806c:	08008115 	.word	0x08008115
 8008070:	08008149 	.word	0x08008149
 8008074:	0800817d 	.word	0x0800817d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00b      	beq.n	800809c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	7c12      	ldrb	r2, [r2, #16]
 8008090:	f107 0108 	add.w	r1, r7, #8
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
 8008098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800809a:	e091      	b.n	80081c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fa94 	bl	80085cc <USBD_CtlError>
            err++;
 80080a4:	7afb      	ldrb	r3, [r7, #11]
 80080a6:	3301      	adds	r3, #1
 80080a8:	72fb      	strb	r3, [r7, #11]
          break;
 80080aa:	e089      	b.n	80081c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7c12      	ldrb	r2, [r2, #16]
 80080c4:	f107 0108 	add.w	r1, r7, #8
 80080c8:	4610      	mov	r0, r2
 80080ca:	4798      	blx	r3
 80080cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ce:	e077      	b.n	80081c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa7a 	bl	80085cc <USBD_CtlError>
            err++;
 80080d8:	7afb      	ldrb	r3, [r7, #11]
 80080da:	3301      	adds	r3, #1
 80080dc:	72fb      	strb	r3, [r7, #11]
          break;
 80080de:	e06f      	b.n	80081c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	7c12      	ldrb	r2, [r2, #16]
 80080f8:	f107 0108 	add.w	r1, r7, #8
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
 8008100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008102:	e05d      	b.n	80081c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa60 	bl	80085cc <USBD_CtlError>
            err++;
 800810c:	7afb      	ldrb	r3, [r7, #11]
 800810e:	3301      	adds	r3, #1
 8008110:	72fb      	strb	r3, [r7, #11]
          break;
 8008112:	e055      	b.n	80081c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	7c12      	ldrb	r2, [r2, #16]
 800812c:	f107 0108 	add.w	r1, r7, #8
 8008130:	4610      	mov	r0, r2
 8008132:	4798      	blx	r3
 8008134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008136:	e043      	b.n	80081c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa46 	bl	80085cc <USBD_CtlError>
            err++;
 8008140:	7afb      	ldrb	r3, [r7, #11]
 8008142:	3301      	adds	r3, #1
 8008144:	72fb      	strb	r3, [r7, #11]
          break;
 8008146:	e03b      	b.n	80081c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7c12      	ldrb	r2, [r2, #16]
 8008160:	f107 0108 	add.w	r1, r7, #8
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
 8008168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800816a:	e029      	b.n	80081c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fa2c 	bl	80085cc <USBD_CtlError>
            err++;
 8008174:	7afb      	ldrb	r3, [r7, #11]
 8008176:	3301      	adds	r3, #1
 8008178:	72fb      	strb	r3, [r7, #11]
          break;
 800817a:	e021      	b.n	80081c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00b      	beq.n	80081a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	7c12      	ldrb	r2, [r2, #16]
 8008194:	f107 0108 	add.w	r1, r7, #8
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
 800819c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800819e:	e00f      	b.n	80081c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa12 	bl	80085cc <USBD_CtlError>
            err++;
 80081a8:	7afb      	ldrb	r3, [r7, #11]
 80081aa:	3301      	adds	r3, #1
 80081ac:	72fb      	strb	r3, [r7, #11]
          break;
 80081ae:	e007      	b.n	80081c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fa0a 	bl	80085cc <USBD_CtlError>
          err++;
 80081b8:	7afb      	ldrb	r3, [r7, #11]
 80081ba:	3301      	adds	r3, #1
 80081bc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80081be:	e038      	b.n	8008232 <USBD_GetDescriptor+0x286>
 80081c0:	e037      	b.n	8008232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	7c1b      	ldrb	r3, [r3, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d109      	bne.n	80081de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081d2:	f107 0208 	add.w	r2, r7, #8
 80081d6:	4610      	mov	r0, r2
 80081d8:	4798      	blx	r3
 80081da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081dc:	e029      	b.n	8008232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f9f3 	bl	80085cc <USBD_CtlError>
        err++;
 80081e6:	7afb      	ldrb	r3, [r7, #11]
 80081e8:	3301      	adds	r3, #1
 80081ea:	72fb      	strb	r3, [r7, #11]
      break;
 80081ec:	e021      	b.n	8008232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	7c1b      	ldrb	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10d      	bne.n	8008212 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081fe:	f107 0208 	add.w	r2, r7, #8
 8008202:	4610      	mov	r0, r2
 8008204:	4798      	blx	r3
 8008206:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	3301      	adds	r3, #1
 800820c:	2207      	movs	r2, #7
 800820e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008210:	e00f      	b.n	8008232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f9d9 	bl	80085cc <USBD_CtlError>
        err++;
 800821a:	7afb      	ldrb	r3, [r7, #11]
 800821c:	3301      	adds	r3, #1
 800821e:	72fb      	strb	r3, [r7, #11]
      break;
 8008220:	e007      	b.n	8008232 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f9d1 	bl	80085cc <USBD_CtlError>
      err++;
 800822a:	7afb      	ldrb	r3, [r7, #11]
 800822c:	3301      	adds	r3, #1
 800822e:	72fb      	strb	r3, [r7, #11]
      break;
 8008230:	bf00      	nop
  }

  if (err != 0U)
 8008232:	7afb      	ldrb	r3, [r7, #11]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d11c      	bne.n	8008272 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008238:	893b      	ldrh	r3, [r7, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d011      	beq.n	8008262 <USBD_GetDescriptor+0x2b6>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	88db      	ldrh	r3, [r3, #6]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00d      	beq.n	8008262 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	88da      	ldrh	r2, [r3, #6]
 800824a:	893b      	ldrh	r3, [r7, #8]
 800824c:	4293      	cmp	r3, r2
 800824e:	bf28      	it	cs
 8008250:	4613      	movcs	r3, r2
 8008252:	b29b      	uxth	r3, r3
 8008254:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008256:	893b      	ldrh	r3, [r7, #8]
 8008258:	461a      	mov	r2, r3
 800825a:	68f9      	ldr	r1, [r7, #12]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fa1f 	bl	80086a0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	88db      	ldrh	r3, [r3, #6]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d104      	bne.n	8008274 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa58 	bl	8008720 <USBD_CtlSendStatus>
 8008270:	e000      	b.n	8008274 <USBD_GetDescriptor+0x2c8>
    return;
 8008272:	bf00      	nop
    }
  }
}
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop

0800827c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	889b      	ldrh	r3, [r3, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d130      	bne.n	80082f0 <USBD_SetAddress+0x74>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	88db      	ldrh	r3, [r3, #6]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d12c      	bne.n	80082f0 <USBD_SetAddress+0x74>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	2b7f      	cmp	r3, #127	@ 0x7f
 800829c:	d828      	bhi.n	80082f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	885b      	ldrh	r3, [r3, #2]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d104      	bne.n	80082be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f988 	bl	80085cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082bc:	e01d      	b.n	80082fa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	7bfa      	ldrb	r2, [r7, #15]
 80082c2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fd55 	bl	8008d7a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fa25 	bl	8008720 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d004      	beq.n	80082e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2202      	movs	r2, #2
 80082e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e4:	e009      	b.n	80082fa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ee:	e004      	b.n	80082fa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f96a 	bl	80085cc <USBD_CtlError>
  }
}
 80082f8:	bf00      	nop
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	885b      	ldrh	r3, [r3, #2]
 8008312:	b2da      	uxtb	r2, r3
 8008314:	4b41      	ldr	r3, [pc, #260]	@ (800841c <USBD_SetConfig+0x118>)
 8008316:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008318:	4b40      	ldr	r3, [pc, #256]	@ (800841c <USBD_SetConfig+0x118>)
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d904      	bls.n	800832a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f952 	bl	80085cc <USBD_CtlError>
 8008328:	e075      	b.n	8008416 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008330:	2b02      	cmp	r3, #2
 8008332:	d002      	beq.n	800833a <USBD_SetConfig+0x36>
 8008334:	2b03      	cmp	r3, #3
 8008336:	d023      	beq.n	8008380 <USBD_SetConfig+0x7c>
 8008338:	e062      	b.n	8008400 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800833a:	4b38      	ldr	r3, [pc, #224]	@ (800841c <USBD_SetConfig+0x118>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d01a      	beq.n	8008378 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008342:	4b36      	ldr	r3, [pc, #216]	@ (800841c <USBD_SetConfig+0x118>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2203      	movs	r2, #3
 8008350:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008354:	4b31      	ldr	r3, [pc, #196]	@ (800841c <USBD_SetConfig+0x118>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff f9e8 	bl	8007730 <USBD_SetClassConfig>
 8008360:	4603      	mov	r3, r0
 8008362:	2b02      	cmp	r3, #2
 8008364:	d104      	bne.n	8008370 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f92f 	bl	80085cc <USBD_CtlError>
            return;
 800836e:	e052      	b.n	8008416 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f9d5 	bl	8008720 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008376:	e04e      	b.n	8008416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f9d1 	bl	8008720 <USBD_CtlSendStatus>
        break;
 800837e:	e04a      	b.n	8008416 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008380:	4b26      	ldr	r3, [pc, #152]	@ (800841c <USBD_SetConfig+0x118>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d112      	bne.n	80083ae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008390:	4b22      	ldr	r3, [pc, #136]	@ (800841c <USBD_SetConfig+0x118>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	461a      	mov	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800839a:	4b20      	ldr	r3, [pc, #128]	@ (800841c <USBD_SetConfig+0x118>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7ff f9e4 	bl	800776e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f9ba 	bl	8008720 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083ac:	e033      	b.n	8008416 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80083ae:	4b1b      	ldr	r3, [pc, #108]	@ (800841c <USBD_SetConfig+0x118>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d01d      	beq.n	80083f8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7ff f9d2 	bl	800776e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80083ca:	4b14      	ldr	r3, [pc, #80]	@ (800841c <USBD_SetConfig+0x118>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	461a      	mov	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80083d4:	4b11      	ldr	r3, [pc, #68]	@ (800841c <USBD_SetConfig+0x118>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff f9a8 	bl	8007730 <USBD_SetClassConfig>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d104      	bne.n	80083f0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f8ef 	bl	80085cc <USBD_CtlError>
            return;
 80083ee:	e012      	b.n	8008416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f995 	bl	8008720 <USBD_CtlSendStatus>
        break;
 80083f6:	e00e      	b.n	8008416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f991 	bl	8008720 <USBD_CtlSendStatus>
        break;
 80083fe:	e00a      	b.n	8008416 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f8e2 	bl	80085cc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008408:	4b04      	ldr	r3, [pc, #16]	@ (800841c <USBD_SetConfig+0x118>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7ff f9ad 	bl	800776e <USBD_ClrClassConfig>
        break;
 8008414:	bf00      	nop
    }
  }
}
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	2000026c 	.word	0x2000026c

08008420 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	88db      	ldrh	r3, [r3, #6]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d004      	beq.n	800843c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f8c9 	bl	80085cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800843a:	e022      	b.n	8008482 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008442:	2b02      	cmp	r3, #2
 8008444:	dc02      	bgt.n	800844c <USBD_GetConfig+0x2c>
 8008446:	2b00      	cmp	r3, #0
 8008448:	dc03      	bgt.n	8008452 <USBD_GetConfig+0x32>
 800844a:	e015      	b.n	8008478 <USBD_GetConfig+0x58>
 800844c:	2b03      	cmp	r3, #3
 800844e:	d00b      	beq.n	8008468 <USBD_GetConfig+0x48>
 8008450:	e012      	b.n	8008478 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3308      	adds	r3, #8
 800845c:	2201      	movs	r2, #1
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f91d 	bl	80086a0 <USBD_CtlSendData>
        break;
 8008466:	e00c      	b.n	8008482 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3304      	adds	r3, #4
 800846c:	2201      	movs	r2, #1
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f915 	bl	80086a0 <USBD_CtlSendData>
        break;
 8008476:	e004      	b.n	8008482 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f8a6 	bl	80085cc <USBD_CtlError>
        break;
 8008480:	bf00      	nop
}
 8008482:	bf00      	nop
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800849a:	3b01      	subs	r3, #1
 800849c:	2b02      	cmp	r3, #2
 800849e:	d81e      	bhi.n	80084de <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	88db      	ldrh	r3, [r3, #6]
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d004      	beq.n	80084b2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f88e 	bl	80085cc <USBD_CtlError>
        break;
 80084b0:	e01a      	b.n	80084e8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d005      	beq.n	80084ce <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f043 0202 	orr.w	r2, r3, #2
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	330c      	adds	r3, #12
 80084d2:	2202      	movs	r2, #2
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f8e2 	bl	80086a0 <USBD_CtlSendData>
      break;
 80084dc:	e004      	b.n	80084e8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f873 	bl	80085cc <USBD_CtlError>
      break;
 80084e6:	bf00      	nop
  }
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	885b      	ldrh	r3, [r3, #2]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d106      	bne.n	8008510 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f908 	bl	8008720 <USBD_CtlSendStatus>
  }
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008528:	3b01      	subs	r3, #1
 800852a:	2b02      	cmp	r3, #2
 800852c:	d80b      	bhi.n	8008546 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	885b      	ldrh	r3, [r3, #2]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d10c      	bne.n	8008550 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f8ee 	bl	8008720 <USBD_CtlSendStatus>
      }
      break;
 8008544:	e004      	b.n	8008550 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f83f 	bl	80085cc <USBD_CtlError>
      break;
 800854e:	e000      	b.n	8008552 <USBD_ClrFeature+0x3a>
      break;
 8008550:	bf00      	nop
  }
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800855a:	b480      	push	{r7}
 800855c:	b083      	sub	sp, #12
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781a      	ldrb	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	785a      	ldrb	r2, [r3, #1]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	3302      	adds	r3, #2
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	3303      	adds	r3, #3
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	021b      	lsls	r3, r3, #8
 8008584:	b29b      	uxth	r3, r3
 8008586:	4413      	add	r3, r2
 8008588:	b29a      	uxth	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	3304      	adds	r3, #4
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	3305      	adds	r3, #5
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	021b      	lsls	r3, r3, #8
 800859e:	b29b      	uxth	r3, r3
 80085a0:	4413      	add	r3, r2
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	3306      	adds	r3, #6
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	3307      	adds	r3, #7
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	021b      	lsls	r3, r3, #8
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	4413      	add	r3, r2
 80085bc:	b29a      	uxth	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	80da      	strh	r2, [r3, #6]

}
 80085c2:	bf00      	nop
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bc80      	pop	{r7}
 80085ca:	4770      	bx	lr

080085cc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80085d6:	2180      	movs	r1, #128	@ 0x80
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fb65 	bl	8008ca8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80085de:	2100      	movs	r1, #0
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fb61 	bl	8008ca8 <USBD_LL_StallEP>
}
 80085e6:	bf00      	nop
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b086      	sub	sp, #24
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d032      	beq.n	800866a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 f834 	bl	8008672 <USBD_GetLen>
 800860a:	4603      	mov	r3, r0
 800860c:	3301      	adds	r3, #1
 800860e:	b29b      	uxth	r3, r3
 8008610:	005b      	lsls	r3, r3, #1
 8008612:	b29a      	uxth	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008618:	7dfb      	ldrb	r3, [r7, #23]
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	75fa      	strb	r2, [r7, #23]
 800861e:	461a      	mov	r2, r3
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	4413      	add	r3, r2
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	7812      	ldrb	r2, [r2, #0]
 8008628:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	75fa      	strb	r2, [r7, #23]
 8008630:	461a      	mov	r2, r3
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	4413      	add	r3, r2
 8008636:	2203      	movs	r2, #3
 8008638:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800863a:	e012      	b.n	8008662 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	60fa      	str	r2, [r7, #12]
 8008642:	7dfa      	ldrb	r2, [r7, #23]
 8008644:	1c51      	adds	r1, r2, #1
 8008646:	75f9      	strb	r1, [r7, #23]
 8008648:	4611      	mov	r1, r2
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	440a      	add	r2, r1
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	75fa      	strb	r2, [r7, #23]
 8008658:	461a      	mov	r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	4413      	add	r3, r2
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e8      	bne.n	800863c <USBD_GetString+0x4e>
    }
  }
}
 800866a:	bf00      	nop
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800867e:	e005      	b.n	800868c <USBD_GetLen+0x1a>
  {
    len++;
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	3301      	adds	r3, #1
 8008684:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3301      	adds	r3, #1
 800868a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1f5      	bne.n	8008680 <USBD_GetLen+0xe>
  }

  return len;
 8008694:	7bfb      	ldrb	r3, [r7, #15]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	bc80      	pop	{r7}
 800869e:	4770      	bx	lr

080086a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	4613      	mov	r3, r2
 80086ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2202      	movs	r2, #2
 80086b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80086b6:	88fa      	ldrh	r2, [r7, #6]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80086bc:	88fa      	ldrh	r2, [r7, #6]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086c2:	88fb      	ldrh	r3, [r7, #6]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	2100      	movs	r1, #0
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 fb75 	bl	8008db8 <USBD_LL_Transmit>

  return USBD_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	4613      	mov	r3, r2
 80086e4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	2100      	movs	r1, #0
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 fb63 	bl	8008db8 <USBD_LL_Transmit>

  return USBD_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	4613      	mov	r3, r2
 8008708:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800870a:	88fb      	ldrh	r3, [r7, #6]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	2100      	movs	r1, #0
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 fb74 	bl	8008dfe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2204      	movs	r2, #4
 800872c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008730:	2300      	movs	r3, #0
 8008732:	2200      	movs	r2, #0
 8008734:	2100      	movs	r1, #0
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fb3e 	bl	8008db8 <USBD_LL_Transmit>

  return USBD_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b082      	sub	sp, #8
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2205      	movs	r2, #5
 8008752:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008756:	2300      	movs	r3, #0
 8008758:	2200      	movs	r2, #0
 800875a:	2100      	movs	r1, #0
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fb4e 	bl	8008dfe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008770:	2200      	movs	r2, #0
 8008772:	490e      	ldr	r1, [pc, #56]	@ (80087ac <MX_USB_DEVICE_Init+0x40>)
 8008774:	480e      	ldr	r0, [pc, #56]	@ (80087b0 <MX_USB_DEVICE_Init+0x44>)
 8008776:	f7fe ff81 	bl	800767c <USBD_Init>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008780:	f7f8 fe1a 	bl	80013b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008784:	490b      	ldr	r1, [pc, #44]	@ (80087b4 <MX_USB_DEVICE_Init+0x48>)
 8008786:	480a      	ldr	r0, [pc, #40]	@ (80087b0 <MX_USB_DEVICE_Init+0x44>)
 8008788:	f7fe ffa3 	bl	80076d2 <USBD_RegisterClass>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008792:	f7f8 fe11 	bl	80013b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008796:	4806      	ldr	r0, [pc, #24]	@ (80087b0 <MX_USB_DEVICE_Init+0x44>)
 8008798:	f7fe ffb4 	bl	8007704 <USBD_Start>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80087a2:	f7f8 fe09 	bl	80013b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087a6:	bf00      	nop
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20000114 	.word	0x20000114
 80087b0:	20000270 	.word	0x20000270
 80087b4:	2000000c 	.word	0x2000000c

080087b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	6039      	str	r1, [r7, #0]
 80087c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	2212      	movs	r2, #18
 80087c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087ca:	4b03      	ldr	r3, [pc, #12]	@ (80087d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	20000130 	.word	0x20000130

080087dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	6039      	str	r1, [r7, #0]
 80087e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2204      	movs	r2, #4
 80087ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087ee:	4b03      	ldr	r3, [pc, #12]	@ (80087fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bc80      	pop	{r7}
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	20000144 	.word	0x20000144

08008800 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	4603      	mov	r3, r0
 8008808:	6039      	str	r1, [r7, #0]
 800880a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800880c:	79fb      	ldrb	r3, [r7, #7]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d105      	bne.n	800881e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	4907      	ldr	r1, [pc, #28]	@ (8008834 <USBD_FS_ProductStrDescriptor+0x34>)
 8008816:	4808      	ldr	r0, [pc, #32]	@ (8008838 <USBD_FS_ProductStrDescriptor+0x38>)
 8008818:	f7ff fee9 	bl	80085ee <USBD_GetString>
 800881c:	e004      	b.n	8008828 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	4904      	ldr	r1, [pc, #16]	@ (8008834 <USBD_FS_ProductStrDescriptor+0x34>)
 8008822:	4805      	ldr	r0, [pc, #20]	@ (8008838 <USBD_FS_ProductStrDescriptor+0x38>)
 8008824:	f7ff fee3 	bl	80085ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8008828:	4b02      	ldr	r3, [pc, #8]	@ (8008834 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	20000534 	.word	0x20000534
 8008838:	08009d78 	.word	0x08009d78

0800883c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	4603      	mov	r3, r0
 8008844:	6039      	str	r1, [r7, #0]
 8008846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	4904      	ldr	r1, [pc, #16]	@ (800885c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800884c:	4804      	ldr	r0, [pc, #16]	@ (8008860 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800884e:	f7ff fece 	bl	80085ee <USBD_GetString>
  return USBD_StrDesc;
 8008852:	4b02      	ldr	r3, [pc, #8]	@ (800885c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20000534 	.word	0x20000534
 8008860:	08009d90 	.word	0x08009d90

08008864 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	6039      	str	r1, [r7, #0]
 800886e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	221a      	movs	r2, #26
 8008874:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008876:	f000 f843 	bl	8008900 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800887a:	4b02      	ldr	r3, [pc, #8]	@ (8008884 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20000148 	.word	0x20000148

08008888 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	6039      	str	r1, [r7, #0]
 8008892:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d105      	bne.n	80088a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	4907      	ldr	r1, [pc, #28]	@ (80088bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800889e:	4808      	ldr	r0, [pc, #32]	@ (80088c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088a0:	f7ff fea5 	bl	80085ee <USBD_GetString>
 80088a4:	e004      	b.n	80088b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	4904      	ldr	r1, [pc, #16]	@ (80088bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80088aa:	4805      	ldr	r0, [pc, #20]	@ (80088c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088ac:	f7ff fe9f 	bl	80085ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80088b0:	4b02      	ldr	r3, [pc, #8]	@ (80088bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	20000534 	.word	0x20000534
 80088c0:	08009da4 	.word	0x08009da4

080088c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	4603      	mov	r3, r0
 80088cc:	6039      	str	r1, [r7, #0]
 80088ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d105      	bne.n	80088e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	4907      	ldr	r1, [pc, #28]	@ (80088f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088da:	4808      	ldr	r0, [pc, #32]	@ (80088fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088dc:	f7ff fe87 	bl	80085ee <USBD_GetString>
 80088e0:	e004      	b.n	80088ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	4904      	ldr	r1, [pc, #16]	@ (80088f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088e6:	4805      	ldr	r0, [pc, #20]	@ (80088fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088e8:	f7ff fe81 	bl	80085ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80088ec:	4b02      	ldr	r3, [pc, #8]	@ (80088f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20000534 	.word	0x20000534
 80088fc:	08009db0 	.word	0x08009db0

08008900 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008906:	4b0f      	ldr	r3, [pc, #60]	@ (8008944 <Get_SerialNum+0x44>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800890c:	4b0e      	ldr	r3, [pc, #56]	@ (8008948 <Get_SerialNum+0x48>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008912:	4b0e      	ldr	r3, [pc, #56]	@ (800894c <Get_SerialNum+0x4c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4413      	add	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d009      	beq.n	800893a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008926:	2208      	movs	r2, #8
 8008928:	4909      	ldr	r1, [pc, #36]	@ (8008950 <Get_SerialNum+0x50>)
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 f814 	bl	8008958 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008930:	2204      	movs	r2, #4
 8008932:	4908      	ldr	r1, [pc, #32]	@ (8008954 <Get_SerialNum+0x54>)
 8008934:	68b8      	ldr	r0, [r7, #8]
 8008936:	f000 f80f 	bl	8008958 <IntToUnicode>
  }
}
 800893a:	bf00      	nop
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	1ffff7e8 	.word	0x1ffff7e8
 8008948:	1ffff7ec 	.word	0x1ffff7ec
 800894c:	1ffff7f0 	.word	0x1ffff7f0
 8008950:	2000014a 	.word	0x2000014a
 8008954:	2000015a 	.word	0x2000015a

08008958 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008958:	b480      	push	{r7}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	4613      	mov	r3, r2
 8008964:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800896a:	2300      	movs	r3, #0
 800896c:	75fb      	strb	r3, [r7, #23]
 800896e:	e027      	b.n	80089c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	0f1b      	lsrs	r3, r3, #28
 8008974:	2b09      	cmp	r3, #9
 8008976:	d80b      	bhi.n	8008990 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	0f1b      	lsrs	r3, r3, #28
 800897c:	b2da      	uxtb	r2, r3
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	4619      	mov	r1, r3
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	440b      	add	r3, r1
 8008988:	3230      	adds	r2, #48	@ 0x30
 800898a:	b2d2      	uxtb	r2, r2
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	e00a      	b.n	80089a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	0f1b      	lsrs	r3, r3, #28
 8008994:	b2da      	uxtb	r2, r3
 8008996:	7dfb      	ldrb	r3, [r7, #23]
 8008998:	005b      	lsls	r3, r3, #1
 800899a:	4619      	mov	r1, r3
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	440b      	add	r3, r1
 80089a0:	3237      	adds	r2, #55	@ 0x37
 80089a2:	b2d2      	uxtb	r2, r2
 80089a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	011b      	lsls	r3, r3, #4
 80089aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	3301      	adds	r3, #1
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	4413      	add	r3, r2
 80089b6:	2200      	movs	r2, #0
 80089b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
 80089bc:	3301      	adds	r3, #1
 80089be:	75fb      	strb	r3, [r7, #23]
 80089c0:	7dfa      	ldrb	r2, [r7, #23]
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d3d3      	bcc.n	8008970 <IntToUnicode+0x18>
  }
}
 80089c8:	bf00      	nop
 80089ca:	bf00      	nop
 80089cc:	371c      	adds	r7, #28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bc80      	pop	{r7}
 80089d2:	4770      	bx	lr

080089d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a0d      	ldr	r2, [pc, #52]	@ (8008a18 <HAL_PCD_MspInit+0x44>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d113      	bne.n	8008a0e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80089e6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a1c <HAL_PCD_MspInit+0x48>)
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	4a0c      	ldr	r2, [pc, #48]	@ (8008a1c <HAL_PCD_MspInit+0x48>)
 80089ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80089f0:	61d3      	str	r3, [r2, #28]
 80089f2:	4b0a      	ldr	r3, [pc, #40]	@ (8008a1c <HAL_PCD_MspInit+0x48>)
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80089fe:	2200      	movs	r2, #0
 8008a00:	2100      	movs	r1, #0
 8008a02:	2014      	movs	r0, #20
 8008a04:	f7f9 fb63 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008a08:	2014      	movs	r0, #20
 8008a0a:	f7f9 fb7c 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008a0e:	bf00      	nop
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	40005c00 	.word	0x40005c00
 8008a1c:	40021000 	.word	0x40021000

08008a20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008a34:	4619      	mov	r1, r3
 8008a36:	4610      	mov	r0, r2
 8008a38:	f7fe feac 	bl	8007794 <USBD_LL_SetupStage>
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	6879      	ldr	r1, [r7, #4]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	440b      	add	r3, r1
 8008a64:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	f7fe fede 	bl	800782e <USBD_LL_DataOutStage>
}
 8008a72:	bf00      	nop
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	460b      	mov	r3, r1
 8008a84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008a8c:	78fa      	ldrb	r2, [r7, #3]
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	00db      	lsls	r3, r3, #3
 8008a98:	440b      	add	r3, r1
 8008a9a:	3324      	adds	r3, #36	@ 0x24
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	78fb      	ldrb	r3, [r7, #3]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	f7fe ff35 	bl	8007910 <USBD_LL_DataInStage>
}
 8008aa6:	bf00      	nop
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff f845 	bl	8007b4c <USBD_LL_SOF>
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b084      	sub	sp, #16
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	799b      	ldrb	r3, [r3, #6]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d001      	beq.n	8008ae2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ade:	f7f8 fc6b 	bl	80013b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ae8:	7bfa      	ldrb	r2, [r7, #15]
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe fff5 	bl	8007adc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fe ffae 	bl	8007a5a <USBD_LL_Reset>
}
 8008afe:	bf00      	nop
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fe ffef 	bl	8007afa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	7a9b      	ldrb	r3, [r3, #10]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d005      	beq.n	8008b30 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b24:	4b04      	ldr	r3, [pc, #16]	@ (8008b38 <HAL_PCD_SuspendCallback+0x30>)
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	4a03      	ldr	r2, [pc, #12]	@ (8008b38 <HAL_PCD_SuspendCallback+0x30>)
 8008b2a:	f043 0306 	orr.w	r3, r3, #6
 8008b2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b30:	bf00      	nop
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	e000ed00 	.word	0xe000ed00

08008b3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe ffe9 	bl	8007b22 <USBD_LL_Resume>
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b60:	4a1f      	ldr	r2, [pc, #124]	@ (8008be0 <USBD_LL_Init+0x88>)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8008be0 <USBD_LL_Init+0x88>)
 8008b6c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008b70:	4b1b      	ldr	r3, [pc, #108]	@ (8008be0 <USBD_LL_Init+0x88>)
 8008b72:	4a1c      	ldr	r2, [pc, #112]	@ (8008be4 <USBD_LL_Init+0x8c>)
 8008b74:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b76:	4b1a      	ldr	r3, [pc, #104]	@ (8008be0 <USBD_LL_Init+0x88>)
 8008b78:	2208      	movs	r2, #8
 8008b7a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b7c:	4b18      	ldr	r3, [pc, #96]	@ (8008be0 <USBD_LL_Init+0x88>)
 8008b7e:	2202      	movs	r2, #2
 8008b80:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008b82:	4b17      	ldr	r3, [pc, #92]	@ (8008be0 <USBD_LL_Init+0x88>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008b88:	4b15      	ldr	r3, [pc, #84]	@ (8008be0 <USBD_LL_Init+0x88>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008b8e:	4b14      	ldr	r3, [pc, #80]	@ (8008be0 <USBD_LL_Init+0x88>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008b94:	4812      	ldr	r0, [pc, #72]	@ (8008be0 <USBD_LL_Init+0x88>)
 8008b96:	f7f9 fe43 	bl	8002820 <HAL_PCD_Init>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008ba0:	f7f8 fc0a 	bl	80013b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008baa:	2318      	movs	r3, #24
 8008bac:	2200      	movs	r2, #0
 8008bae:	2100      	movs	r1, #0
 8008bb0:	f7fb fb3d 	bl	800422e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bba:	2358      	movs	r3, #88	@ 0x58
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2180      	movs	r1, #128	@ 0x80
 8008bc0:	f7fb fb35 	bl	800422e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2181      	movs	r1, #129	@ 0x81
 8008bd2:	f7fb fb2c 	bl	800422e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	20000734 	.word	0x20000734
 8008be4:	40005c00 	.word	0x40005c00

08008be8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7f9 ff04 	bl	8002a0c <HAL_PCD_Start>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 f93a 	bl	8008e84 <USBD_Get_USB_Status>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	4608      	mov	r0, r1
 8008c28:	4611      	mov	r1, r2
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	70fb      	strb	r3, [r7, #3]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70bb      	strb	r3, [r7, #2]
 8008c34:	4613      	mov	r3, r2
 8008c36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c46:	78bb      	ldrb	r3, [r7, #2]
 8008c48:	883a      	ldrh	r2, [r7, #0]
 8008c4a:	78f9      	ldrb	r1, [r7, #3]
 8008c4c:	f7fa f858 	bl	8002d00 <HAL_PCD_EP_Open>
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 f914 	bl	8008e84 <USBD_Get_USB_Status>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c84:	78fa      	ldrb	r2, [r7, #3]
 8008c86:	4611      	mov	r1, r2
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fa f896 	bl	8002dba <HAL_PCD_EP_Close>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f8f5 	bl	8008e84 <USBD_Get_USB_Status>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cc2:	78fa      	ldrb	r2, [r7, #3]
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fa f927 	bl	8002f1a <HAL_PCD_EP_SetStall>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 f8d6 	bl	8008e84 <USBD_Get_USB_Status>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d00:	78fa      	ldrb	r2, [r7, #3]
 8008d02:	4611      	mov	r1, r2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fa f968 	bl	8002fda <HAL_PCD_EP_ClrStall>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 f8b7 	bl	8008e84 <USBD_Get_USB_Status>
 8008d16:	4603      	mov	r3, r0
 8008d18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	da0b      	bge.n	8008d58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d46:	68f9      	ldr	r1, [r7, #12]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	440b      	add	r3, r1
 8008d52:	3312      	adds	r3, #18
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	e00b      	b.n	8008d70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d5e:	68f9      	ldr	r1, [r7, #12]
 8008d60:	4613      	mov	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	440b      	add	r3, r1
 8008d6a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008d6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bc80      	pop	{r7}
 8008d78:	4770      	bx	lr

08008d7a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d94:	78fa      	ldrb	r2, [r7, #3]
 8008d96:	4611      	mov	r1, r2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7f9 ff8d 	bl	8002cb8 <HAL_PCD_SetAddress>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 f86d 	bl	8008e84 <USBD_Get_USB_Status>
 8008daa:	4603      	mov	r3, r0
 8008dac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	72fb      	strb	r3, [r7, #11]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008dda:	893b      	ldrh	r3, [r7, #8]
 8008ddc:	7af9      	ldrb	r1, [r7, #11]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	f7fa f864 	bl	8002eac <HAL_PCD_EP_Transmit>
 8008de4:	4603      	mov	r3, r0
 8008de6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 f84a 	bl	8008e84 <USBD_Get_USB_Status>
 8008df0:	4603      	mov	r3, r0
 8008df2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008df4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b086      	sub	sp, #24
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	72fb      	strb	r3, [r7, #11]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e20:	893b      	ldrh	r3, [r7, #8]
 8008e22:	7af9      	ldrb	r1, [r7, #11]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	f7fa f810 	bl	8002e4a <HAL_PCD_EP_Receive>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 f827 	bl	8008e84 <USBD_Get_USB_Status>
 8008e36:	4603      	mov	r3, r0
 8008e38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e4c:	4b02      	ldr	r3, [pc, #8]	@ (8008e58 <USBD_static_malloc+0x14>)
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bc80      	pop	{r7}
 8008e56:	4770      	bx	lr
 8008e58:	20000a0c 	.word	0x20000a0c

08008e5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]

}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bc80      	pop	{r7}
 8008e6c:	4770      	bx	lr

08008e6e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	460b      	mov	r3, r1
 8008e78:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008e7a:	bf00      	nop
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bc80      	pop	{r7}
 8008e82:	4770      	bx	lr

08008e84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	d817      	bhi.n	8008ec8 <USBD_Get_USB_Status+0x44>
 8008e98:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea0 <USBD_Get_USB_Status+0x1c>)
 8008e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9e:	bf00      	nop
 8008ea0:	08008eb1 	.word	0x08008eb1
 8008ea4:	08008eb7 	.word	0x08008eb7
 8008ea8:	08008ebd 	.word	0x08008ebd
 8008eac:	08008ec3 	.word	0x08008ec3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb4:	e00b      	b.n	8008ece <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eba:	e008      	b.n	8008ece <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec0:	e005      	b.n	8008ece <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec6:	e002      	b.n	8008ece <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ec8:	2302      	movs	r3, #2
 8008eca:	73fb      	strb	r3, [r7, #15]
    break;
 8008ecc:	bf00      	nop
  }
  return usb_status;
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3714      	adds	r7, #20
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bc80      	pop	{r7}
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop

08008edc <memset>:
 8008edc:	4603      	mov	r3, r0
 8008ede:	4402      	add	r2, r0
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d100      	bne.n	8008ee6 <memset+0xa>
 8008ee4:	4770      	bx	lr
 8008ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eea:	e7f9      	b.n	8008ee0 <memset+0x4>

08008eec <__errno>:
 8008eec:	4b01      	ldr	r3, [pc, #4]	@ (8008ef4 <__errno+0x8>)
 8008eee:	6818      	ldr	r0, [r3, #0]
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	20000164 	.word	0x20000164

08008ef8 <__libc_init_array>:
 8008ef8:	b570      	push	{r4, r5, r6, lr}
 8008efa:	2600      	movs	r6, #0
 8008efc:	4d0c      	ldr	r5, [pc, #48]	@ (8008f30 <__libc_init_array+0x38>)
 8008efe:	4c0d      	ldr	r4, [pc, #52]	@ (8008f34 <__libc_init_array+0x3c>)
 8008f00:	1b64      	subs	r4, r4, r5
 8008f02:	10a4      	asrs	r4, r4, #2
 8008f04:	42a6      	cmp	r6, r4
 8008f06:	d109      	bne.n	8008f1c <__libc_init_array+0x24>
 8008f08:	f000 ff2a 	bl	8009d60 <_init>
 8008f0c:	2600      	movs	r6, #0
 8008f0e:	4d0a      	ldr	r5, [pc, #40]	@ (8008f38 <__libc_init_array+0x40>)
 8008f10:	4c0a      	ldr	r4, [pc, #40]	@ (8008f3c <__libc_init_array+0x44>)
 8008f12:	1b64      	subs	r4, r4, r5
 8008f14:	10a4      	asrs	r4, r4, #2
 8008f16:	42a6      	cmp	r6, r4
 8008f18:	d105      	bne.n	8008f26 <__libc_init_array+0x2e>
 8008f1a:	bd70      	pop	{r4, r5, r6, pc}
 8008f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f20:	4798      	blx	r3
 8008f22:	3601      	adds	r6, #1
 8008f24:	e7ee      	b.n	8008f04 <__libc_init_array+0xc>
 8008f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f2a:	4798      	blx	r3
 8008f2c:	3601      	adds	r6, #1
 8008f2e:	e7f2      	b.n	8008f16 <__libc_init_array+0x1e>
 8008f30:	08009e18 	.word	0x08009e18
 8008f34:	08009e18 	.word	0x08009e18
 8008f38:	08009e18 	.word	0x08009e18
 8008f3c:	08009e1c 	.word	0x08009e1c

08008f40 <pow>:
 8008f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f44:	4614      	mov	r4, r2
 8008f46:	461d      	mov	r5, r3
 8008f48:	4680      	mov	r8, r0
 8008f4a:	4689      	mov	r9, r1
 8008f4c:	f000 f868 	bl	8009020 <__ieee754_pow>
 8008f50:	4622      	mov	r2, r4
 8008f52:	4606      	mov	r6, r0
 8008f54:	460f      	mov	r7, r1
 8008f56:	462b      	mov	r3, r5
 8008f58:	4620      	mov	r0, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	f7f7 fd4e 	bl	80009fc <__aeabi_dcmpun>
 8008f60:	bbc8      	cbnz	r0, 8008fd6 <pow+0x96>
 8008f62:	2200      	movs	r2, #0
 8008f64:	2300      	movs	r3, #0
 8008f66:	4640      	mov	r0, r8
 8008f68:	4649      	mov	r1, r9
 8008f6a:	f7f7 fd15 	bl	8000998 <__aeabi_dcmpeq>
 8008f6e:	b1b8      	cbz	r0, 8008fa0 <pow+0x60>
 8008f70:	2200      	movs	r2, #0
 8008f72:	2300      	movs	r3, #0
 8008f74:	4620      	mov	r0, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	f7f7 fd0e 	bl	8000998 <__aeabi_dcmpeq>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d141      	bne.n	8009004 <pow+0xc4>
 8008f80:	4620      	mov	r0, r4
 8008f82:	4629      	mov	r1, r5
 8008f84:	f000 f844 	bl	8009010 <finite>
 8008f88:	b328      	cbz	r0, 8008fd6 <pow+0x96>
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4620      	mov	r0, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	f7f7 fd0b 	bl	80009ac <__aeabi_dcmplt>
 8008f96:	b1f0      	cbz	r0, 8008fd6 <pow+0x96>
 8008f98:	f7ff ffa8 	bl	8008eec <__errno>
 8008f9c:	2322      	movs	r3, #34	@ 0x22
 8008f9e:	e019      	b.n	8008fd4 <pow+0x94>
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	f000 f834 	bl	8009010 <finite>
 8008fa8:	b9c8      	cbnz	r0, 8008fde <pow+0x9e>
 8008faa:	4640      	mov	r0, r8
 8008fac:	4649      	mov	r1, r9
 8008fae:	f000 f82f 	bl	8009010 <finite>
 8008fb2:	b1a0      	cbz	r0, 8008fde <pow+0x9e>
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	f000 f82a 	bl	8009010 <finite>
 8008fbc:	b178      	cbz	r0, 8008fde <pow+0x9e>
 8008fbe:	4632      	mov	r2, r6
 8008fc0:	463b      	mov	r3, r7
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	f7f7 fd19 	bl	80009fc <__aeabi_dcmpun>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d0e4      	beq.n	8008f98 <pow+0x58>
 8008fce:	f7ff ff8d 	bl	8008eec <__errno>
 8008fd2:	2321      	movs	r3, #33	@ 0x21
 8008fd4:	6003      	str	r3, [r0, #0]
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	4639      	mov	r1, r7
 8008fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	4639      	mov	r1, r7
 8008fe6:	f7f7 fcd7 	bl	8000998 <__aeabi_dcmpeq>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d0f3      	beq.n	8008fd6 <pow+0x96>
 8008fee:	4640      	mov	r0, r8
 8008ff0:	4649      	mov	r1, r9
 8008ff2:	f000 f80d 	bl	8009010 <finite>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d0ed      	beq.n	8008fd6 <pow+0x96>
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	f000 f807 	bl	8009010 <finite>
 8009002:	e7c8      	b.n	8008f96 <pow+0x56>
 8009004:	2600      	movs	r6, #0
 8009006:	4f01      	ldr	r7, [pc, #4]	@ (800900c <pow+0xcc>)
 8009008:	e7e5      	b.n	8008fd6 <pow+0x96>
 800900a:	bf00      	nop
 800900c:	3ff00000 	.word	0x3ff00000

08009010 <finite>:
 8009010:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009014:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009018:	0fc0      	lsrs	r0, r0, #31
 800901a:	4770      	bx	lr
 800901c:	0000      	movs	r0, r0
	...

08009020 <__ieee754_pow>:
 8009020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	b091      	sub	sp, #68	@ 0x44
 8009026:	e9cd 2300 	strd	r2, r3, [sp]
 800902a:	468b      	mov	fp, r1
 800902c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8009030:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8009034:	4682      	mov	sl, r0
 8009036:	ea57 0001 	orrs.w	r0, r7, r1
 800903a:	d112      	bne.n	8009062 <__ieee754_pow+0x42>
 800903c:	4653      	mov	r3, sl
 800903e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8009042:	18db      	adds	r3, r3, r3
 8009044:	4152      	adcs	r2, r2
 8009046:	4298      	cmp	r0, r3
 8009048:	4b91      	ldr	r3, [pc, #580]	@ (8009290 <__ieee754_pow+0x270>)
 800904a:	4193      	sbcs	r3, r2
 800904c:	f080 84ce 	bcs.w	80099ec <__ieee754_pow+0x9cc>
 8009050:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009054:	4650      	mov	r0, sl
 8009056:	4659      	mov	r1, fp
 8009058:	f7f7 f880 	bl	800015c <__adddf3>
 800905c:	b011      	add	sp, #68	@ 0x44
 800905e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009062:	4b8c      	ldr	r3, [pc, #560]	@ (8009294 <__ieee754_pow+0x274>)
 8009064:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8009068:	429e      	cmp	r6, r3
 800906a:	465d      	mov	r5, fp
 800906c:	46d1      	mov	r9, sl
 800906e:	d807      	bhi.n	8009080 <__ieee754_pow+0x60>
 8009070:	d102      	bne.n	8009078 <__ieee754_pow+0x58>
 8009072:	f1ba 0f00 	cmp.w	sl, #0
 8009076:	d1eb      	bne.n	8009050 <__ieee754_pow+0x30>
 8009078:	429f      	cmp	r7, r3
 800907a:	d801      	bhi.n	8009080 <__ieee754_pow+0x60>
 800907c:	d10f      	bne.n	800909e <__ieee754_pow+0x7e>
 800907e:	b171      	cbz	r1, 800909e <__ieee754_pow+0x7e>
 8009080:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009084:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009088:	ea55 0509 	orrs.w	r5, r5, r9
 800908c:	d1e0      	bne.n	8009050 <__ieee754_pow+0x30>
 800908e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009092:	18db      	adds	r3, r3, r3
 8009094:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009098:	4152      	adcs	r2, r2
 800909a:	429d      	cmp	r5, r3
 800909c:	e7d4      	b.n	8009048 <__ieee754_pow+0x28>
 800909e:	2d00      	cmp	r5, #0
 80090a0:	4633      	mov	r3, r6
 80090a2:	da39      	bge.n	8009118 <__ieee754_pow+0xf8>
 80090a4:	4a7c      	ldr	r2, [pc, #496]	@ (8009298 <__ieee754_pow+0x278>)
 80090a6:	4297      	cmp	r7, r2
 80090a8:	d84e      	bhi.n	8009148 <__ieee754_pow+0x128>
 80090aa:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80090ae:	4297      	cmp	r7, r2
 80090b0:	f240 84ab 	bls.w	8009a0a <__ieee754_pow+0x9ea>
 80090b4:	153a      	asrs	r2, r7, #20
 80090b6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80090ba:	2a14      	cmp	r2, #20
 80090bc:	dd0f      	ble.n	80090de <__ieee754_pow+0xbe>
 80090be:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80090c2:	fa21 f402 	lsr.w	r4, r1, r2
 80090c6:	fa04 f202 	lsl.w	r2, r4, r2
 80090ca:	428a      	cmp	r2, r1
 80090cc:	f040 849d 	bne.w	8009a0a <__ieee754_pow+0x9ea>
 80090d0:	f004 0401 	and.w	r4, r4, #1
 80090d4:	f1c4 0402 	rsb	r4, r4, #2
 80090d8:	2900      	cmp	r1, #0
 80090da:	d15a      	bne.n	8009192 <__ieee754_pow+0x172>
 80090dc:	e00e      	b.n	80090fc <__ieee754_pow+0xdc>
 80090de:	2900      	cmp	r1, #0
 80090e0:	d156      	bne.n	8009190 <__ieee754_pow+0x170>
 80090e2:	f1c2 0214 	rsb	r2, r2, #20
 80090e6:	fa47 f402 	asr.w	r4, r7, r2
 80090ea:	fa04 f202 	lsl.w	r2, r4, r2
 80090ee:	42ba      	cmp	r2, r7
 80090f0:	f040 8488 	bne.w	8009a04 <__ieee754_pow+0x9e4>
 80090f4:	f004 0401 	and.w	r4, r4, #1
 80090f8:	f1c4 0402 	rsb	r4, r4, #2
 80090fc:	4a67      	ldr	r2, [pc, #412]	@ (800929c <__ieee754_pow+0x27c>)
 80090fe:	4297      	cmp	r7, r2
 8009100:	d130      	bne.n	8009164 <__ieee754_pow+0x144>
 8009102:	f1b8 0f00 	cmp.w	r8, #0
 8009106:	f280 8479 	bge.w	80099fc <__ieee754_pow+0x9dc>
 800910a:	4652      	mov	r2, sl
 800910c:	465b      	mov	r3, fp
 800910e:	2000      	movs	r0, #0
 8009110:	4962      	ldr	r1, [pc, #392]	@ (800929c <__ieee754_pow+0x27c>)
 8009112:	f7f7 fb03 	bl	800071c <__aeabi_ddiv>
 8009116:	e7a1      	b.n	800905c <__ieee754_pow+0x3c>
 8009118:	2400      	movs	r4, #0
 800911a:	2900      	cmp	r1, #0
 800911c:	d139      	bne.n	8009192 <__ieee754_pow+0x172>
 800911e:	4a5d      	ldr	r2, [pc, #372]	@ (8009294 <__ieee754_pow+0x274>)
 8009120:	4297      	cmp	r7, r2
 8009122:	d1eb      	bne.n	80090fc <__ieee754_pow+0xdc>
 8009124:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8009128:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800912c:	ea53 0309 	orrs.w	r3, r3, r9
 8009130:	f000 845c 	beq.w	80099ec <__ieee754_pow+0x9cc>
 8009134:	4b5a      	ldr	r3, [pc, #360]	@ (80092a0 <__ieee754_pow+0x280>)
 8009136:	429e      	cmp	r6, r3
 8009138:	d908      	bls.n	800914c <__ieee754_pow+0x12c>
 800913a:	f1b8 0f00 	cmp.w	r8, #0
 800913e:	f2c0 8459 	blt.w	80099f4 <__ieee754_pow+0x9d4>
 8009142:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009146:	e789      	b.n	800905c <__ieee754_pow+0x3c>
 8009148:	2402      	movs	r4, #2
 800914a:	e7e6      	b.n	800911a <__ieee754_pow+0xfa>
 800914c:	f1b8 0f00 	cmp.w	r8, #0
 8009150:	f04f 0000 	mov.w	r0, #0
 8009154:	f04f 0100 	mov.w	r1, #0
 8009158:	da80      	bge.n	800905c <__ieee754_pow+0x3c>
 800915a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800915e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009162:	e77b      	b.n	800905c <__ieee754_pow+0x3c>
 8009164:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8009168:	d106      	bne.n	8009178 <__ieee754_pow+0x158>
 800916a:	4652      	mov	r2, sl
 800916c:	465b      	mov	r3, fp
 800916e:	4650      	mov	r0, sl
 8009170:	4659      	mov	r1, fp
 8009172:	f7f7 f9a9 	bl	80004c8 <__aeabi_dmul>
 8009176:	e771      	b.n	800905c <__ieee754_pow+0x3c>
 8009178:	4a4a      	ldr	r2, [pc, #296]	@ (80092a4 <__ieee754_pow+0x284>)
 800917a:	4590      	cmp	r8, r2
 800917c:	d109      	bne.n	8009192 <__ieee754_pow+0x172>
 800917e:	2d00      	cmp	r5, #0
 8009180:	db07      	blt.n	8009192 <__ieee754_pow+0x172>
 8009182:	4650      	mov	r0, sl
 8009184:	4659      	mov	r1, fp
 8009186:	b011      	add	sp, #68	@ 0x44
 8009188:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	f000 bd12 	b.w	8009bb4 <__ieee754_sqrt>
 8009190:	2400      	movs	r4, #0
 8009192:	4650      	mov	r0, sl
 8009194:	4659      	mov	r1, fp
 8009196:	9302      	str	r3, [sp, #8]
 8009198:	f000 fc6a 	bl	8009a70 <fabs>
 800919c:	9b02      	ldr	r3, [sp, #8]
 800919e:	f1b9 0f00 	cmp.w	r9, #0
 80091a2:	d127      	bne.n	80091f4 <__ieee754_pow+0x1d4>
 80091a4:	4a3d      	ldr	r2, [pc, #244]	@ (800929c <__ieee754_pow+0x27c>)
 80091a6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80091aa:	4594      	cmp	ip, r2
 80091ac:	d000      	beq.n	80091b0 <__ieee754_pow+0x190>
 80091ae:	bb0e      	cbnz	r6, 80091f4 <__ieee754_pow+0x1d4>
 80091b0:	f1b8 0f00 	cmp.w	r8, #0
 80091b4:	da05      	bge.n	80091c2 <__ieee754_pow+0x1a2>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	2000      	movs	r0, #0
 80091bc:	4937      	ldr	r1, [pc, #220]	@ (800929c <__ieee754_pow+0x27c>)
 80091be:	f7f7 faad 	bl	800071c <__aeabi_ddiv>
 80091c2:	2d00      	cmp	r5, #0
 80091c4:	f6bf af4a 	bge.w	800905c <__ieee754_pow+0x3c>
 80091c8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80091cc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80091d0:	4326      	orrs	r6, r4
 80091d2:	d108      	bne.n	80091e6 <__ieee754_pow+0x1c6>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4610      	mov	r0, r2
 80091da:	4619      	mov	r1, r3
 80091dc:	f7f6 ffbc 	bl	8000158 <__aeabi_dsub>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	e795      	b.n	8009112 <__ieee754_pow+0xf2>
 80091e6:	2c01      	cmp	r4, #1
 80091e8:	f47f af38 	bne.w	800905c <__ieee754_pow+0x3c>
 80091ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80091f0:	4619      	mov	r1, r3
 80091f2:	e733      	b.n	800905c <__ieee754_pow+0x3c>
 80091f4:	0fea      	lsrs	r2, r5, #31
 80091f6:	3a01      	subs	r2, #1
 80091f8:	ea52 0c04 	orrs.w	ip, r2, r4
 80091fc:	d102      	bne.n	8009204 <__ieee754_pow+0x1e4>
 80091fe:	4652      	mov	r2, sl
 8009200:	465b      	mov	r3, fp
 8009202:	e7e9      	b.n	80091d8 <__ieee754_pow+0x1b8>
 8009204:	f04f 0900 	mov.w	r9, #0
 8009208:	3c01      	subs	r4, #1
 800920a:	4314      	orrs	r4, r2
 800920c:	bf14      	ite	ne
 800920e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800929c <__ieee754_pow+0x27c>
 8009212:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80092a8 <__ieee754_pow+0x288>
 8009216:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800921a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800921e:	f240 8107 	bls.w	8009430 <__ieee754_pow+0x410>
 8009222:	4b22      	ldr	r3, [pc, #136]	@ (80092ac <__ieee754_pow+0x28c>)
 8009224:	429f      	cmp	r7, r3
 8009226:	4b1e      	ldr	r3, [pc, #120]	@ (80092a0 <__ieee754_pow+0x280>)
 8009228:	d913      	bls.n	8009252 <__ieee754_pow+0x232>
 800922a:	429e      	cmp	r6, r3
 800922c:	d808      	bhi.n	8009240 <__ieee754_pow+0x220>
 800922e:	f1b8 0f00 	cmp.w	r8, #0
 8009232:	da08      	bge.n	8009246 <__ieee754_pow+0x226>
 8009234:	2000      	movs	r0, #0
 8009236:	b011      	add	sp, #68	@ 0x44
 8009238:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	f000 bcb4 	b.w	8009ba8 <__math_oflow>
 8009240:	f1b8 0f00 	cmp.w	r8, #0
 8009244:	dcf6      	bgt.n	8009234 <__ieee754_pow+0x214>
 8009246:	2000      	movs	r0, #0
 8009248:	b011      	add	sp, #68	@ 0x44
 800924a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924e:	f000 bca6 	b.w	8009b9e <__math_uflow>
 8009252:	429e      	cmp	r6, r3
 8009254:	d20c      	bcs.n	8009270 <__ieee754_pow+0x250>
 8009256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800925a:	2200      	movs	r2, #0
 800925c:	2300      	movs	r3, #0
 800925e:	f7f7 fba5 	bl	80009ac <__aeabi_dcmplt>
 8009262:	3800      	subs	r0, #0
 8009264:	bf18      	it	ne
 8009266:	2001      	movne	r0, #1
 8009268:	f1b8 0f00 	cmp.w	r8, #0
 800926c:	daec      	bge.n	8009248 <__ieee754_pow+0x228>
 800926e:	e7e2      	b.n	8009236 <__ieee754_pow+0x216>
 8009270:	4b0a      	ldr	r3, [pc, #40]	@ (800929c <__ieee754_pow+0x27c>)
 8009272:	2200      	movs	r2, #0
 8009274:	429e      	cmp	r6, r3
 8009276:	d91b      	bls.n	80092b0 <__ieee754_pow+0x290>
 8009278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800927c:	2300      	movs	r3, #0
 800927e:	f7f7 fb95 	bl	80009ac <__aeabi_dcmplt>
 8009282:	3800      	subs	r0, #0
 8009284:	bf18      	it	ne
 8009286:	2001      	movne	r0, #1
 8009288:	f1b8 0f00 	cmp.w	r8, #0
 800928c:	dcd3      	bgt.n	8009236 <__ieee754_pow+0x216>
 800928e:	e7db      	b.n	8009248 <__ieee754_pow+0x228>
 8009290:	fff00000 	.word	0xfff00000
 8009294:	7ff00000 	.word	0x7ff00000
 8009298:	433fffff 	.word	0x433fffff
 800929c:	3ff00000 	.word	0x3ff00000
 80092a0:	3fefffff 	.word	0x3fefffff
 80092a4:	3fe00000 	.word	0x3fe00000
 80092a8:	bff00000 	.word	0xbff00000
 80092ac:	43f00000 	.word	0x43f00000
 80092b0:	4b5b      	ldr	r3, [pc, #364]	@ (8009420 <__ieee754_pow+0x400>)
 80092b2:	f7f6 ff51 	bl	8000158 <__aeabi_dsub>
 80092b6:	a352      	add	r3, pc, #328	@ (adr r3, 8009400 <__ieee754_pow+0x3e0>)
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	4604      	mov	r4, r0
 80092be:	460d      	mov	r5, r1
 80092c0:	f7f7 f902 	bl	80004c8 <__aeabi_dmul>
 80092c4:	a350      	add	r3, pc, #320	@ (adr r3, 8009408 <__ieee754_pow+0x3e8>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	4606      	mov	r6, r0
 80092cc:	460f      	mov	r7, r1
 80092ce:	4620      	mov	r0, r4
 80092d0:	4629      	mov	r1, r5
 80092d2:	f7f7 f8f9 	bl	80004c8 <__aeabi_dmul>
 80092d6:	2200      	movs	r2, #0
 80092d8:	4682      	mov	sl, r0
 80092da:	468b      	mov	fp, r1
 80092dc:	4620      	mov	r0, r4
 80092de:	4629      	mov	r1, r5
 80092e0:	4b50      	ldr	r3, [pc, #320]	@ (8009424 <__ieee754_pow+0x404>)
 80092e2:	f7f7 f8f1 	bl	80004c8 <__aeabi_dmul>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	a149      	add	r1, pc, #292	@ (adr r1, 8009410 <__ieee754_pow+0x3f0>)
 80092ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092f0:	f7f6 ff32 	bl	8000158 <__aeabi_dsub>
 80092f4:	4622      	mov	r2, r4
 80092f6:	462b      	mov	r3, r5
 80092f8:	f7f7 f8e6 	bl	80004c8 <__aeabi_dmul>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	2000      	movs	r0, #0
 8009302:	4949      	ldr	r1, [pc, #292]	@ (8009428 <__ieee754_pow+0x408>)
 8009304:	f7f6 ff28 	bl	8000158 <__aeabi_dsub>
 8009308:	4622      	mov	r2, r4
 800930a:	4680      	mov	r8, r0
 800930c:	4689      	mov	r9, r1
 800930e:	462b      	mov	r3, r5
 8009310:	4620      	mov	r0, r4
 8009312:	4629      	mov	r1, r5
 8009314:	f7f7 f8d8 	bl	80004c8 <__aeabi_dmul>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4640      	mov	r0, r8
 800931e:	4649      	mov	r1, r9
 8009320:	f7f7 f8d2 	bl	80004c8 <__aeabi_dmul>
 8009324:	a33c      	add	r3, pc, #240	@ (adr r3, 8009418 <__ieee754_pow+0x3f8>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f7 f8cd 	bl	80004c8 <__aeabi_dmul>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4650      	mov	r0, sl
 8009334:	4659      	mov	r1, fp
 8009336:	f7f6 ff0f 	bl	8000158 <__aeabi_dsub>
 800933a:	2400      	movs	r4, #0
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4680      	mov	r8, r0
 8009342:	4689      	mov	r9, r1
 8009344:	4630      	mov	r0, r6
 8009346:	4639      	mov	r1, r7
 8009348:	f7f6 ff08 	bl	800015c <__adddf3>
 800934c:	4632      	mov	r2, r6
 800934e:	463b      	mov	r3, r7
 8009350:	4620      	mov	r0, r4
 8009352:	460d      	mov	r5, r1
 8009354:	f7f6 ff00 	bl	8000158 <__aeabi_dsub>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	4640      	mov	r0, r8
 800935e:	4649      	mov	r1, r9
 8009360:	f7f6 fefa 	bl	8000158 <__aeabi_dsub>
 8009364:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009368:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800936c:	2300      	movs	r3, #0
 800936e:	9304      	str	r3, [sp, #16]
 8009370:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009374:	4606      	mov	r6, r0
 8009376:	460f      	mov	r7, r1
 8009378:	e9dd 0100 	ldrd	r0, r1, [sp]
 800937c:	4652      	mov	r2, sl
 800937e:	465b      	mov	r3, fp
 8009380:	f7f6 feea 	bl	8000158 <__aeabi_dsub>
 8009384:	4622      	mov	r2, r4
 8009386:	462b      	mov	r3, r5
 8009388:	f7f7 f89e 	bl	80004c8 <__aeabi_dmul>
 800938c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009390:	4680      	mov	r8, r0
 8009392:	4689      	mov	r9, r1
 8009394:	4630      	mov	r0, r6
 8009396:	4639      	mov	r1, r7
 8009398:	f7f7 f896 	bl	80004c8 <__aeabi_dmul>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4640      	mov	r0, r8
 80093a2:	4649      	mov	r1, r9
 80093a4:	f7f6 feda 	bl	800015c <__adddf3>
 80093a8:	4652      	mov	r2, sl
 80093aa:	465b      	mov	r3, fp
 80093ac:	4606      	mov	r6, r0
 80093ae:	460f      	mov	r7, r1
 80093b0:	4620      	mov	r0, r4
 80093b2:	4629      	mov	r1, r5
 80093b4:	f7f7 f888 	bl	80004c8 <__aeabi_dmul>
 80093b8:	460b      	mov	r3, r1
 80093ba:	4602      	mov	r2, r0
 80093bc:	4680      	mov	r8, r0
 80093be:	4689      	mov	r9, r1
 80093c0:	4630      	mov	r0, r6
 80093c2:	4639      	mov	r1, r7
 80093c4:	f7f6 feca 	bl	800015c <__adddf3>
 80093c8:	4b18      	ldr	r3, [pc, #96]	@ (800942c <__ieee754_pow+0x40c>)
 80093ca:	4604      	mov	r4, r0
 80093cc:	4299      	cmp	r1, r3
 80093ce:	460d      	mov	r5, r1
 80093d0:	468a      	mov	sl, r1
 80093d2:	468b      	mov	fp, r1
 80093d4:	f340 82e0 	ble.w	8009998 <__ieee754_pow+0x978>
 80093d8:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80093dc:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80093e0:	4303      	orrs	r3, r0
 80093e2:	f000 81df 	beq.w	80097a4 <__ieee754_pow+0x784>
 80093e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ea:	2200      	movs	r2, #0
 80093ec:	2300      	movs	r3, #0
 80093ee:	f7f7 fadd 	bl	80009ac <__aeabi_dcmplt>
 80093f2:	3800      	subs	r0, #0
 80093f4:	bf18      	it	ne
 80093f6:	2001      	movne	r0, #1
 80093f8:	e71d      	b.n	8009236 <__ieee754_pow+0x216>
 80093fa:	bf00      	nop
 80093fc:	f3af 8000 	nop.w
 8009400:	60000000 	.word	0x60000000
 8009404:	3ff71547 	.word	0x3ff71547
 8009408:	f85ddf44 	.word	0xf85ddf44
 800940c:	3e54ae0b 	.word	0x3e54ae0b
 8009410:	55555555 	.word	0x55555555
 8009414:	3fd55555 	.word	0x3fd55555
 8009418:	652b82fe 	.word	0x652b82fe
 800941c:	3ff71547 	.word	0x3ff71547
 8009420:	3ff00000 	.word	0x3ff00000
 8009424:	3fd00000 	.word	0x3fd00000
 8009428:	3fe00000 	.word	0x3fe00000
 800942c:	408fffff 	.word	0x408fffff
 8009430:	4ad3      	ldr	r2, [pc, #844]	@ (8009780 <__ieee754_pow+0x760>)
 8009432:	402a      	ands	r2, r5
 8009434:	2a00      	cmp	r2, #0
 8009436:	f040 817a 	bne.w	800972e <__ieee754_pow+0x70e>
 800943a:	4bd2      	ldr	r3, [pc, #840]	@ (8009784 <__ieee754_pow+0x764>)
 800943c:	2200      	movs	r2, #0
 800943e:	f7f7 f843 	bl	80004c8 <__aeabi_dmul>
 8009442:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8009446:	460b      	mov	r3, r1
 8009448:	151a      	asrs	r2, r3, #20
 800944a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800944e:	4422      	add	r2, r4
 8009450:	920a      	str	r2, [sp, #40]	@ 0x28
 8009452:	4acd      	ldr	r2, [pc, #820]	@ (8009788 <__ieee754_pow+0x768>)
 8009454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009458:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800945c:	4293      	cmp	r3, r2
 800945e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009462:	dd08      	ble.n	8009476 <__ieee754_pow+0x456>
 8009464:	4ac9      	ldr	r2, [pc, #804]	@ (800978c <__ieee754_pow+0x76c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	f340 8163 	ble.w	8009732 <__ieee754_pow+0x712>
 800946c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800946e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009472:	3301      	adds	r3, #1
 8009474:	930a      	str	r3, [sp, #40]	@ 0x28
 8009476:	2600      	movs	r6, #0
 8009478:	00f3      	lsls	r3, r6, #3
 800947a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800947c:	4bc4      	ldr	r3, [pc, #784]	@ (8009790 <__ieee754_pow+0x770>)
 800947e:	4629      	mov	r1, r5
 8009480:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009484:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009488:	461a      	mov	r2, r3
 800948a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800948e:	4623      	mov	r3, r4
 8009490:	4682      	mov	sl, r0
 8009492:	f7f6 fe61 	bl	8000158 <__aeabi_dsub>
 8009496:	4652      	mov	r2, sl
 8009498:	462b      	mov	r3, r5
 800949a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800949e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094a2:	f7f6 fe5b 	bl	800015c <__adddf3>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	2000      	movs	r0, #0
 80094ac:	49b9      	ldr	r1, [pc, #740]	@ (8009794 <__ieee754_pow+0x774>)
 80094ae:	f7f7 f935 	bl	800071c <__aeabi_ddiv>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80094ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094be:	f7f7 f803 	bl	80004c8 <__aeabi_dmul>
 80094c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80094c6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80094ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80094ce:	2300      	movs	r3, #0
 80094d0:	2200      	movs	r2, #0
 80094d2:	46ab      	mov	fp, r5
 80094d4:	106d      	asrs	r5, r5, #1
 80094d6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80094da:	9304      	str	r3, [sp, #16]
 80094dc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80094e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80094e4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80094e8:	4640      	mov	r0, r8
 80094ea:	4649      	mov	r1, r9
 80094ec:	4614      	mov	r4, r2
 80094ee:	461d      	mov	r5, r3
 80094f0:	f7f6 ffea 	bl	80004c8 <__aeabi_dmul>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094fc:	f7f6 fe2c 	bl	8000158 <__aeabi_dsub>
 8009500:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009504:	4606      	mov	r6, r0
 8009506:	460f      	mov	r7, r1
 8009508:	4620      	mov	r0, r4
 800950a:	4629      	mov	r1, r5
 800950c:	f7f6 fe24 	bl	8000158 <__aeabi_dsub>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	4650      	mov	r0, sl
 8009516:	4659      	mov	r1, fp
 8009518:	f7f6 fe1e 	bl	8000158 <__aeabi_dsub>
 800951c:	4642      	mov	r2, r8
 800951e:	464b      	mov	r3, r9
 8009520:	f7f6 ffd2 	bl	80004c8 <__aeabi_dmul>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4630      	mov	r0, r6
 800952a:	4639      	mov	r1, r7
 800952c:	f7f6 fe14 	bl	8000158 <__aeabi_dsub>
 8009530:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009534:	f7f6 ffc8 	bl	80004c8 <__aeabi_dmul>
 8009538:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800953c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009540:	4610      	mov	r0, r2
 8009542:	4619      	mov	r1, r3
 8009544:	f7f6 ffc0 	bl	80004c8 <__aeabi_dmul>
 8009548:	a37b      	add	r3, pc, #492	@ (adr r3, 8009738 <__ieee754_pow+0x718>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	4604      	mov	r4, r0
 8009550:	460d      	mov	r5, r1
 8009552:	f7f6 ffb9 	bl	80004c8 <__aeabi_dmul>
 8009556:	a37a      	add	r3, pc, #488	@ (adr r3, 8009740 <__ieee754_pow+0x720>)
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	f7f6 fdfe 	bl	800015c <__adddf3>
 8009560:	4622      	mov	r2, r4
 8009562:	462b      	mov	r3, r5
 8009564:	f7f6 ffb0 	bl	80004c8 <__aeabi_dmul>
 8009568:	a377      	add	r3, pc, #476	@ (adr r3, 8009748 <__ieee754_pow+0x728>)
 800956a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956e:	f7f6 fdf5 	bl	800015c <__adddf3>
 8009572:	4622      	mov	r2, r4
 8009574:	462b      	mov	r3, r5
 8009576:	f7f6 ffa7 	bl	80004c8 <__aeabi_dmul>
 800957a:	a375      	add	r3, pc, #468	@ (adr r3, 8009750 <__ieee754_pow+0x730>)
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	f7f6 fdec 	bl	800015c <__adddf3>
 8009584:	4622      	mov	r2, r4
 8009586:	462b      	mov	r3, r5
 8009588:	f7f6 ff9e 	bl	80004c8 <__aeabi_dmul>
 800958c:	a372      	add	r3, pc, #456	@ (adr r3, 8009758 <__ieee754_pow+0x738>)
 800958e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009592:	f7f6 fde3 	bl	800015c <__adddf3>
 8009596:	4622      	mov	r2, r4
 8009598:	462b      	mov	r3, r5
 800959a:	f7f6 ff95 	bl	80004c8 <__aeabi_dmul>
 800959e:	a370      	add	r3, pc, #448	@ (adr r3, 8009760 <__ieee754_pow+0x740>)
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	f7f6 fdda 	bl	800015c <__adddf3>
 80095a8:	4622      	mov	r2, r4
 80095aa:	4606      	mov	r6, r0
 80095ac:	460f      	mov	r7, r1
 80095ae:	462b      	mov	r3, r5
 80095b0:	4620      	mov	r0, r4
 80095b2:	4629      	mov	r1, r5
 80095b4:	f7f6 ff88 	bl	80004c8 <__aeabi_dmul>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4630      	mov	r0, r6
 80095be:	4639      	mov	r1, r7
 80095c0:	f7f6 ff82 	bl	80004c8 <__aeabi_dmul>
 80095c4:	4604      	mov	r4, r0
 80095c6:	460d      	mov	r5, r1
 80095c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095cc:	4642      	mov	r2, r8
 80095ce:	464b      	mov	r3, r9
 80095d0:	f7f6 fdc4 	bl	800015c <__adddf3>
 80095d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80095d8:	f7f6 ff76 	bl	80004c8 <__aeabi_dmul>
 80095dc:	4622      	mov	r2, r4
 80095de:	462b      	mov	r3, r5
 80095e0:	f7f6 fdbc 	bl	800015c <__adddf3>
 80095e4:	4642      	mov	r2, r8
 80095e6:	4682      	mov	sl, r0
 80095e8:	468b      	mov	fp, r1
 80095ea:	464b      	mov	r3, r9
 80095ec:	4640      	mov	r0, r8
 80095ee:	4649      	mov	r1, r9
 80095f0:	f7f6 ff6a 	bl	80004c8 <__aeabi_dmul>
 80095f4:	2200      	movs	r2, #0
 80095f6:	4b68      	ldr	r3, [pc, #416]	@ (8009798 <__ieee754_pow+0x778>)
 80095f8:	4606      	mov	r6, r0
 80095fa:	460f      	mov	r7, r1
 80095fc:	f7f6 fdae 	bl	800015c <__adddf3>
 8009600:	4652      	mov	r2, sl
 8009602:	465b      	mov	r3, fp
 8009604:	f7f6 fdaa 	bl	800015c <__adddf3>
 8009608:	2400      	movs	r4, #0
 800960a:	460d      	mov	r5, r1
 800960c:	4622      	mov	r2, r4
 800960e:	460b      	mov	r3, r1
 8009610:	4640      	mov	r0, r8
 8009612:	4649      	mov	r1, r9
 8009614:	f7f6 ff58 	bl	80004c8 <__aeabi_dmul>
 8009618:	2200      	movs	r2, #0
 800961a:	4680      	mov	r8, r0
 800961c:	4689      	mov	r9, r1
 800961e:	4620      	mov	r0, r4
 8009620:	4629      	mov	r1, r5
 8009622:	4b5d      	ldr	r3, [pc, #372]	@ (8009798 <__ieee754_pow+0x778>)
 8009624:	f7f6 fd98 	bl	8000158 <__aeabi_dsub>
 8009628:	4632      	mov	r2, r6
 800962a:	463b      	mov	r3, r7
 800962c:	f7f6 fd94 	bl	8000158 <__aeabi_dsub>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4650      	mov	r0, sl
 8009636:	4659      	mov	r1, fp
 8009638:	f7f6 fd8e 	bl	8000158 <__aeabi_dsub>
 800963c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009640:	f7f6 ff42 	bl	80004c8 <__aeabi_dmul>
 8009644:	4622      	mov	r2, r4
 8009646:	4606      	mov	r6, r0
 8009648:	460f      	mov	r7, r1
 800964a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800964e:	462b      	mov	r3, r5
 8009650:	f7f6 ff3a 	bl	80004c8 <__aeabi_dmul>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4630      	mov	r0, r6
 800965a:	4639      	mov	r1, r7
 800965c:	f7f6 fd7e 	bl	800015c <__adddf3>
 8009660:	2400      	movs	r4, #0
 8009662:	4606      	mov	r6, r0
 8009664:	460f      	mov	r7, r1
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4640      	mov	r0, r8
 800966c:	4649      	mov	r1, r9
 800966e:	f7f6 fd75 	bl	800015c <__adddf3>
 8009672:	a33d      	add	r3, pc, #244	@ (adr r3, 8009768 <__ieee754_pow+0x748>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	4620      	mov	r0, r4
 800967a:	460d      	mov	r5, r1
 800967c:	f7f6 ff24 	bl	80004c8 <__aeabi_dmul>
 8009680:	4642      	mov	r2, r8
 8009682:	464b      	mov	r3, r9
 8009684:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009688:	4620      	mov	r0, r4
 800968a:	4629      	mov	r1, r5
 800968c:	f7f6 fd64 	bl	8000158 <__aeabi_dsub>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4630      	mov	r0, r6
 8009696:	4639      	mov	r1, r7
 8009698:	f7f6 fd5e 	bl	8000158 <__aeabi_dsub>
 800969c:	a334      	add	r3, pc, #208	@ (adr r3, 8009770 <__ieee754_pow+0x750>)
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	f7f6 ff11 	bl	80004c8 <__aeabi_dmul>
 80096a6:	a334      	add	r3, pc, #208	@ (adr r3, 8009778 <__ieee754_pow+0x758>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	4606      	mov	r6, r0
 80096ae:	460f      	mov	r7, r1
 80096b0:	4620      	mov	r0, r4
 80096b2:	4629      	mov	r1, r5
 80096b4:	f7f6 ff08 	bl	80004c8 <__aeabi_dmul>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4630      	mov	r0, r6
 80096be:	4639      	mov	r1, r7
 80096c0:	f7f6 fd4c 	bl	800015c <__adddf3>
 80096c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80096c6:	4b35      	ldr	r3, [pc, #212]	@ (800979c <__ieee754_pow+0x77c>)
 80096c8:	2400      	movs	r4, #0
 80096ca:	4413      	add	r3, r2
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f7f6 fd44 	bl	800015c <__adddf3>
 80096d4:	4682      	mov	sl, r0
 80096d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80096d8:	468b      	mov	fp, r1
 80096da:	f7f6 fe8b 	bl	80003f4 <__aeabi_i2d>
 80096de:	4606      	mov	r6, r0
 80096e0:	460f      	mov	r7, r1
 80096e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80096e4:	4b2e      	ldr	r3, [pc, #184]	@ (80097a0 <__ieee754_pow+0x780>)
 80096e6:	4413      	add	r3, r2
 80096e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096ec:	4652      	mov	r2, sl
 80096ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096f2:	465b      	mov	r3, fp
 80096f4:	f7f6 fd32 	bl	800015c <__adddf3>
 80096f8:	4642      	mov	r2, r8
 80096fa:	464b      	mov	r3, r9
 80096fc:	f7f6 fd2e 	bl	800015c <__adddf3>
 8009700:	4632      	mov	r2, r6
 8009702:	463b      	mov	r3, r7
 8009704:	f7f6 fd2a 	bl	800015c <__adddf3>
 8009708:	4632      	mov	r2, r6
 800970a:	463b      	mov	r3, r7
 800970c:	4620      	mov	r0, r4
 800970e:	460d      	mov	r5, r1
 8009710:	f7f6 fd22 	bl	8000158 <__aeabi_dsub>
 8009714:	4642      	mov	r2, r8
 8009716:	464b      	mov	r3, r9
 8009718:	f7f6 fd1e 	bl	8000158 <__aeabi_dsub>
 800971c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009720:	f7f6 fd1a 	bl	8000158 <__aeabi_dsub>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4650      	mov	r0, sl
 800972a:	4659      	mov	r1, fp
 800972c:	e618      	b.n	8009360 <__ieee754_pow+0x340>
 800972e:	2400      	movs	r4, #0
 8009730:	e68a      	b.n	8009448 <__ieee754_pow+0x428>
 8009732:	2601      	movs	r6, #1
 8009734:	e6a0      	b.n	8009478 <__ieee754_pow+0x458>
 8009736:	bf00      	nop
 8009738:	4a454eef 	.word	0x4a454eef
 800973c:	3fca7e28 	.word	0x3fca7e28
 8009740:	93c9db65 	.word	0x93c9db65
 8009744:	3fcd864a 	.word	0x3fcd864a
 8009748:	a91d4101 	.word	0xa91d4101
 800974c:	3fd17460 	.word	0x3fd17460
 8009750:	518f264d 	.word	0x518f264d
 8009754:	3fd55555 	.word	0x3fd55555
 8009758:	db6fabff 	.word	0xdb6fabff
 800975c:	3fdb6db6 	.word	0x3fdb6db6
 8009760:	33333303 	.word	0x33333303
 8009764:	3fe33333 	.word	0x3fe33333
 8009768:	e0000000 	.word	0xe0000000
 800976c:	3feec709 	.word	0x3feec709
 8009770:	dc3a03fd 	.word	0xdc3a03fd
 8009774:	3feec709 	.word	0x3feec709
 8009778:	145b01f5 	.word	0x145b01f5
 800977c:	be3e2fe0 	.word	0xbe3e2fe0
 8009780:	7ff00000 	.word	0x7ff00000
 8009784:	43400000 	.word	0x43400000
 8009788:	0003988e 	.word	0x0003988e
 800978c:	000bb679 	.word	0x000bb679
 8009790:	08009e08 	.word	0x08009e08
 8009794:	3ff00000 	.word	0x3ff00000
 8009798:	40080000 	.word	0x40080000
 800979c:	08009de8 	.word	0x08009de8
 80097a0:	08009df8 	.word	0x08009df8
 80097a4:	a39a      	add	r3, pc, #616	@ (adr r3, 8009a10 <__ieee754_pow+0x9f0>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	4630      	mov	r0, r6
 80097ac:	4639      	mov	r1, r7
 80097ae:	f7f6 fcd5 	bl	800015c <__adddf3>
 80097b2:	4642      	mov	r2, r8
 80097b4:	e9cd 0100 	strd	r0, r1, [sp]
 80097b8:	464b      	mov	r3, r9
 80097ba:	4620      	mov	r0, r4
 80097bc:	4629      	mov	r1, r5
 80097be:	f7f6 fccb 	bl	8000158 <__aeabi_dsub>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097ca:	f7f7 f90d 	bl	80009e8 <__aeabi_dcmpgt>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f47f ae09 	bne.w	80093e6 <__ieee754_pow+0x3c6>
 80097d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80097d8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80097dc:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80097e0:	fa43 fa0a 	asr.w	sl, r3, sl
 80097e4:	44da      	add	sl, fp
 80097e6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80097ea:	489b      	ldr	r0, [pc, #620]	@ (8009a58 <__ieee754_pow+0xa38>)
 80097ec:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80097f0:	4108      	asrs	r0, r1
 80097f2:	ea00 030a 	and.w	r3, r0, sl
 80097f6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80097fa:	f1c1 0114 	rsb	r1, r1, #20
 80097fe:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009802:	4640      	mov	r0, r8
 8009804:	fa4a fa01 	asr.w	sl, sl, r1
 8009808:	f1bb 0f00 	cmp.w	fp, #0
 800980c:	4649      	mov	r1, r9
 800980e:	f04f 0200 	mov.w	r2, #0
 8009812:	bfb8      	it	lt
 8009814:	f1ca 0a00 	rsblt	sl, sl, #0
 8009818:	f7f6 fc9e 	bl	8000158 <__aeabi_dsub>
 800981c:	4680      	mov	r8, r0
 800981e:	4689      	mov	r9, r1
 8009820:	2400      	movs	r4, #0
 8009822:	4632      	mov	r2, r6
 8009824:	463b      	mov	r3, r7
 8009826:	4640      	mov	r0, r8
 8009828:	4649      	mov	r1, r9
 800982a:	f7f6 fc97 	bl	800015c <__adddf3>
 800982e:	a37a      	add	r3, pc, #488	@ (adr r3, 8009a18 <__ieee754_pow+0x9f8>)
 8009830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009834:	4620      	mov	r0, r4
 8009836:	460d      	mov	r5, r1
 8009838:	f7f6 fe46 	bl	80004c8 <__aeabi_dmul>
 800983c:	4642      	mov	r2, r8
 800983e:	464b      	mov	r3, r9
 8009840:	e9cd 0100 	strd	r0, r1, [sp]
 8009844:	4620      	mov	r0, r4
 8009846:	4629      	mov	r1, r5
 8009848:	f7f6 fc86 	bl	8000158 <__aeabi_dsub>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4630      	mov	r0, r6
 8009852:	4639      	mov	r1, r7
 8009854:	f7f6 fc80 	bl	8000158 <__aeabi_dsub>
 8009858:	a371      	add	r3, pc, #452	@ (adr r3, 8009a20 <__ieee754_pow+0xa00>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fe33 	bl	80004c8 <__aeabi_dmul>
 8009862:	a371      	add	r3, pc, #452	@ (adr r3, 8009a28 <__ieee754_pow+0xa08>)
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	4680      	mov	r8, r0
 800986a:	4689      	mov	r9, r1
 800986c:	4620      	mov	r0, r4
 800986e:	4629      	mov	r1, r5
 8009870:	f7f6 fe2a 	bl	80004c8 <__aeabi_dmul>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4640      	mov	r0, r8
 800987a:	4649      	mov	r1, r9
 800987c:	f7f6 fc6e 	bl	800015c <__adddf3>
 8009880:	4604      	mov	r4, r0
 8009882:	460d      	mov	r5, r1
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	e9dd 0100 	ldrd	r0, r1, [sp]
 800988c:	f7f6 fc66 	bl	800015c <__adddf3>
 8009890:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009894:	4680      	mov	r8, r0
 8009896:	4689      	mov	r9, r1
 8009898:	f7f6 fc5e 	bl	8000158 <__aeabi_dsub>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	4620      	mov	r0, r4
 80098a2:	4629      	mov	r1, r5
 80098a4:	f7f6 fc58 	bl	8000158 <__aeabi_dsub>
 80098a8:	4642      	mov	r2, r8
 80098aa:	4606      	mov	r6, r0
 80098ac:	460f      	mov	r7, r1
 80098ae:	464b      	mov	r3, r9
 80098b0:	4640      	mov	r0, r8
 80098b2:	4649      	mov	r1, r9
 80098b4:	f7f6 fe08 	bl	80004c8 <__aeabi_dmul>
 80098b8:	a35d      	add	r3, pc, #372	@ (adr r3, 8009a30 <__ieee754_pow+0xa10>)
 80098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098be:	4604      	mov	r4, r0
 80098c0:	460d      	mov	r5, r1
 80098c2:	f7f6 fe01 	bl	80004c8 <__aeabi_dmul>
 80098c6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009a38 <__ieee754_pow+0xa18>)
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	f7f6 fc44 	bl	8000158 <__aeabi_dsub>
 80098d0:	4622      	mov	r2, r4
 80098d2:	462b      	mov	r3, r5
 80098d4:	f7f6 fdf8 	bl	80004c8 <__aeabi_dmul>
 80098d8:	a359      	add	r3, pc, #356	@ (adr r3, 8009a40 <__ieee754_pow+0xa20>)
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	f7f6 fc3d 	bl	800015c <__adddf3>
 80098e2:	4622      	mov	r2, r4
 80098e4:	462b      	mov	r3, r5
 80098e6:	f7f6 fdef 	bl	80004c8 <__aeabi_dmul>
 80098ea:	a357      	add	r3, pc, #348	@ (adr r3, 8009a48 <__ieee754_pow+0xa28>)
 80098ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f0:	f7f6 fc32 	bl	8000158 <__aeabi_dsub>
 80098f4:	4622      	mov	r2, r4
 80098f6:	462b      	mov	r3, r5
 80098f8:	f7f6 fde6 	bl	80004c8 <__aeabi_dmul>
 80098fc:	a354      	add	r3, pc, #336	@ (adr r3, 8009a50 <__ieee754_pow+0xa30>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	f7f6 fc2b 	bl	800015c <__adddf3>
 8009906:	4622      	mov	r2, r4
 8009908:	462b      	mov	r3, r5
 800990a:	f7f6 fddd 	bl	80004c8 <__aeabi_dmul>
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	4640      	mov	r0, r8
 8009914:	4649      	mov	r1, r9
 8009916:	f7f6 fc1f 	bl	8000158 <__aeabi_dsub>
 800991a:	4604      	mov	r4, r0
 800991c:	460d      	mov	r5, r1
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	4640      	mov	r0, r8
 8009924:	4649      	mov	r1, r9
 8009926:	f7f6 fdcf 	bl	80004c8 <__aeabi_dmul>
 800992a:	2200      	movs	r2, #0
 800992c:	e9cd 0100 	strd	r0, r1, [sp]
 8009930:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009934:	4620      	mov	r0, r4
 8009936:	4629      	mov	r1, r5
 8009938:	f7f6 fc0e 	bl	8000158 <__aeabi_dsub>
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009944:	f7f6 feea 	bl	800071c <__aeabi_ddiv>
 8009948:	4632      	mov	r2, r6
 800994a:	4604      	mov	r4, r0
 800994c:	460d      	mov	r5, r1
 800994e:	463b      	mov	r3, r7
 8009950:	4640      	mov	r0, r8
 8009952:	4649      	mov	r1, r9
 8009954:	f7f6 fdb8 	bl	80004c8 <__aeabi_dmul>
 8009958:	4632      	mov	r2, r6
 800995a:	463b      	mov	r3, r7
 800995c:	f7f6 fbfe 	bl	800015c <__adddf3>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	f7f6 fbf6 	bl	8000158 <__aeabi_dsub>
 800996c:	4642      	mov	r2, r8
 800996e:	464b      	mov	r3, r9
 8009970:	f7f6 fbf2 	bl	8000158 <__aeabi_dsub>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	2000      	movs	r0, #0
 800997a:	4938      	ldr	r1, [pc, #224]	@ (8009a5c <__ieee754_pow+0xa3c>)
 800997c:	f7f6 fbec 	bl	8000158 <__aeabi_dsub>
 8009980:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009984:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8009988:	da2e      	bge.n	80099e8 <__ieee754_pow+0x9c8>
 800998a:	4652      	mov	r2, sl
 800998c:	f000 f874 	bl	8009a78 <scalbn>
 8009990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009994:	f7ff bbed 	b.w	8009172 <__ieee754_pow+0x152>
 8009998:	4c31      	ldr	r4, [pc, #196]	@ (8009a60 <__ieee754_pow+0xa40>)
 800999a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800999e:	42a3      	cmp	r3, r4
 80099a0:	d91a      	bls.n	80099d8 <__ieee754_pow+0x9b8>
 80099a2:	4b30      	ldr	r3, [pc, #192]	@ (8009a64 <__ieee754_pow+0xa44>)
 80099a4:	440b      	add	r3, r1
 80099a6:	4303      	orrs	r3, r0
 80099a8:	d009      	beq.n	80099be <__ieee754_pow+0x99e>
 80099aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099ae:	2200      	movs	r2, #0
 80099b0:	2300      	movs	r3, #0
 80099b2:	f7f6 fffb 	bl	80009ac <__aeabi_dcmplt>
 80099b6:	3800      	subs	r0, #0
 80099b8:	bf18      	it	ne
 80099ba:	2001      	movne	r0, #1
 80099bc:	e444      	b.n	8009248 <__ieee754_pow+0x228>
 80099be:	4642      	mov	r2, r8
 80099c0:	464b      	mov	r3, r9
 80099c2:	f7f6 fbc9 	bl	8000158 <__aeabi_dsub>
 80099c6:	4632      	mov	r2, r6
 80099c8:	463b      	mov	r3, r7
 80099ca:	f7f7 f803 	bl	80009d4 <__aeabi_dcmpge>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d1eb      	bne.n	80099aa <__ieee754_pow+0x98a>
 80099d2:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8009a68 <__ieee754_pow+0xa48>
 80099d6:	e6fd      	b.n	80097d4 <__ieee754_pow+0x7b4>
 80099d8:	469a      	mov	sl, r3
 80099da:	4b24      	ldr	r3, [pc, #144]	@ (8009a6c <__ieee754_pow+0xa4c>)
 80099dc:	459a      	cmp	sl, r3
 80099de:	f63f aef9 	bhi.w	80097d4 <__ieee754_pow+0x7b4>
 80099e2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80099e6:	e71b      	b.n	8009820 <__ieee754_pow+0x800>
 80099e8:	4621      	mov	r1, r4
 80099ea:	e7d1      	b.n	8009990 <__ieee754_pow+0x970>
 80099ec:	2000      	movs	r0, #0
 80099ee:	491b      	ldr	r1, [pc, #108]	@ (8009a5c <__ieee754_pow+0xa3c>)
 80099f0:	f7ff bb34 	b.w	800905c <__ieee754_pow+0x3c>
 80099f4:	2000      	movs	r0, #0
 80099f6:	2100      	movs	r1, #0
 80099f8:	f7ff bb30 	b.w	800905c <__ieee754_pow+0x3c>
 80099fc:	4650      	mov	r0, sl
 80099fe:	4659      	mov	r1, fp
 8009a00:	f7ff bb2c 	b.w	800905c <__ieee754_pow+0x3c>
 8009a04:	460c      	mov	r4, r1
 8009a06:	f7ff bb79 	b.w	80090fc <__ieee754_pow+0xdc>
 8009a0a:	2400      	movs	r4, #0
 8009a0c:	f7ff bb64 	b.w	80090d8 <__ieee754_pow+0xb8>
 8009a10:	652b82fe 	.word	0x652b82fe
 8009a14:	3c971547 	.word	0x3c971547
 8009a18:	00000000 	.word	0x00000000
 8009a1c:	3fe62e43 	.word	0x3fe62e43
 8009a20:	fefa39ef 	.word	0xfefa39ef
 8009a24:	3fe62e42 	.word	0x3fe62e42
 8009a28:	0ca86c39 	.word	0x0ca86c39
 8009a2c:	be205c61 	.word	0xbe205c61
 8009a30:	72bea4d0 	.word	0x72bea4d0
 8009a34:	3e663769 	.word	0x3e663769
 8009a38:	c5d26bf1 	.word	0xc5d26bf1
 8009a3c:	3ebbbd41 	.word	0x3ebbbd41
 8009a40:	af25de2c 	.word	0xaf25de2c
 8009a44:	3f11566a 	.word	0x3f11566a
 8009a48:	16bebd93 	.word	0x16bebd93
 8009a4c:	3f66c16c 	.word	0x3f66c16c
 8009a50:	5555553e 	.word	0x5555553e
 8009a54:	3fc55555 	.word	0x3fc55555
 8009a58:	fff00000 	.word	0xfff00000
 8009a5c:	3ff00000 	.word	0x3ff00000
 8009a60:	4090cbff 	.word	0x4090cbff
 8009a64:	3f6f3400 	.word	0x3f6f3400
 8009a68:	4090cc00 	.word	0x4090cc00
 8009a6c:	3fe00000 	.word	0x3fe00000

08009a70 <fabs>:
 8009a70:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009a74:	4619      	mov	r1, r3
 8009a76:	4770      	bx	lr

08009a78 <scalbn>:
 8009a78:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8009a7c:	4616      	mov	r6, r2
 8009a7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009a82:	4683      	mov	fp, r0
 8009a84:	468c      	mov	ip, r1
 8009a86:	460b      	mov	r3, r1
 8009a88:	b982      	cbnz	r2, 8009aac <scalbn+0x34>
 8009a8a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009a8e:	4303      	orrs	r3, r0
 8009a90:	d039      	beq.n	8009b06 <scalbn+0x8e>
 8009a92:	4b2f      	ldr	r3, [pc, #188]	@ (8009b50 <scalbn+0xd8>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	f7f6 fd17 	bl	80004c8 <__aeabi_dmul>
 8009a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8009b54 <scalbn+0xdc>)
 8009a9c:	4683      	mov	fp, r0
 8009a9e:	429e      	cmp	r6, r3
 8009aa0:	468c      	mov	ip, r1
 8009aa2:	da0d      	bge.n	8009ac0 <scalbn+0x48>
 8009aa4:	a326      	add	r3, pc, #152	@ (adr r3, 8009b40 <scalbn+0xc8>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	e01b      	b.n	8009ae4 <scalbn+0x6c>
 8009aac:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8009ab0:	42ba      	cmp	r2, r7
 8009ab2:	d109      	bne.n	8009ac8 <scalbn+0x50>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	f7f6 fb51 	bl	800015c <__adddf3>
 8009aba:	4683      	mov	fp, r0
 8009abc:	468c      	mov	ip, r1
 8009abe:	e022      	b.n	8009b06 <scalbn+0x8e>
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009ac6:	3a36      	subs	r2, #54	@ 0x36
 8009ac8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009acc:	428e      	cmp	r6, r1
 8009ace:	dd0c      	ble.n	8009aea <scalbn+0x72>
 8009ad0:	a31d      	add	r3, pc, #116	@ (adr r3, 8009b48 <scalbn+0xd0>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	461c      	mov	r4, r3
 8009ad8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8009adc:	f361 74df 	bfi	r4, r1, #31, #1
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	481d      	ldr	r0, [pc, #116]	@ (8009b58 <scalbn+0xe0>)
 8009ae4:	f7f6 fcf0 	bl	80004c8 <__aeabi_dmul>
 8009ae8:	e7e7      	b.n	8009aba <scalbn+0x42>
 8009aea:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009aee:	4432      	add	r2, r6
 8009af0:	428a      	cmp	r2, r1
 8009af2:	dced      	bgt.n	8009ad0 <scalbn+0x58>
 8009af4:	2a00      	cmp	r2, #0
 8009af6:	dd0a      	ble.n	8009b0e <scalbn+0x96>
 8009af8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009afc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009b00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009b04:	46ac      	mov	ip, r5
 8009b06:	4658      	mov	r0, fp
 8009b08:	4661      	mov	r1, ip
 8009b0a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8009b0e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009b12:	da09      	bge.n	8009b28 <scalbn+0xb0>
 8009b14:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8009b18:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8009b1c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8009b20:	480e      	ldr	r0, [pc, #56]	@ (8009b5c <scalbn+0xe4>)
 8009b22:	f041 011f 	orr.w	r1, r1, #31
 8009b26:	e7bd      	b.n	8009aa4 <scalbn+0x2c>
 8009b28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009b2c:	3236      	adds	r2, #54	@ 0x36
 8009b2e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009b32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009b36:	4658      	mov	r0, fp
 8009b38:	4629      	mov	r1, r5
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	4b08      	ldr	r3, [pc, #32]	@ (8009b60 <scalbn+0xe8>)
 8009b3e:	e7d1      	b.n	8009ae4 <scalbn+0x6c>
 8009b40:	c2f8f359 	.word	0xc2f8f359
 8009b44:	01a56e1f 	.word	0x01a56e1f
 8009b48:	8800759c 	.word	0x8800759c
 8009b4c:	7e37e43c 	.word	0x7e37e43c
 8009b50:	43500000 	.word	0x43500000
 8009b54:	ffff3cb0 	.word	0xffff3cb0
 8009b58:	8800759c 	.word	0x8800759c
 8009b5c:	c2f8f359 	.word	0xc2f8f359
 8009b60:	3c900000 	.word	0x3c900000

08009b64 <with_errno>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	4604      	mov	r4, r0
 8009b68:	460d      	mov	r5, r1
 8009b6a:	4616      	mov	r6, r2
 8009b6c:	f7ff f9be 	bl	8008eec <__errno>
 8009b70:	4629      	mov	r1, r5
 8009b72:	6006      	str	r6, [r0, #0]
 8009b74:	4620      	mov	r0, r4
 8009b76:	bd70      	pop	{r4, r5, r6, pc}

08009b78 <xflow>:
 8009b78:	b513      	push	{r0, r1, r4, lr}
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	b10c      	cbz	r4, 8009b86 <xflow+0xe>
 8009b82:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009b86:	e9cd 2300 	strd	r2, r3, [sp]
 8009b8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b8e:	f7f6 fc9b 	bl	80004c8 <__aeabi_dmul>
 8009b92:	2222      	movs	r2, #34	@ 0x22
 8009b94:	b002      	add	sp, #8
 8009b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b9a:	f7ff bfe3 	b.w	8009b64 <with_errno>

08009b9e <__math_uflow>:
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009ba4:	f7ff bfe8 	b.w	8009b78 <xflow>

08009ba8 <__math_oflow>:
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8009bae:	f7ff bfe3 	b.w	8009b78 <xflow>
	...

08009bb4 <__ieee754_sqrt>:
 8009bb4:	4a67      	ldr	r2, [pc, #412]	@ (8009d54 <__ieee754_sqrt+0x1a0>)
 8009bb6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bba:	438a      	bics	r2, r1
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	460f      	mov	r7, r1
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	d10e      	bne.n	8009be4 <__ieee754_sqrt+0x30>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	f7f6 fc7e 	bl	80004c8 <__aeabi_dmul>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	460b      	mov	r3, r1
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	f7f6 fac2 	bl	800015c <__adddf3>
 8009bd8:	4606      	mov	r6, r0
 8009bda:	460f      	mov	r7, r1
 8009bdc:	4630      	mov	r0, r6
 8009bde:	4639      	mov	r1, r7
 8009be0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be4:	2900      	cmp	r1, #0
 8009be6:	dc0c      	bgt.n	8009c02 <__ieee754_sqrt+0x4e>
 8009be8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009bec:	4302      	orrs	r2, r0
 8009bee:	d0f5      	beq.n	8009bdc <__ieee754_sqrt+0x28>
 8009bf0:	b189      	cbz	r1, 8009c16 <__ieee754_sqrt+0x62>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	f7f6 fab0 	bl	8000158 <__aeabi_dsub>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	f7f6 fd8e 	bl	800071c <__aeabi_ddiv>
 8009c00:	e7ea      	b.n	8009bd8 <__ieee754_sqrt+0x24>
 8009c02:	150a      	asrs	r2, r1, #20
 8009c04:	d115      	bne.n	8009c32 <__ieee754_sqrt+0x7e>
 8009c06:	2100      	movs	r1, #0
 8009c08:	e009      	b.n	8009c1e <__ieee754_sqrt+0x6a>
 8009c0a:	0ae3      	lsrs	r3, r4, #11
 8009c0c:	3a15      	subs	r2, #21
 8009c0e:	0564      	lsls	r4, r4, #21
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d0fa      	beq.n	8009c0a <__ieee754_sqrt+0x56>
 8009c14:	e7f7      	b.n	8009c06 <__ieee754_sqrt+0x52>
 8009c16:	460a      	mov	r2, r1
 8009c18:	e7fa      	b.n	8009c10 <__ieee754_sqrt+0x5c>
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	3101      	adds	r1, #1
 8009c1e:	02d8      	lsls	r0, r3, #11
 8009c20:	d5fb      	bpl.n	8009c1a <__ieee754_sqrt+0x66>
 8009c22:	1e48      	subs	r0, r1, #1
 8009c24:	1a12      	subs	r2, r2, r0
 8009c26:	f1c1 0020 	rsb	r0, r1, #32
 8009c2a:	fa24 f000 	lsr.w	r0, r4, r0
 8009c2e:	4303      	orrs	r3, r0
 8009c30:	408c      	lsls	r4, r1
 8009c32:	2600      	movs	r6, #0
 8009c34:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009c38:	2116      	movs	r1, #22
 8009c3a:	07d2      	lsls	r2, r2, #31
 8009c3c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009c40:	4632      	mov	r2, r6
 8009c42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c4a:	bf5c      	itt	pl
 8009c4c:	005b      	lslpl	r3, r3, #1
 8009c4e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009c52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c56:	bf58      	it	pl
 8009c58:	0064      	lslpl	r4, r4, #1
 8009c5a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009c5e:	107f      	asrs	r7, r7, #1
 8009c60:	0064      	lsls	r4, r4, #1
 8009c62:	1815      	adds	r5, r2, r0
 8009c64:	429d      	cmp	r5, r3
 8009c66:	bfde      	ittt	le
 8009c68:	182a      	addle	r2, r5, r0
 8009c6a:	1b5b      	suble	r3, r3, r5
 8009c6c:	1836      	addle	r6, r6, r0
 8009c6e:	0fe5      	lsrs	r5, r4, #31
 8009c70:	3901      	subs	r1, #1
 8009c72:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009c76:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009c7a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009c7e:	d1f0      	bne.n	8009c62 <__ieee754_sqrt+0xae>
 8009c80:	460d      	mov	r5, r1
 8009c82:	f04f 0a20 	mov.w	sl, #32
 8009c86:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	eb01 0c00 	add.w	ip, r1, r0
 8009c90:	db02      	blt.n	8009c98 <__ieee754_sqrt+0xe4>
 8009c92:	d113      	bne.n	8009cbc <__ieee754_sqrt+0x108>
 8009c94:	45a4      	cmp	ip, r4
 8009c96:	d811      	bhi.n	8009cbc <__ieee754_sqrt+0x108>
 8009c98:	f1bc 0f00 	cmp.w	ip, #0
 8009c9c:	eb0c 0100 	add.w	r1, ip, r0
 8009ca0:	da42      	bge.n	8009d28 <__ieee754_sqrt+0x174>
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	db40      	blt.n	8009d28 <__ieee754_sqrt+0x174>
 8009ca6:	f102 0e01 	add.w	lr, r2, #1
 8009caa:	1a9b      	subs	r3, r3, r2
 8009cac:	4672      	mov	r2, lr
 8009cae:	45a4      	cmp	ip, r4
 8009cb0:	bf88      	it	hi
 8009cb2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009cb6:	eba4 040c 	sub.w	r4, r4, ip
 8009cba:	4405      	add	r5, r0
 8009cbc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009cc0:	f1ba 0a01 	subs.w	sl, sl, #1
 8009cc4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009cc8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009ccc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009cd0:	d1db      	bne.n	8009c8a <__ieee754_sqrt+0xd6>
 8009cd2:	431c      	orrs	r4, r3
 8009cd4:	d01a      	beq.n	8009d0c <__ieee754_sqrt+0x158>
 8009cd6:	4c20      	ldr	r4, [pc, #128]	@ (8009d58 <__ieee754_sqrt+0x1a4>)
 8009cd8:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8009d5c <__ieee754_sqrt+0x1a8>
 8009cdc:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009ce0:	e9db 2300 	ldrd	r2, r3, [fp]
 8009ce4:	f7f6 fa38 	bl	8000158 <__aeabi_dsub>
 8009ce8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	f7f6 fe64 	bl	80009c0 <__aeabi_dcmple>
 8009cf8:	b140      	cbz	r0, 8009d0c <__ieee754_sqrt+0x158>
 8009cfa:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009cfe:	e9db 2300 	ldrd	r2, r3, [fp]
 8009d02:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009d06:	d111      	bne.n	8009d2c <__ieee754_sqrt+0x178>
 8009d08:	4655      	mov	r5, sl
 8009d0a:	3601      	adds	r6, #1
 8009d0c:	1072      	asrs	r2, r6, #1
 8009d0e:	086b      	lsrs	r3, r5, #1
 8009d10:	07f1      	lsls	r1, r6, #31
 8009d12:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009d16:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009d1a:	bf48      	it	mi
 8009d1c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009d20:	4618      	mov	r0, r3
 8009d22:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8009d26:	e757      	b.n	8009bd8 <__ieee754_sqrt+0x24>
 8009d28:	4696      	mov	lr, r2
 8009d2a:	e7be      	b.n	8009caa <__ieee754_sqrt+0xf6>
 8009d2c:	f7f6 fa16 	bl	800015c <__adddf3>
 8009d30:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4640      	mov	r0, r8
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	f7f6 fe36 	bl	80009ac <__aeabi_dcmplt>
 8009d40:	b120      	cbz	r0, 8009d4c <__ieee754_sqrt+0x198>
 8009d42:	1ca8      	adds	r0, r5, #2
 8009d44:	bf08      	it	eq
 8009d46:	3601      	addeq	r6, #1
 8009d48:	3502      	adds	r5, #2
 8009d4a:	e7df      	b.n	8009d0c <__ieee754_sqrt+0x158>
 8009d4c:	1c6b      	adds	r3, r5, #1
 8009d4e:	f023 0501 	bic.w	r5, r3, #1
 8009d52:	e7db      	b.n	8009d0c <__ieee754_sqrt+0x158>
 8009d54:	7ff00000 	.word	0x7ff00000
 8009d58:	200001c0 	.word	0x200001c0
 8009d5c:	200001b8 	.word	0x200001b8

08009d60 <_init>:
 8009d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d62:	bf00      	nop
 8009d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d66:	bc08      	pop	{r3}
 8009d68:	469e      	mov	lr, r3
 8009d6a:	4770      	bx	lr

08009d6c <_fini>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	bf00      	nop
 8009d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d72:	bc08      	pop	{r3}
 8009d74:	469e      	mov	lr, r3
 8009d76:	4770      	bx	lr
