
USB_HID_MouseDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008cb4  08008cb4  00009cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d20  08008d20  0000a164  2**0
                  CONTENTS
  4 .ARM          00000000  08008d20  08008d20  0000a164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d20  08008d20  0000a164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d20  08008d20  00009d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d24  08008d24  00009d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08008d28  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000164  08008e8c  0000a164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009bc  08008e8c  0000a9bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d517  00000000  00000000  0000a18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf8  00000000  00000000  000176a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0001a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000899  00000000  00000000  0001af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199bb  00000000  00000000  0001b7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc6d  00000000  00000000  000351a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e5c  00000000  00000000  00044e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cec6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fbc  00000000  00000000  000cecb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d1c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08008c9c 	.word	0x08008c9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08008c9c 	.word	0x08008c9c

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_d2iz>:
 8000718:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800071c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000720:	d215      	bcs.n	800074e <__aeabi_d2iz+0x36>
 8000722:	d511      	bpl.n	8000748 <__aeabi_d2iz+0x30>
 8000724:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000728:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800072c:	d912      	bls.n	8000754 <__aeabi_d2iz+0x3c>
 800072e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000732:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000736:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	bf18      	it	ne
 8000744:	4240      	negne	r0, r0
 8000746:	4770      	bx	lr
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	4770      	bx	lr
 800074e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000752:	d105      	bne.n	8000760 <__aeabi_d2iz+0x48>
 8000754:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000758:	bf08      	it	eq
 800075a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800075e:	4770      	bx	lr
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <__aeabi_frsub>:
 8000768:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800076c:	e002      	b.n	8000774 <__addsf3>
 800076e:	bf00      	nop

08000770 <__aeabi_fsub>:
 8000770:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000774 <__addsf3>:
 8000774:	0042      	lsls	r2, r0, #1
 8000776:	bf1f      	itttt	ne
 8000778:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800077c:	ea92 0f03 	teqne	r2, r3
 8000780:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000784:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000788:	d06a      	beq.n	8000860 <__addsf3+0xec>
 800078a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800078e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000792:	bfc1      	itttt	gt
 8000794:	18d2      	addgt	r2, r2, r3
 8000796:	4041      	eorgt	r1, r0
 8000798:	4048      	eorgt	r0, r1
 800079a:	4041      	eorgt	r1, r0
 800079c:	bfb8      	it	lt
 800079e:	425b      	neglt	r3, r3
 80007a0:	2b19      	cmp	r3, #25
 80007a2:	bf88      	it	hi
 80007a4:	4770      	bxhi	lr
 80007a6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80007aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007ae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80007b2:	bf18      	it	ne
 80007b4:	4240      	negne	r0, r0
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80007be:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80007c2:	bf18      	it	ne
 80007c4:	4249      	negne	r1, r1
 80007c6:	ea92 0f03 	teq	r2, r3
 80007ca:	d03f      	beq.n	800084c <__addsf3+0xd8>
 80007cc:	f1a2 0201 	sub.w	r2, r2, #1
 80007d0:	fa41 fc03 	asr.w	ip, r1, r3
 80007d4:	eb10 000c 	adds.w	r0, r0, ip
 80007d8:	f1c3 0320 	rsb	r3, r3, #32
 80007dc:	fa01 f103 	lsl.w	r1, r1, r3
 80007e0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007e4:	d502      	bpl.n	80007ec <__addsf3+0x78>
 80007e6:	4249      	negs	r1, r1
 80007e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007f0:	d313      	bcc.n	800081a <__addsf3+0xa6>
 80007f2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007f6:	d306      	bcc.n	8000806 <__addsf3+0x92>
 80007f8:	0840      	lsrs	r0, r0, #1
 80007fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80007fe:	f102 0201 	add.w	r2, r2, #1
 8000802:	2afe      	cmp	r2, #254	@ 0xfe
 8000804:	d251      	bcs.n	80008aa <__addsf3+0x136>
 8000806:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800080a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800080e:	bf08      	it	eq
 8000810:	f020 0001 	biceq.w	r0, r0, #1
 8000814:	ea40 0003 	orr.w	r0, r0, r3
 8000818:	4770      	bx	lr
 800081a:	0049      	lsls	r1, r1, #1
 800081c:	eb40 0000 	adc.w	r0, r0, r0
 8000820:	3a01      	subs	r2, #1
 8000822:	bf28      	it	cs
 8000824:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000828:	d2ed      	bcs.n	8000806 <__addsf3+0x92>
 800082a:	fab0 fc80 	clz	ip, r0
 800082e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000832:	ebb2 020c 	subs.w	r2, r2, ip
 8000836:	fa00 f00c 	lsl.w	r0, r0, ip
 800083a:	bfaa      	itet	ge
 800083c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000840:	4252      	neglt	r2, r2
 8000842:	4318      	orrge	r0, r3
 8000844:	bfbc      	itt	lt
 8000846:	40d0      	lsrlt	r0, r2
 8000848:	4318      	orrlt	r0, r3
 800084a:	4770      	bx	lr
 800084c:	f092 0f00 	teq	r2, #0
 8000850:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000854:	bf06      	itte	eq
 8000856:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800085a:	3201      	addeq	r2, #1
 800085c:	3b01      	subne	r3, #1
 800085e:	e7b5      	b.n	80007cc <__addsf3+0x58>
 8000860:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000864:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000868:	bf18      	it	ne
 800086a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800086e:	d021      	beq.n	80008b4 <__addsf3+0x140>
 8000870:	ea92 0f03 	teq	r2, r3
 8000874:	d004      	beq.n	8000880 <__addsf3+0x10c>
 8000876:	f092 0f00 	teq	r2, #0
 800087a:	bf08      	it	eq
 800087c:	4608      	moveq	r0, r1
 800087e:	4770      	bx	lr
 8000880:	ea90 0f01 	teq	r0, r1
 8000884:	bf1c      	itt	ne
 8000886:	2000      	movne	r0, #0
 8000888:	4770      	bxne	lr
 800088a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800088e:	d104      	bne.n	800089a <__addsf3+0x126>
 8000890:	0040      	lsls	r0, r0, #1
 8000892:	bf28      	it	cs
 8000894:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000898:	4770      	bx	lr
 800089a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800089e:	bf3c      	itt	cc
 80008a0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80008a4:	4770      	bxcc	lr
 80008a6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008aa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008b2:	4770      	bx	lr
 80008b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008b8:	bf16      	itet	ne
 80008ba:	4608      	movne	r0, r1
 80008bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008c0:	4601      	movne	r1, r0
 80008c2:	0242      	lsls	r2, r0, #9
 80008c4:	bf06      	itte	eq
 80008c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008ca:	ea90 0f01 	teqeq	r0, r1
 80008ce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008d2:	4770      	bx	lr

080008d4 <__aeabi_ui2f>:
 80008d4:	f04f 0300 	mov.w	r3, #0
 80008d8:	e004      	b.n	80008e4 <__aeabi_i2f+0x8>
 80008da:	bf00      	nop

080008dc <__aeabi_i2f>:
 80008dc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008e0:	bf48      	it	mi
 80008e2:	4240      	negmi	r0, r0
 80008e4:	ea5f 0c00 	movs.w	ip, r0
 80008e8:	bf08      	it	eq
 80008ea:	4770      	bxeq	lr
 80008ec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008f0:	4601      	mov	r1, r0
 80008f2:	f04f 0000 	mov.w	r0, #0
 80008f6:	e01c      	b.n	8000932 <__aeabi_l2f+0x2a>

080008f8 <__aeabi_ul2f>:
 80008f8:	ea50 0201 	orrs.w	r2, r0, r1
 80008fc:	bf08      	it	eq
 80008fe:	4770      	bxeq	lr
 8000900:	f04f 0300 	mov.w	r3, #0
 8000904:	e00a      	b.n	800091c <__aeabi_l2f+0x14>
 8000906:	bf00      	nop

08000908 <__aeabi_l2f>:
 8000908:	ea50 0201 	orrs.w	r2, r0, r1
 800090c:	bf08      	it	eq
 800090e:	4770      	bxeq	lr
 8000910:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000914:	d502      	bpl.n	800091c <__aeabi_l2f+0x14>
 8000916:	4240      	negs	r0, r0
 8000918:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800091c:	ea5f 0c01 	movs.w	ip, r1
 8000920:	bf02      	ittt	eq
 8000922:	4684      	moveq	ip, r0
 8000924:	4601      	moveq	r1, r0
 8000926:	2000      	moveq	r0, #0
 8000928:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800092c:	bf08      	it	eq
 800092e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000932:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000936:	fabc f28c 	clz	r2, ip
 800093a:	3a08      	subs	r2, #8
 800093c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000940:	db10      	blt.n	8000964 <__aeabi_l2f+0x5c>
 8000942:	fa01 fc02 	lsl.w	ip, r1, r2
 8000946:	4463      	add	r3, ip
 8000948:	fa00 fc02 	lsl.w	ip, r0, r2
 800094c:	f1c2 0220 	rsb	r2, r2, #32
 8000950:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000954:	fa20 f202 	lsr.w	r2, r0, r2
 8000958:	eb43 0002 	adc.w	r0, r3, r2
 800095c:	bf08      	it	eq
 800095e:	f020 0001 	biceq.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	f102 0220 	add.w	r2, r2, #32
 8000968:	fa01 fc02 	lsl.w	ip, r1, r2
 800096c:	f1c2 0220 	rsb	r2, r2, #32
 8000970:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000974:	fa21 f202 	lsr.w	r2, r1, r2
 8000978:	eb43 0002 	adc.w	r0, r3, r2
 800097c:	bf08      	it	eq
 800097e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000982:	4770      	bx	lr

08000984 <__aeabi_fmul>:
 8000984:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000988:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800098c:	bf1e      	ittt	ne
 800098e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000992:	ea92 0f0c 	teqne	r2, ip
 8000996:	ea93 0f0c 	teqne	r3, ip
 800099a:	d06f      	beq.n	8000a7c <__aeabi_fmul+0xf8>
 800099c:	441a      	add	r2, r3
 800099e:	ea80 0c01 	eor.w	ip, r0, r1
 80009a2:	0240      	lsls	r0, r0, #9
 80009a4:	bf18      	it	ne
 80009a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009aa:	d01e      	beq.n	80009ea <__aeabi_fmul+0x66>
 80009ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009b8:	fba0 3101 	umull	r3, r1, r0, r1
 80009bc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009c0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009c4:	bf3e      	ittt	cc
 80009c6:	0049      	lslcc	r1, r1, #1
 80009c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009cc:	005b      	lslcc	r3, r3, #1
 80009ce:	ea40 0001 	orr.w	r0, r0, r1
 80009d2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009d6:	2afd      	cmp	r2, #253	@ 0xfd
 80009d8:	d81d      	bhi.n	8000a16 <__aeabi_fmul+0x92>
 80009da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	4770      	bx	lr
 80009ea:	f090 0f00 	teq	r0, #0
 80009ee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009f2:	bf08      	it	eq
 80009f4:	0249      	lsleq	r1, r1, #9
 80009f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009fe:	3a7f      	subs	r2, #127	@ 0x7f
 8000a00:	bfc2      	ittt	gt
 8000a02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a0a:	4770      	bxgt	lr
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	f04f 0300 	mov.w	r3, #0
 8000a14:	3a01      	subs	r2, #1
 8000a16:	dc5d      	bgt.n	8000ad4 <__aeabi_fmul+0x150>
 8000a18:	f112 0f19 	cmn.w	r2, #25
 8000a1c:	bfdc      	itt	le
 8000a1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a22:	4770      	bxle	lr
 8000a24:	f1c2 0200 	rsb	r2, r2, #0
 8000a28:	0041      	lsls	r1, r0, #1
 8000a2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000a2e:	f1c2 0220 	rsb	r2, r2, #32
 8000a32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a3a:	f140 0000 	adc.w	r0, r0, #0
 8000a3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a42:	bf08      	it	eq
 8000a44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a48:	4770      	bx	lr
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a52:	bf02      	ittt	eq
 8000a54:	0040      	lsleq	r0, r0, #1
 8000a56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a5a:	3a01      	subeq	r2, #1
 8000a5c:	d0f9      	beq.n	8000a52 <__aeabi_fmul+0xce>
 8000a5e:	ea40 000c 	orr.w	r0, r0, ip
 8000a62:	f093 0f00 	teq	r3, #0
 8000a66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a6a:	bf02      	ittt	eq
 8000a6c:	0049      	lsleq	r1, r1, #1
 8000a6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a72:	3b01      	subeq	r3, #1
 8000a74:	d0f9      	beq.n	8000a6a <__aeabi_fmul+0xe6>
 8000a76:	ea41 010c 	orr.w	r1, r1, ip
 8000a7a:	e78f      	b.n	800099c <__aeabi_fmul+0x18>
 8000a7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a80:	ea92 0f0c 	teq	r2, ip
 8000a84:	bf18      	it	ne
 8000a86:	ea93 0f0c 	teqne	r3, ip
 8000a8a:	d00a      	beq.n	8000aa2 <__aeabi_fmul+0x11e>
 8000a8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a90:	bf18      	it	ne
 8000a92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a96:	d1d8      	bne.n	8000a4a <__aeabi_fmul+0xc6>
 8000a98:	ea80 0001 	eor.w	r0, r0, r1
 8000a9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	4770      	bx	lr
 8000aa2:	f090 0f00 	teq	r0, #0
 8000aa6:	bf17      	itett	ne
 8000aa8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000aac:	4608      	moveq	r0, r1
 8000aae:	f091 0f00 	teqne	r1, #0
 8000ab2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ab6:	d014      	beq.n	8000ae2 <__aeabi_fmul+0x15e>
 8000ab8:	ea92 0f0c 	teq	r2, ip
 8000abc:	d101      	bne.n	8000ac2 <__aeabi_fmul+0x13e>
 8000abe:	0242      	lsls	r2, r0, #9
 8000ac0:	d10f      	bne.n	8000ae2 <__aeabi_fmul+0x15e>
 8000ac2:	ea93 0f0c 	teq	r3, ip
 8000ac6:	d103      	bne.n	8000ad0 <__aeabi_fmul+0x14c>
 8000ac8:	024b      	lsls	r3, r1, #9
 8000aca:	bf18      	it	ne
 8000acc:	4608      	movne	r0, r1
 8000ace:	d108      	bne.n	8000ae2 <__aeabi_fmul+0x15e>
 8000ad0:	ea80 0001 	eor.w	r0, r0, r1
 8000ad4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bx	lr

08000aec <__aeabi_fdiv>:
 8000aec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000af0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af4:	bf1e      	ittt	ne
 8000af6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000afa:	ea92 0f0c 	teqne	r2, ip
 8000afe:	ea93 0f0c 	teqne	r3, ip
 8000b02:	d069      	beq.n	8000bd8 <__aeabi_fdiv+0xec>
 8000b04:	eba2 0203 	sub.w	r2, r2, r3
 8000b08:	ea80 0c01 	eor.w	ip, r0, r1
 8000b0c:	0249      	lsls	r1, r1, #9
 8000b0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b12:	d037      	beq.n	8000b84 <__aeabi_fdiv+0x98>
 8000b14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b24:	428b      	cmp	r3, r1
 8000b26:	bf38      	it	cc
 8000b28:	005b      	lslcc	r3, r3, #1
 8000b2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b32:	428b      	cmp	r3, r1
 8000b34:	bf24      	itt	cs
 8000b36:	1a5b      	subcs	r3, r3, r1
 8000b38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b40:	bf24      	itt	cs
 8000b42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b4e:	bf24      	itt	cs
 8000b50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b5c:	bf24      	itt	cs
 8000b5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b66:	011b      	lsls	r3, r3, #4
 8000b68:	bf18      	it	ne
 8000b6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b6e:	d1e0      	bne.n	8000b32 <__aeabi_fdiv+0x46>
 8000b70:	2afd      	cmp	r2, #253	@ 0xfd
 8000b72:	f63f af50 	bhi.w	8000a16 <__aeabi_fmul+0x92>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b8c:	327f      	adds	r2, #127	@ 0x7f
 8000b8e:	bfc2      	ittt	gt
 8000b90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b98:	4770      	bxgt	lr
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f04f 0300 	mov.w	r3, #0
 8000ba2:	3a01      	subs	r2, #1
 8000ba4:	e737      	b.n	8000a16 <__aeabi_fmul+0x92>
 8000ba6:	f092 0f00 	teq	r2, #0
 8000baa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bae:	bf02      	ittt	eq
 8000bb0:	0040      	lsleq	r0, r0, #1
 8000bb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bb6:	3a01      	subeq	r2, #1
 8000bb8:	d0f9      	beq.n	8000bae <__aeabi_fdiv+0xc2>
 8000bba:	ea40 000c 	orr.w	r0, r0, ip
 8000bbe:	f093 0f00 	teq	r3, #0
 8000bc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc6:	bf02      	ittt	eq
 8000bc8:	0049      	lsleq	r1, r1, #1
 8000bca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bce:	3b01      	subeq	r3, #1
 8000bd0:	d0f9      	beq.n	8000bc6 <__aeabi_fdiv+0xda>
 8000bd2:	ea41 010c 	orr.w	r1, r1, ip
 8000bd6:	e795      	b.n	8000b04 <__aeabi_fdiv+0x18>
 8000bd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bdc:	ea92 0f0c 	teq	r2, ip
 8000be0:	d108      	bne.n	8000bf4 <__aeabi_fdiv+0x108>
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	f47f af7d 	bne.w	8000ae2 <__aeabi_fmul+0x15e>
 8000be8:	ea93 0f0c 	teq	r3, ip
 8000bec:	f47f af70 	bne.w	8000ad0 <__aeabi_fmul+0x14c>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	e776      	b.n	8000ae2 <__aeabi_fmul+0x15e>
 8000bf4:	ea93 0f0c 	teq	r3, ip
 8000bf8:	d104      	bne.n	8000c04 <__aeabi_fdiv+0x118>
 8000bfa:	024b      	lsls	r3, r1, #9
 8000bfc:	f43f af4c 	beq.w	8000a98 <__aeabi_fmul+0x114>
 8000c00:	4608      	mov	r0, r1
 8000c02:	e76e      	b.n	8000ae2 <__aeabi_fmul+0x15e>
 8000c04:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c08:	bf18      	it	ne
 8000c0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c0e:	d1ca      	bne.n	8000ba6 <__aeabi_fdiv+0xba>
 8000c10:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c14:	f47f af5c 	bne.w	8000ad0 <__aeabi_fmul+0x14c>
 8000c18:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c1c:	f47f af3c 	bne.w	8000a98 <__aeabi_fmul+0x114>
 8000c20:	e75f      	b.n	8000ae2 <__aeabi_fmul+0x15e>
 8000c22:	bf00      	nop

08000c24 <__gesf2>:
 8000c24:	f04f 3cff 	mov.w	ip, #4294967295
 8000c28:	e006      	b.n	8000c38 <__cmpsf2+0x4>
 8000c2a:	bf00      	nop

08000c2c <__lesf2>:
 8000c2c:	f04f 0c01 	mov.w	ip, #1
 8000c30:	e002      	b.n	8000c38 <__cmpsf2+0x4>
 8000c32:	bf00      	nop

08000c34 <__cmpsf2>:
 8000c34:	f04f 0c01 	mov.w	ip, #1
 8000c38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d011      	beq.n	8000c74 <__cmpsf2+0x40>
 8000c50:	b001      	add	sp, #4
 8000c52:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c56:	bf18      	it	ne
 8000c58:	ea90 0f01 	teqne	r0, r1
 8000c5c:	bf58      	it	pl
 8000c5e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c62:	bf88      	it	hi
 8000c64:	17c8      	asrhi	r0, r1, #31
 8000c66:	bf38      	it	cc
 8000c68:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c6c:	bf18      	it	ne
 8000c6e:	f040 0001 	orrne.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c78:	d102      	bne.n	8000c80 <__cmpsf2+0x4c>
 8000c7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c7e:	d105      	bne.n	8000c8c <__cmpsf2+0x58>
 8000c80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c84:	d1e4      	bne.n	8000c50 <__cmpsf2+0x1c>
 8000c86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c8a:	d0e1      	beq.n	8000c50 <__cmpsf2+0x1c>
 8000c8c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__aeabi_cfrcmple>:
 8000c94:	4684      	mov	ip, r0
 8000c96:	4608      	mov	r0, r1
 8000c98:	4661      	mov	r1, ip
 8000c9a:	e7ff      	b.n	8000c9c <__aeabi_cfcmpeq>

08000c9c <__aeabi_cfcmpeq>:
 8000c9c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c9e:	f7ff ffc9 	bl	8000c34 <__cmpsf2>
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	bf48      	it	mi
 8000ca6:	f110 0f00 	cmnmi.w	r0, #0
 8000caa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cac <__aeabi_fcmpeq>:
 8000cac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb0:	f7ff fff4 	bl	8000c9c <__aeabi_cfcmpeq>
 8000cb4:	bf0c      	ite	eq
 8000cb6:	2001      	moveq	r0, #1
 8000cb8:	2000      	movne	r0, #0
 8000cba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fcmplt>:
 8000cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc4:	f7ff ffea 	bl	8000c9c <__aeabi_cfcmpeq>
 8000cc8:	bf34      	ite	cc
 8000cca:	2001      	movcc	r0, #1
 8000ccc:	2000      	movcs	r0, #0
 8000cce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_fcmple>:
 8000cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd8:	f7ff ffe0 	bl	8000c9c <__aeabi_cfcmpeq>
 8000cdc:	bf94      	ite	ls
 8000cde:	2001      	movls	r0, #1
 8000ce0:	2000      	movhi	r0, #0
 8000ce2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_fcmpge>:
 8000ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cec:	f7ff ffd2 	bl	8000c94 <__aeabi_cfrcmple>
 8000cf0:	bf94      	ite	ls
 8000cf2:	2001      	movls	r0, #1
 8000cf4:	2000      	movhi	r0, #0
 8000cf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfa:	bf00      	nop

08000cfc <__aeabi_fcmpgt>:
 8000cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d00:	f7ff ffc8 	bl	8000c94 <__aeabi_cfrcmple>
 8000d04:	bf34      	ite	cc
 8000d06:	2001      	movcc	r0, #1
 8000d08:	2000      	movcs	r0, #0
 8000d0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d0e:	bf00      	nop

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f000 fafa 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f864 	bl	8000de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f000 f94c 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d20:	f000 f92c 	bl	8000f7c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000d24:	f007 fbd6 	bl	80084d4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000d28:	f000 f8ba 	bl	8000ea0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_values, 2);
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	4925      	ldr	r1, [pc, #148]	@ (8000dc4 <main+0xb4>)
 8000d30:	4825      	ldr	r0, [pc, #148]	@ (8000dc8 <main+0xb8>)
 8000d32:	f000 fc49 	bl	80015c8 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	 x=power_map(adc_values[0], 0, 4040, 10);
 8000d36:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <main+0xb4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	230a      	movs	r3, #10
 8000d3e:	f640 72c8 	movw	r2, #4040	@ 0xfc8
 8000d42:	2100      	movs	r1, #0
 8000d44:	f000 f997 	bl	8001076 <power_map>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <main+0xbc>)
 8000d4e:	701a      	strb	r2, [r3, #0]
	  	 y=power_map(adc_values[1], 0, 4040, 10);
 8000d50:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <main+0xb4>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	4618      	mov	r0, r3
 8000d56:	230a      	movs	r3, #10
 8000d58:	f640 72c8 	movw	r2, #4040	@ 0xfc8
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f000 f98a 	bl	8001076 <power_map>
 8000d62:	4603      	mov	r3, r0
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <main+0xc0>)
 8000d68:	701a      	strb	r2, [r3, #0]
	  	 pressed = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)==GPIO_PIN_SET)?0:1;
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	4819      	ldr	r0, [pc, #100]	@ (8000dd4 <main+0xc4>)
 8000d6e:	f001 fbf5 	bl	800255c <HAL_GPIO_ReadPin>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	bf14      	ite	ne
 8000d78:	2301      	movne	r3, #1
 8000d7a:	2300      	moveq	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <main+0xc8>)
 8000d82:	701a      	strb	r2, [r3, #0]
	  	 if(pressed){
 8000d84:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <main+0xc8>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <main+0x84>
	  		 buffer[0]=(1<<0);
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <main+0xcc>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e002      	b.n	8000d9a <main+0x8a>
	  	 }
	  	 else {
	  		 buffer[0]=0;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <main+0xcc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
	  	 }
	  	 buffer[1]= x;
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <main+0xbc>)
 8000d9c:	f993 3000 	ldrsb.w	r3, [r3]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <main+0xcc>)
 8000da4:	705a      	strb	r2, [r3, #1]
	  	 buffer[2]= y;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <main+0xc0>)
 8000da8:	f993 3000 	ldrsb.w	r3, [r3]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <main+0xcc>)
 8000db0:	709a      	strb	r2, [r3, #2]
	  	 USBD_HID_SendReport(&hUsbDeviceFS,  buffer, 4);
 8000db2:	2204      	movs	r2, #4
 8000db4:	4909      	ldr	r1, [pc, #36]	@ (8000ddc <main+0xcc>)
 8000db6:	480a      	ldr	r0, [pc, #40]	@ (8000de0 <main+0xd0>)
 8000db8:	f006 faa0 	bl	80072fc <USBD_HID_SendReport>
	  	 HAL_Delay(10);
 8000dbc:	200a      	movs	r0, #10
 8000dbe:	f000 fb07 	bl	80013d0 <HAL_Delay>
	  	 x=power_map(adc_values[0], 0, 4040, 10);
 8000dc2:	e7b8      	b.n	8000d36 <main+0x26>
 8000dc4:	200001f8 	.word	0x200001f8
 8000dc8:	20000180 	.word	0x20000180
 8000dcc:	20000200 	.word	0x20000200
 8000dd0:	20000201 	.word	0x20000201
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	20000202 	.word	0x20000202
 8000ddc:	200001f4 	.word	0x200001f4
 8000de0:	2000020c 	.word	0x2000020c

08000de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b094      	sub	sp, #80	@ 0x50
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dee:	2228      	movs	r2, #40	@ 0x28
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f007 ff26 	bl	8008c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e22:	2301      	movs	r3, #1
 8000e24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e26:	2302      	movs	r3, #2
 8000e28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 f8ee 	bl	800401c <HAL_RCC_OscConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e46:	f000 f954 	bl	80010f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000e5a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2101      	movs	r1, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f003 fb5a 	bl	8004520 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e72:	f000 f93e 	bl	80010f2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000e76:	2312      	movs	r3, #18
 8000e78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000e7a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e7e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e80:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e84:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fca5 	bl	80047d8 <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e94:	f000 f92d 	bl	80010f2 <Error_Handler>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3750      	adds	r7, #80	@ 0x50
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
 8000eb6:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f70 <MX_ADC1_Init+0xd0>)
 8000ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f74 <MX_ADC1_Init+0xd4>)
 8000ec6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <MX_ADC1_Init+0xd0>)
 8000eca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ece:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	@ (8000f70 <MX_ADC1_Init+0xd0>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <MX_ADC1_Init+0xd0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000edc:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <MX_ADC1_Init+0xd0>)
 8000ede:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000ee2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <MX_ADC1_Init+0xd0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000eea:	4b21      	ldr	r3, [pc, #132]	@ (8000f70 <MX_ADC1_Init+0xd0>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef0:	481f      	ldr	r0, [pc, #124]	@ (8000f70 <MX_ADC1_Init+0xd0>)
 8000ef2:	f000 fa91 	bl	8001418 <HAL_ADC_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8000efc:	f000 f8f9 	bl	80010f2 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <MX_ADC1_Init+0xd8>)
 8000f02:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4815      	ldr	r0, [pc, #84]	@ (8000f70 <MX_ADC1_Init+0xd0>)
 8000f1c:	f000 fd46 	bl	80019ac <HAL_ADC_AnalogWDGConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000f26:	f000 f8e4 	bl	80010f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000f32:	2304      	movs	r3, #4
 8000f34:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <MX_ADC1_Init+0xd0>)
 8000f3c:	f000 fc3e 	bl	80017bc <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f46:	f000 f8d4 	bl	80010f2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	@ (8000f70 <MX_ADC1_Init+0xd0>)
 8000f58:	f000 fc30 	bl	80017bc <HAL_ADC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f62:	f000 f8c6 	bl	80010f2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	@ 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000180 	.word	0x20000180
 8000f74:	40012400 	.word	0x40012400
 8000f78:	00800200 	.word	0x00800200

08000f7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <MX_DMA_Init+0x38>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb4 <MX_DMA_Init+0x38>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6153      	str	r3, [r2, #20]
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <MX_DMA_Init+0x38>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	200b      	movs	r0, #11
 8000fa0:	f000 ff33 	bl	8001e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fa4:	200b      	movs	r0, #11
 8000fa6:	f000 ff4c 	bl	8001e42 <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <MX_GPIO_Init+0x64>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a12      	ldr	r2, [pc, #72]	@ (800101c <MX_GPIO_Init+0x64>)
 8000fd2:	f043 0320 	orr.w	r3, r3, #32
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b10      	ldr	r3, [pc, #64]	@ (800101c <MX_GPIO_Init+0x64>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <MX_GPIO_Init+0x64>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800101c <MX_GPIO_Init+0x64>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <MX_GPIO_Init+0x64>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001004:	2301      	movs	r3, #1
 8001006:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	4619      	mov	r1, r3
 800100e:	4804      	ldr	r0, [pc, #16]	@ (8001020 <MX_GPIO_Init+0x68>)
 8001010:	f001 f920 	bl	8002254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40021000 	.word	0x40021000
 8001020:	40010800 	.word	0x40010800

08001024 <normalize>:

/* USER CODE BEGIN 4 */
float normalize(uint32_t input, uint32_t min, uint32_t max){
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
	return (2*(float)(input-min)/(max-min))-1;
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fc4c 	bl	80008d4 <__aeabi_ui2f>
 800103c:	4603      	mov	r3, r0
 800103e:	4619      	mov	r1, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fb97 	bl	8000774 <__addsf3>
 8001046:	4603      	mov	r3, r0
 8001048:	461c      	mov	r4, r3
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fc3f 	bl	80008d4 <__aeabi_ui2f>
 8001056:	4603      	mov	r3, r0
 8001058:	4619      	mov	r1, r3
 800105a:	4620      	mov	r0, r4
 800105c:	f7ff fd46 	bl	8000aec <__aeabi_fdiv>
 8001060:	4603      	mov	r3, r0
 8001062:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fb82 	bl	8000770 <__aeabi_fsub>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bd90      	pop	{r4, r7, pc}

08001076 <power_map>:

int8_t power_map(int32_t input, int32_t in_min, int32_t in_max, int32_t out_extreme) {
 8001076:	b5b0      	push	{r4, r5, r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	603b      	str	r3, [r7, #0]
    float normalized = normalize(input, in_min, in_max);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ffca 	bl	8001024 <normalize>
 8001090:	6138      	str	r0, [r7, #16]
    int sign=1;
 8001092:	2301      	movs	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
    if (normalized<0){
 8001096:	f04f 0100 	mov.w	r1, #0
 800109a:	6938      	ldr	r0, [r7, #16]
 800109c:	f7ff fe10 	bl	8000cc0 <__aeabi_fcmplt>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <power_map+0x36>
    	sign=-1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	617b      	str	r3, [r7, #20]
    }
    return (int8_t)sign*out_extreme*pow(fabs(normalized),1);
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	fb02 f303 	mul.w	r3, r2, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fac3 	bl	8000644 <__aeabi_i2d>
 80010be:	4604      	mov	r4, r0
 80010c0:	460d      	mov	r5, r1
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff facd 	bl	8000668 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4620      	mov	r0, r4
 80010d4:	4629      	mov	r1, r5
 80010d6:	f7ff f839 	bl	800014c <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fb19 	bl	8000718 <__aeabi_d2iz>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b25b      	sxtb	r3, r3
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bdb0      	pop	{r4, r5, r7, pc}

080010f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f6:	b672      	cpsid	i
}
 80010f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fa:	bf00      	nop
 80010fc:	e7fd      	b.n	80010fa <Error_Handler+0x8>
	...

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_MspInit+0x5c>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4a14      	ldr	r2, [pc, #80]	@ (800115c <HAL_MspInit+0x5c>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6193      	str	r3, [r2, #24]
 8001112:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_MspInit+0x5c>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <HAL_MspInit+0x5c>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a0e      	ldr	r2, [pc, #56]	@ (800115c <HAL_MspInit+0x5c>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <HAL_MspInit+0x5c>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_MspInit+0x60>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <HAL_MspInit+0x60>)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000
 8001160:	40010000 	.word	0x40010000

08001164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a28      	ldr	r2, [pc, #160]	@ (8001220 <HAL_ADC_MspInit+0xbc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d149      	bne.n	8001218 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001184:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <HAL_ADC_MspInit+0xc0>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a26      	ldr	r2, [pc, #152]	@ (8001224 <HAL_ADC_MspInit+0xc0>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <HAL_ADC_MspInit+0xc0>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <HAL_ADC_MspInit+0xc0>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a20      	ldr	r2, [pc, #128]	@ (8001224 <HAL_ADC_MspInit+0xc0>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <HAL_ADC_MspInit+0xc0>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011b4:	2303      	movs	r3, #3
 80011b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b8:	2303      	movs	r3, #3
 80011ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	4819      	ldr	r0, [pc, #100]	@ (8001228 <HAL_ADC_MspInit+0xc4>)
 80011c4:	f001 f846 	bl	8002254 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <HAL_ADC_MspInit+0xc8>)
 80011ca:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <HAL_ADC_MspInit+0xcc>)
 80011cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <HAL_ADC_MspInit+0xc8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <HAL_ADC_MspInit+0xc8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <HAL_ADC_MspInit+0xc8>)
 80011dc:	2280      	movs	r2, #128	@ 0x80
 80011de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_ADC_MspInit+0xc8>)
 80011e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <HAL_ADC_MspInit+0xc8>)
 80011ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <HAL_ADC_MspInit+0xc8>)
 80011f2:	2220      	movs	r2, #32
 80011f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <HAL_ADC_MspInit+0xc8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011fc:	480b      	ldr	r0, [pc, #44]	@ (800122c <HAL_ADC_MspInit+0xc8>)
 80011fe:	f000 fe3b 	bl	8001e78 <HAL_DMA_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001208:	f7ff ff73 	bl	80010f2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a07      	ldr	r2, [pc, #28]	@ (800122c <HAL_ADC_MspInit+0xc8>)
 8001210:	621a      	str	r2, [r3, #32]
 8001212:	4a06      	ldr	r2, [pc, #24]	@ (800122c <HAL_ADC_MspInit+0xc8>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40012400 	.word	0x40012400
 8001224:	40021000 	.word	0x40021000
 8001228:	40010800 	.word	0x40010800
 800122c:	200001b0 	.word	0x200001b0
 8001230:	40020008 	.word	0x40020008

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <NMI_Handler+0x4>

0800123c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <MemManage_Handler+0x4>

0800124c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <UsageFault_Handler+0x4>

0800125c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 f888 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <DMA1_Channel1_IRQHandler+0x10>)
 8001292:	f000 feab 	bl	8001fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200001b0 	.word	0x200001b0

080012a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80012a6:	f001 fa8c 	bl	80027c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200006d0 	.word	0x200006d0

080012b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c0:	f7ff fff8 	bl	80012b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480b      	ldr	r0, [pc, #44]	@ (80012f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012c6:	490c      	ldr	r1, [pc, #48]	@ (80012f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012c8:	4a0c      	ldr	r2, [pc, #48]	@ (80012fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a09      	ldr	r2, [pc, #36]	@ (8001300 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012dc:	4c09      	ldr	r4, [pc, #36]	@ (8001304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ea:	f007 fcb3 	bl	8008c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ee:	f7ff fd0f 	bl	8000d10 <main>
  bx lr
 80012f2:	4770      	bx	lr
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80012fc:	08008d28 	.word	0x08008d28
  ldr r2, =_sbss
 8001300:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001304:	200009bc 	.word	0x200009bc

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <HAL_Init+0x28>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	@ (8001334 <HAL_Init+0x28>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 fd69 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	200f      	movs	r0, #15
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff feea 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fd81 	bl	8001e5e <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 fd49 	bl	8001e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	@ (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000000 	.word	0x20000000
 8001390:	20000008 	.word	0x20000008
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <HAL_IncTick+0x1c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <HAL_IncTick+0x20>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a03      	ldr	r2, [pc, #12]	@ (80013b8 <HAL_IncTick+0x20>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000204 	.word	0x20000204

080013bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b02      	ldr	r3, [pc, #8]	@ (80013cc <HAL_GetTick+0x10>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000204 	.word	0x20000204

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff fff0 	bl	80013bc <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_Delay+0x44>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffe0 	bl	80013bc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008

08001418 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0be      	b.n	80015b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001444:	2b00      	cmp	r3, #0
 8001446:	d109      	bne.n	800145c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fe84 	bl	8001164 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fb55 	bl	8001b0c <ADC_ConversionStop_Disable>
 8001462:	4603      	mov	r3, r0
 8001464:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	f040 8099 	bne.w	80015a6 <HAL_ADC_Init+0x18e>
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 8095 	bne.w	80015a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001480:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001484:	f023 0302 	bic.w	r3, r3, #2
 8001488:	f043 0202 	orr.w	r2, r3, #2
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001498:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7b1b      	ldrb	r3, [r3, #12]
 800149e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014b0:	d003      	beq.n	80014ba <HAL_ADC_Init+0xa2>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d102      	bne.n	80014c0 <HAL_ADC_Init+0xa8>
 80014ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014be:	e000      	b.n	80014c2 <HAL_ADC_Init+0xaa>
 80014c0:	2300      	movs	r3, #0
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7d1b      	ldrb	r3, [r3, #20]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d119      	bne.n	8001504 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7b1b      	ldrb	r3, [r3, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d109      	bne.n	80014ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	3b01      	subs	r3, #1
 80014de:	035a      	lsls	r2, r3, #13
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	e00b      	b.n	8001504 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	f043 0220 	orr.w	r2, r3, #32
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	430a      	orrs	r2, r1
 8001516:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <HAL_ADC_Init+0x1a8>)
 8001520:	4013      	ands	r3, r2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	430b      	orrs	r3, r1
 800152a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001534:	d003      	beq.n	800153e <HAL_ADC_Init+0x126>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d104      	bne.n	8001548 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	3b01      	subs	r3, #1
 8001544:	051b      	lsls	r3, r3, #20
 8001546:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	430a      	orrs	r2, r1
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <HAL_ADC_Init+0x1ac>)
 8001564:	4013      	ands	r3, r2
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	429a      	cmp	r2, r3
 800156a:	d10b      	bne.n	8001584 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001576:	f023 0303 	bic.w	r3, r3, #3
 800157a:	f043 0201 	orr.w	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001582:	e018      	b.n	80015b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	f023 0312 	bic.w	r3, r3, #18
 800158c:	f043 0210 	orr.w	r2, r3, #16
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015a4:	e007      	b.n	80015b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015aa:	f043 0210 	orr.w	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	ffe1f7fd 	.word	0xffe1f7fd
 80015c4:	ff1f0efe 	.word	0xff1f0efe

080015c8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a64      	ldr	r2, [pc, #400]	@ (8001770 <HAL_ADC_Start_DMA+0x1a8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d004      	beq.n	80015ec <HAL_ADC_Start_DMA+0x24>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a63      	ldr	r2, [pc, #396]	@ (8001774 <HAL_ADC_Start_DMA+0x1ac>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d106      	bne.n	80015fa <HAL_ADC_Start_DMA+0x32>
 80015ec:	4b60      	ldr	r3, [pc, #384]	@ (8001770 <HAL_ADC_Start_DMA+0x1a8>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f040 80b3 	bne.w	8001760 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_ADC_Start_DMA+0x40>
 8001604:	2302      	movs	r3, #2
 8001606:	e0ae      	b.n	8001766 <HAL_ADC_Start_DMA+0x19e>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 fa21 	bl	8001a58 <ADC_Enable>
 8001616:	4603      	mov	r3, r0
 8001618:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 809a 	bne.w	8001756 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001626:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a4e      	ldr	r2, [pc, #312]	@ (8001774 <HAL_ADC_Start_DMA+0x1ac>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d105      	bne.n	800164c <HAL_ADC_Start_DMA+0x84>
 8001640:	4b4b      	ldr	r3, [pc, #300]	@ (8001770 <HAL_ADC_Start_DMA+0x1a8>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d115      	bne.n	8001678 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001650:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001662:	2b00      	cmp	r3, #0
 8001664:	d026      	beq.n	80016b4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800166e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001676:	e01d      	b.n	80016b4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a39      	ldr	r2, [pc, #228]	@ (8001770 <HAL_ADC_Start_DMA+0x1a8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d004      	beq.n	8001698 <HAL_ADC_Start_DMA+0xd0>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a38      	ldr	r2, [pc, #224]	@ (8001774 <HAL_ADC_Start_DMA+0x1ac>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d10d      	bne.n	80016b4 <HAL_ADC_Start_DMA+0xec>
 8001698:	4b35      	ldr	r3, [pc, #212]	@ (8001770 <HAL_ADC_Start_DMA+0x1a8>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d007      	beq.n	80016b4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d006      	beq.n	80016ce <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c4:	f023 0206 	bic.w	r2, r3, #6
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016cc:	e002      	b.n	80016d4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a25      	ldr	r2, [pc, #148]	@ (8001778 <HAL_ADC_Start_DMA+0x1b0>)
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4a24      	ldr	r2, [pc, #144]	@ (800177c <HAL_ADC_Start_DMA+0x1b4>)
 80016ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a23      	ldr	r2, [pc, #140]	@ (8001780 <HAL_ADC_Start_DMA+0x1b8>)
 80016f2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f06f 0202 	mvn.w	r2, #2
 80016fc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800170c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a18      	ldr	r0, [r3, #32]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	334c      	adds	r3, #76	@ 0x4c
 8001718:	4619      	mov	r1, r3
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f000 fc05 	bl	8001f2c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800172c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001730:	d108      	bne.n	8001744 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001740:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001742:	e00f      	b.n	8001764 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001752:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001754:	e006      	b.n	8001764 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800175e:	e001      	b.n	8001764 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001764:	7dfb      	ldrb	r3, [r7, #23]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40012400 	.word	0x40012400
 8001774:	40012800 	.word	0x40012800
 8001778:	08001b8f 	.word	0x08001b8f
 800177c:	08001c0b 	.word	0x08001c0b
 8001780:	08001c27 	.word	0x08001c27

08001784 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
	...

080017bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x20>
 80017d8:	2302      	movs	r3, #2
 80017da:	e0dc      	b.n	8001996 <HAL_ADC_ConfigChannel+0x1da>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	d81c      	bhi.n	8001826 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	3b05      	subs	r3, #5
 80017fe:	221f      	movs	r2, #31
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	4019      	ands	r1, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	3b05      	subs	r3, #5
 8001818:	fa00 f203 	lsl.w	r2, r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	635a      	str	r2, [r3, #52]	@ 0x34
 8001824:	e03c      	b.n	80018a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b0c      	cmp	r3, #12
 800182c:	d81c      	bhi.n	8001868 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	3b23      	subs	r3, #35	@ 0x23
 8001840:	221f      	movs	r2, #31
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	4019      	ands	r1, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	3b23      	subs	r3, #35	@ 0x23
 800185a:	fa00 f203 	lsl.w	r2, r0, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	631a      	str	r2, [r3, #48]	@ 0x30
 8001866:	e01b      	b.n	80018a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b41      	subs	r3, #65	@ 0x41
 800187a:	221f      	movs	r2, #31
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	4019      	ands	r1, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	3b41      	subs	r3, #65	@ 0x41
 8001894:	fa00 f203 	lsl.w	r2, r0, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b09      	cmp	r3, #9
 80018a6:	d91c      	bls.n	80018e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68d9      	ldr	r1, [r3, #12]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	3b1e      	subs	r3, #30
 80018ba:	2207      	movs	r2, #7
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4019      	ands	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6898      	ldr	r0, [r3, #8]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	3b1e      	subs	r3, #30
 80018d4:	fa00 f203 	lsl.w	r2, r0, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	e019      	b.n	8001916 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6919      	ldr	r1, [r3, #16]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	2207      	movs	r2, #7
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4019      	ands	r1, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6898      	ldr	r0, [r3, #8]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	fa00 f203 	lsl.w	r2, r0, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d003      	beq.n	8001926 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001922:	2b11      	cmp	r3, #17
 8001924:	d132      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1d      	ldr	r2, [pc, #116]	@ (80019a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d125      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d126      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800194c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b10      	cmp	r3, #16
 8001954:	d11a      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001956:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a13      	ldr	r2, [pc, #76]	@ (80019a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	0c9a      	lsrs	r2, r3, #18
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800196c:	e002      	b.n	8001974 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3b01      	subs	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f9      	bne.n	800196e <HAL_ADC_ConfigChannel+0x1b2>
 800197a:	e007      	b.n	800198c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40012400 	.word	0x40012400
 80019a4:	20000000 	.word	0x20000000
 80019a8:	431bde83 	.word	0x431bde83

080019ac <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a24      	ldr	r2, [pc, #144]	@ (8001a4c <HAL_ADC_AnalogWDGConfig+0xa0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d003      	beq.n	80019c8 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80019c4:	4a22      	ldr	r2, [pc, #136]	@ (8001a50 <HAL_ADC_AnalogWDGConfig+0xa4>)
 80019c6:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_AnalogWDGConfig+0x2a>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e035      	b.n	8001a42 <HAL_ADC_AnalogWDGConfig+0x96>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	7a1b      	ldrb	r3, [r3, #8]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d108      	bne.n	80019f8 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	e007      	b.n	8001a08 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a06:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	6811      	ldr	r1, [r2, #0]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	6852      	ldr	r2, [r2, #4]
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	430b      	orrs	r3, r1
 8001a22:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	68d2      	ldr	r2, [r2, #12]
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	6912      	ldr	r2, [r2, #16]
 8001a36:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	00800200 	.word	0x00800200
 8001a50:	00400200 	.word	0x00400200
 8001a54:	ff3ffde0 	.word	0xff3ffde0

08001a58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d040      	beq.n	8001af8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a86:	4b1f      	ldr	r3, [pc, #124]	@ (8001b04 <ADC_Enable+0xac>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b08 <ADC_Enable+0xb0>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	0c9b      	lsrs	r3, r3, #18
 8001a92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a94:	e002      	b.n	8001a9c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f9      	bne.n	8001a96 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aa2:	f7ff fc8b 	bl	80013bc <HAL_GetTick>
 8001aa6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001aa8:	e01f      	b.n	8001aea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001aaa:	f7ff fc87 	bl	80013bc <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d918      	bls.n	8001aea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d011      	beq.n	8001aea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e007      	b.n	8001afa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d1d8      	bne.n	8001aaa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000
 8001b08:	431bde83 	.word	0x431bde83

08001b0c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d12e      	bne.n	8001b84 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0201 	bic.w	r2, r2, #1
 8001b34:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b36:	f7ff fc41 	bl	80013bc <HAL_GetTick>
 8001b3a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b3c:	e01b      	b.n	8001b76 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b3e:	f7ff fc3d 	bl	80013bc <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d914      	bls.n	8001b76 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d10d      	bne.n	8001b76 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5e:	f043 0210 	orr.w	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e007      	b.n	8001b86 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d0dc      	beq.n	8001b3e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d127      	bne.n	8001bf8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001bbe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001bc2:	d115      	bne.n	8001bf0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d111      	bne.n	8001bf0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	f043 0201 	orr.w	r2, r3, #1
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f7ff fdc7 	bl	8001784 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001bf6:	e004      	b.n	8001c02 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	4798      	blx	r3
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f7ff fdbc 	bl	8001796 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c32:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	f043 0204 	orr.w	r2, r3, #4
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff fdab 	bl	80017a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4906      	ldr	r1, [pc, #24]	@ (8001cf4 <__NVIC_EnableIRQ+0x34>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	@ (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	@ (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	@ 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	@ 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f7ff ff90 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff2d 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1c:	f7ff ff42 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f7ff ff90 	bl	8001d4c <NVIC_EncodePriority>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff5f 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff35 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffa2 	bl	8001db0 <SysTick_Config>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e043      	b.n	8001f16 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <HAL_DMA_Init+0xa8>)
 8001e96:	4413      	add	r3, r2
 8001e98:	4a22      	ldr	r2, [pc, #136]	@ (8001f24 <HAL_DMA_Init+0xac>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	009a      	lsls	r2, r3, #2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f28 <HAL_DMA_Init+0xb0>)
 8001eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ec2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ec6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	bffdfff8 	.word	0xbffdfff8
 8001f24:	cccccccd 	.word	0xcccccccd
 8001f28:	40020000 	.word	0x40020000

08001f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_DMA_Start_IT+0x20>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e04b      	b.n	8001fe4 <HAL_DMA_Start_IT+0xb8>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d13a      	bne.n	8001fd6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	68b9      	ldr	r1, [r7, #8]
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f937 	bl	80021f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 020e 	orr.w	r2, r2, #14
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e00f      	b.n	8001fc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0204 	bic.w	r2, r2, #4
 8001fb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 020a 	orr.w	r2, r2, #10
 8001fc2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e005      	b.n	8001fe2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	2204      	movs	r2, #4
 800200a:	409a      	lsls	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d04f      	beq.n	80020b4 <HAL_DMA_IRQHandler+0xc8>
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d04a      	beq.n	80020b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	2b00      	cmp	r3, #0
 800202a:	d107      	bne.n	800203c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0204 	bic.w	r2, r2, #4
 800203a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a66      	ldr	r2, [pc, #408]	@ (80021dc <HAL_DMA_IRQHandler+0x1f0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d029      	beq.n	800209a <HAL_DMA_IRQHandler+0xae>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a65      	ldr	r2, [pc, #404]	@ (80021e0 <HAL_DMA_IRQHandler+0x1f4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d022      	beq.n	8002096 <HAL_DMA_IRQHandler+0xaa>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a63      	ldr	r2, [pc, #396]	@ (80021e4 <HAL_DMA_IRQHandler+0x1f8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01a      	beq.n	8002090 <HAL_DMA_IRQHandler+0xa4>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a62      	ldr	r2, [pc, #392]	@ (80021e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d012      	beq.n	800208a <HAL_DMA_IRQHandler+0x9e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a60      	ldr	r2, [pc, #384]	@ (80021ec <HAL_DMA_IRQHandler+0x200>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00a      	beq.n	8002084 <HAL_DMA_IRQHandler+0x98>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a5f      	ldr	r2, [pc, #380]	@ (80021f0 <HAL_DMA_IRQHandler+0x204>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d102      	bne.n	800207e <HAL_DMA_IRQHandler+0x92>
 8002078:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800207c:	e00e      	b.n	800209c <HAL_DMA_IRQHandler+0xb0>
 800207e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002082:	e00b      	b.n	800209c <HAL_DMA_IRQHandler+0xb0>
 8002084:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002088:	e008      	b.n	800209c <HAL_DMA_IRQHandler+0xb0>
 800208a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800208e:	e005      	b.n	800209c <HAL_DMA_IRQHandler+0xb0>
 8002090:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002094:	e002      	b.n	800209c <HAL_DMA_IRQHandler+0xb0>
 8002096:	2340      	movs	r3, #64	@ 0x40
 8002098:	e000      	b.n	800209c <HAL_DMA_IRQHandler+0xb0>
 800209a:	2304      	movs	r3, #4
 800209c:	4a55      	ldr	r2, [pc, #340]	@ (80021f4 <HAL_DMA_IRQHandler+0x208>)
 800209e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8094 	beq.w	80021d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020b2:	e08e      	b.n	80021d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	2202      	movs	r2, #2
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d056      	beq.n	8002172 <HAL_DMA_IRQHandler+0x186>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d051      	beq.n	8002172 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10b      	bne.n	80020f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 020a 	bic.w	r2, r2, #10
 80020ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a38      	ldr	r2, [pc, #224]	@ (80021dc <HAL_DMA_IRQHandler+0x1f0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d029      	beq.n	8002152 <HAL_DMA_IRQHandler+0x166>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a37      	ldr	r2, [pc, #220]	@ (80021e0 <HAL_DMA_IRQHandler+0x1f4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d022      	beq.n	800214e <HAL_DMA_IRQHandler+0x162>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a35      	ldr	r2, [pc, #212]	@ (80021e4 <HAL_DMA_IRQHandler+0x1f8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01a      	beq.n	8002148 <HAL_DMA_IRQHandler+0x15c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a34      	ldr	r2, [pc, #208]	@ (80021e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d012      	beq.n	8002142 <HAL_DMA_IRQHandler+0x156>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a32      	ldr	r2, [pc, #200]	@ (80021ec <HAL_DMA_IRQHandler+0x200>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00a      	beq.n	800213c <HAL_DMA_IRQHandler+0x150>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a31      	ldr	r2, [pc, #196]	@ (80021f0 <HAL_DMA_IRQHandler+0x204>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d102      	bne.n	8002136 <HAL_DMA_IRQHandler+0x14a>
 8002130:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002134:	e00e      	b.n	8002154 <HAL_DMA_IRQHandler+0x168>
 8002136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800213a:	e00b      	b.n	8002154 <HAL_DMA_IRQHandler+0x168>
 800213c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002140:	e008      	b.n	8002154 <HAL_DMA_IRQHandler+0x168>
 8002142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002146:	e005      	b.n	8002154 <HAL_DMA_IRQHandler+0x168>
 8002148:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800214c:	e002      	b.n	8002154 <HAL_DMA_IRQHandler+0x168>
 800214e:	2320      	movs	r3, #32
 8002150:	e000      	b.n	8002154 <HAL_DMA_IRQHandler+0x168>
 8002152:	2302      	movs	r3, #2
 8002154:	4a27      	ldr	r2, [pc, #156]	@ (80021f4 <HAL_DMA_IRQHandler+0x208>)
 8002156:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	2b00      	cmp	r3, #0
 8002166:	d034      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002170:	e02f      	b.n	80021d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	2208      	movs	r2, #8
 8002178:	409a      	lsls	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d028      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x1e8>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d023      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 020e 	bic.w	r2, r2, #14
 800219a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f202 	lsl.w	r2, r1, r2
 80021aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d004      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
    }
  }
  return;
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
}
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40020008 	.word	0x40020008
 80021e0:	4002001c 	.word	0x4002001c
 80021e4:	40020030 	.word	0x40020030
 80021e8:	40020044 	.word	0x40020044
 80021ec:	40020058 	.word	0x40020058
 80021f0:	4002006c 	.word	0x4002006c
 80021f4:	40020000 	.word	0x40020000

080021f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220e:	2101      	movs	r1, #1
 8002210:	fa01 f202 	lsl.w	r2, r1, r2
 8002214:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b10      	cmp	r3, #16
 8002224:	d108      	bne.n	8002238 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002236:	e007      	b.n	8002248 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	60da      	str	r2, [r3, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
	...

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b480      	push	{r7}
 8002256:	b08b      	sub	sp, #44	@ 0x2c
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002266:	e169      	b.n	800253c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002268:	2201      	movs	r2, #1
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	429a      	cmp	r2, r3
 8002282:	f040 8158 	bne.w	8002536 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a9a      	ldr	r2, [pc, #616]	@ (80024f4 <HAL_GPIO_Init+0x2a0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d05e      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 8002290:	4a98      	ldr	r2, [pc, #608]	@ (80024f4 <HAL_GPIO_Init+0x2a0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d875      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 8002296:	4a98      	ldr	r2, [pc, #608]	@ (80024f8 <HAL_GPIO_Init+0x2a4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d058      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 800229c:	4a96      	ldr	r2, [pc, #600]	@ (80024f8 <HAL_GPIO_Init+0x2a4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d86f      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022a2:	4a96      	ldr	r2, [pc, #600]	@ (80024fc <HAL_GPIO_Init+0x2a8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d052      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 80022a8:	4a94      	ldr	r2, [pc, #592]	@ (80024fc <HAL_GPIO_Init+0x2a8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d869      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022ae:	4a94      	ldr	r2, [pc, #592]	@ (8002500 <HAL_GPIO_Init+0x2ac>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d04c      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 80022b4:	4a92      	ldr	r2, [pc, #584]	@ (8002500 <HAL_GPIO_Init+0x2ac>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d863      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022ba:	4a92      	ldr	r2, [pc, #584]	@ (8002504 <HAL_GPIO_Init+0x2b0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d046      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 80022c0:	4a90      	ldr	r2, [pc, #576]	@ (8002504 <HAL_GPIO_Init+0x2b0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d85d      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022c6:	2b12      	cmp	r3, #18
 80022c8:	d82a      	bhi.n	8002320 <HAL_GPIO_Init+0xcc>
 80022ca:	2b12      	cmp	r3, #18
 80022cc:	d859      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022ce:	a201      	add	r2, pc, #4	@ (adr r2, 80022d4 <HAL_GPIO_Init+0x80>)
 80022d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d4:	0800234f 	.word	0x0800234f
 80022d8:	08002329 	.word	0x08002329
 80022dc:	0800233b 	.word	0x0800233b
 80022e0:	0800237d 	.word	0x0800237d
 80022e4:	08002383 	.word	0x08002383
 80022e8:	08002383 	.word	0x08002383
 80022ec:	08002383 	.word	0x08002383
 80022f0:	08002383 	.word	0x08002383
 80022f4:	08002383 	.word	0x08002383
 80022f8:	08002383 	.word	0x08002383
 80022fc:	08002383 	.word	0x08002383
 8002300:	08002383 	.word	0x08002383
 8002304:	08002383 	.word	0x08002383
 8002308:	08002383 	.word	0x08002383
 800230c:	08002383 	.word	0x08002383
 8002310:	08002383 	.word	0x08002383
 8002314:	08002383 	.word	0x08002383
 8002318:	08002331 	.word	0x08002331
 800231c:	08002345 	.word	0x08002345
 8002320:	4a79      	ldr	r2, [pc, #484]	@ (8002508 <HAL_GPIO_Init+0x2b4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002326:	e02c      	b.n	8002382 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	623b      	str	r3, [r7, #32]
          break;
 800232e:	e029      	b.n	8002384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	3304      	adds	r3, #4
 8002336:	623b      	str	r3, [r7, #32]
          break;
 8002338:	e024      	b.n	8002384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	3308      	adds	r3, #8
 8002340:	623b      	str	r3, [r7, #32]
          break;
 8002342:	e01f      	b.n	8002384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	330c      	adds	r3, #12
 800234a:	623b      	str	r3, [r7, #32]
          break;
 800234c:	e01a      	b.n	8002384 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002356:	2304      	movs	r3, #4
 8002358:	623b      	str	r3, [r7, #32]
          break;
 800235a:	e013      	b.n	8002384 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d105      	bne.n	8002370 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002364:	2308      	movs	r3, #8
 8002366:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	611a      	str	r2, [r3, #16]
          break;
 800236e:	e009      	b.n	8002384 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002370:	2308      	movs	r3, #8
 8002372:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	615a      	str	r2, [r3, #20]
          break;
 800237a:	e003      	b.n	8002384 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
          break;
 8002380:	e000      	b.n	8002384 <HAL_GPIO_Init+0x130>
          break;
 8002382:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2bff      	cmp	r3, #255	@ 0xff
 8002388:	d801      	bhi.n	800238e <HAL_GPIO_Init+0x13a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	e001      	b.n	8002392 <HAL_GPIO_Init+0x13e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2bff      	cmp	r3, #255	@ 0xff
 8002398:	d802      	bhi.n	80023a0 <HAL_GPIO_Init+0x14c>
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	e002      	b.n	80023a6 <HAL_GPIO_Init+0x152>
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	3b08      	subs	r3, #8
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	210f      	movs	r1, #15
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	401a      	ands	r2, r3
 80023b8:	6a39      	ldr	r1, [r7, #32]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	431a      	orrs	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80b1 	beq.w	8002536 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023d4:	4b4d      	ldr	r3, [pc, #308]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a4c      	ldr	r2, [pc, #304]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b4a      	ldr	r3, [pc, #296]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023ec:	4a48      	ldr	r2, [pc, #288]	@ (8002510 <HAL_GPIO_Init+0x2bc>)
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4013      	ands	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a40      	ldr	r2, [pc, #256]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d013      	beq.n	8002440 <HAL_GPIO_Init+0x1ec>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a3f      	ldr	r2, [pc, #252]	@ (8002518 <HAL_GPIO_Init+0x2c4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d00d      	beq.n	800243c <HAL_GPIO_Init+0x1e8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3e      	ldr	r2, [pc, #248]	@ (800251c <HAL_GPIO_Init+0x2c8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d007      	beq.n	8002438 <HAL_GPIO_Init+0x1e4>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a3d      	ldr	r2, [pc, #244]	@ (8002520 <HAL_GPIO_Init+0x2cc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d101      	bne.n	8002434 <HAL_GPIO_Init+0x1e0>
 8002430:	2303      	movs	r3, #3
 8002432:	e006      	b.n	8002442 <HAL_GPIO_Init+0x1ee>
 8002434:	2304      	movs	r3, #4
 8002436:	e004      	b.n	8002442 <HAL_GPIO_Init+0x1ee>
 8002438:	2302      	movs	r3, #2
 800243a:	e002      	b.n	8002442 <HAL_GPIO_Init+0x1ee>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_GPIO_Init+0x1ee>
 8002440:	2300      	movs	r3, #0
 8002442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002444:	f002 0203 	and.w	r2, r2, #3
 8002448:	0092      	lsls	r2, r2, #2
 800244a:	4093      	lsls	r3, r2
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002452:	492f      	ldr	r1, [pc, #188]	@ (8002510 <HAL_GPIO_Init+0x2bc>)
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800246c:	4b2d      	ldr	r3, [pc, #180]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	492c      	ldr	r1, [pc, #176]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]
 8002478:	e006      	b.n	8002488 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800247a:	4b2a      	ldr	r3, [pc, #168]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	43db      	mvns	r3, r3
 8002482:	4928      	ldr	r1, [pc, #160]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 8002484:	4013      	ands	r3, r2
 8002486:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d006      	beq.n	80024a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002494:	4b23      	ldr	r3, [pc, #140]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	4922      	ldr	r1, [pc, #136]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	60cb      	str	r3, [r1, #12]
 80024a0:	e006      	b.n	80024b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024a2:	4b20      	ldr	r3, [pc, #128]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	491e      	ldr	r1, [pc, #120]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	4918      	ldr	r1, [pc, #96]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
 80024c8:	e006      	b.n	80024d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024ca:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	4914      	ldr	r1, [pc, #80]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d021      	beq.n	8002528 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	490e      	ldr	r1, [pc, #56]	@ (8002524 <HAL_GPIO_Init+0x2d0>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
 80024f0:	e021      	b.n	8002536 <HAL_GPIO_Init+0x2e2>
 80024f2:	bf00      	nop
 80024f4:	10320000 	.word	0x10320000
 80024f8:	10310000 	.word	0x10310000
 80024fc:	10220000 	.word	0x10220000
 8002500:	10210000 	.word	0x10210000
 8002504:	10120000 	.word	0x10120000
 8002508:	10110000 	.word	0x10110000
 800250c:	40021000 	.word	0x40021000
 8002510:	40010000 	.word	0x40010000
 8002514:	40010800 	.word	0x40010800
 8002518:	40010c00 	.word	0x40010c00
 800251c:	40011000 	.word	0x40011000
 8002520:	40011400 	.word	0x40011400
 8002524:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_GPIO_Init+0x304>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	43db      	mvns	r3, r3
 8002530:	4909      	ldr	r1, [pc, #36]	@ (8002558 <HAL_GPIO_Init+0x304>)
 8002532:	4013      	ands	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	3301      	adds	r3, #1
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	f47f ae8e 	bne.w	8002268 <HAL_GPIO_Init+0x14>
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	372c      	adds	r7, #44	@ 0x2c
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	40010400 	.word	0x40010400

0800255c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	887b      	ldrh	r3, [r7, #2]
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	e001      	b.n	800257e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800257e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0e8      	b.n	800276e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d106      	bne.n	80025b6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f006 f8c3 	bl	800873c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2203      	movs	r2, #3
 80025ba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 f9de 	bl	800498a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3304      	adds	r3, #4
 80025d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d8:	f002 f9b4 	bl	8004944 <USB_CoreInit>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0bf      	b.n	800276e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 f9e2 	bl	80049be <USB_SetCurrentMode>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0b0      	b.n	800276e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	e03e      	b.n	8002690 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	3311      	adds	r3, #17
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	3310      	adds	r3, #16
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	440b      	add	r3, r1
 8002648:	3313      	adds	r3, #19
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	3320      	adds	r3, #32
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002662:	7bfa      	ldrb	r2, [r7, #15]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	440b      	add	r3, r1
 8002670:	3324      	adds	r3, #36	@ 0x24
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	3301      	adds	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	791b      	ldrb	r3, [r3, #4]
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	429a      	cmp	r2, r3
 8002698:	d3bb      	bcc.n	8002612 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
 800269e:	e044      	b.n	800272a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	440b      	add	r3, r1
 80026da:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	440b      	add	r3, r1
 80026f0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	3301      	adds	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	791b      	ldrb	r3, [r3, #4]
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	429a      	cmp	r2, r3
 8002732:	d3b5      	bcc.n	80026a0 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3304      	adds	r3, #4
 800273c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800273e:	f002 f94a 	bl	80049d6 <USB_DevInit>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e00c      	b.n	800276e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f004 fbc9 	bl	8006efe <USB_DevDisconnect>

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_PCD_Start+0x16>
 8002788:	2302      	movs	r3, #2
 800278a:	e016      	b.n	80027ba <HAL_PCD_Start+0x44>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f002 f8e0 	bl	800495e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800279e:	2101      	movs	r1, #1
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f006 fa18 	bl	8008bd6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f004 fb9d 	bl	8006eea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b088      	sub	sp, #32
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f004 fb9f 	bl	8006f12 <USB_ReadInterrupts>
 80027d4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fb03 	bl	8002dec <PCD_EP_ISR_Handler>

    return;
 80027e6:	e119      	b.n	8002a1c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d013      	beq.n	800281a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002804:	b292      	uxth	r2, r2
 8002806:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f006 f811 	bl	8008832 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002810:	2100      	movs	r1, #0
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f905 	bl	8002a22 <HAL_PCD_SetAddress>

    return;
 8002818:	e100      	b.n	8002a1c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00c      	beq.n	800283e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800282c:	b29a      	uxth	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002836:	b292      	uxth	r2, r2
 8002838:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800283c:	e0ee      	b.n	8002a1c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00c      	beq.n	8002862 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002850:	b29a      	uxth	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800285a:	b292      	uxth	r2, r2
 800285c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002860:	e0dc      	b.n	8002a1c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d027      	beq.n	80028bc <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002874:	b29a      	uxth	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0204 	bic.w	r2, r2, #4
 800287e:	b292      	uxth	r2, r2
 8002880:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800288c:	b29a      	uxth	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0208 	bic.w	r2, r2, #8
 8002896:	b292      	uxth	r2, r2
 8002898:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f006 f801 	bl	80088a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028b4:	b292      	uxth	r2, r2
 80028b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80028ba:	e0af      	b.n	8002a1c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8083 	beq.w	80029ce <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	77fb      	strb	r3, [r7, #31]
 80028cc:	e010      	b.n	80028f0 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	7ffb      	ldrb	r3, [r7, #31]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	441a      	add	r2, r3
 80028da:	7ffb      	ldrb	r3, [r7, #31]
 80028dc:	8812      	ldrh	r2, [r2, #0]
 80028de:	b292      	uxth	r2, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	3320      	adds	r3, #32
 80028e4:	443b      	add	r3, r7
 80028e6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80028ea:	7ffb      	ldrb	r3, [r7, #31]
 80028ec:	3301      	adds	r3, #1
 80028ee:	77fb      	strb	r3, [r7, #31]
 80028f0:	7ffb      	ldrb	r3, [r7, #31]
 80028f2:	2b07      	cmp	r3, #7
 80028f4:	d9eb      	bls.n	80028ce <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028fe:	b29a      	uxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	b292      	uxth	r2, r2
 800290a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	b292      	uxth	r2, r2
 8002922:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002926:	bf00      	nop
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002930:	b29b      	uxth	r3, r3
 8002932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f6      	beq.n	8002928 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800294c:	b292      	uxth	r2, r2
 800294e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002952:	2300      	movs	r3, #0
 8002954:	77fb      	strb	r3, [r7, #31]
 8002956:	e00f      	b.n	8002978 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002958:	7ffb      	ldrb	r3, [r7, #31]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	4611      	mov	r1, r2
 8002960:	7ffa      	ldrb	r2, [r7, #31]
 8002962:	0092      	lsls	r2, r2, #2
 8002964:	440a      	add	r2, r1
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	3320      	adds	r3, #32
 800296a:	443b      	add	r3, r7
 800296c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002970:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002972:	7ffb      	ldrb	r3, [r7, #31]
 8002974:	3301      	adds	r3, #1
 8002976:	77fb      	strb	r3, [r7, #31]
 8002978:	7ffb      	ldrb	r3, [r7, #31]
 800297a:	2b07      	cmp	r3, #7
 800297c:	d9ec      	bls.n	8002958 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002986:	b29a      	uxth	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0208 	orr.w	r2, r2, #8
 8002990:	b292      	uxth	r2, r2
 8002992:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029a8:	b292      	uxth	r2, r2
 80029aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0204 	orr.w	r2, r2, #4
 80029c0:	b292      	uxth	r2, r2
 80029c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f005 ff52 	bl	8008870 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029cc:	e026      	b.n	8002a1c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00f      	beq.n	80029f8 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029ea:	b292      	uxth	r2, r2
 80029ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f005 ff10 	bl	8008816 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029f6:	e011      	b.n	8002a1c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a14:	b292      	uxth	r2, r2
 8002a16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a1a:	bf00      	nop
  }
}
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_PCD_SetAddress+0x1a>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e012      	b.n	8002a62 <HAL_PCD_SetAddress+0x40>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 fa36 	bl	8006ec4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	4608      	mov	r0, r1
 8002a74:	4611      	mov	r1, r2
 8002a76:	461a      	mov	r2, r3
 8002a78:	4603      	mov	r3, r0
 8002a7a:	70fb      	strb	r3, [r7, #3]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	803b      	strh	r3, [r7, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	da0e      	bge.n	8002aae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 0207 	and.w	r2, r3, #7
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	3310      	adds	r3, #16
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	705a      	strb	r2, [r3, #1]
 8002aac:	e00e      	b.n	8002acc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 0207 	and.w	r2, r3, #7
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ad8:	883a      	ldrh	r2, [r7, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	78ba      	ldrb	r2, [r7, #2]
 8002ae2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ae4:	78bb      	ldrb	r3, [r7, #2]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d102      	bne.n	8002af0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_PCD_EP_Open+0x94>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e00e      	b.n	8002b1c <HAL_PCD_EP_Open+0xb2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68f9      	ldr	r1, [r7, #12]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f001 ff7f 	bl	8004a10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002b1a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	da0e      	bge.n	8002b56 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	f003 0207 	and.w	r2, r3, #7
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	3310      	adds	r3, #16
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	705a      	strb	r2, [r3, #1]
 8002b54:	e00e      	b.n	8002b74 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	f003 0207 	and.w	r2, r3, #7
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_PCD_EP_Close+0x6a>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e00e      	b.n	8002bac <HAL_PCD_EP_Close+0x88>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 faf7 	bl	8005190 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc4:	7afb      	ldrb	r3, [r7, #11]
 8002bc6:	f003 0207 	and.w	r2, r3, #7
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6979      	ldr	r1, [r7, #20]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f002 fcae 	bl	8005568 <USB_EPStartXfer>

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	460b      	mov	r3, r1
 8002c24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c26:	7afb      	ldrb	r3, [r7, #11]
 8002c28:	f003 0207 	and.w	r2, r3, #7
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	3310      	adds	r3, #16
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4413      	add	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c62:	7afb      	ldrb	r3, [r7, #11]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6979      	ldr	r1, [r7, #20]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 fc77 	bl	8005568 <USB_EPStartXfer>

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	7912      	ldrb	r2, [r2, #4]
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e04c      	b.n	8002d3c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	da0e      	bge.n	8002cc8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 0207 	and.w	r2, r3, #7
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	3310      	adds	r3, #16
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	705a      	strb	r2, [r3, #1]
 8002cc6:	e00c      	b.n	8002ce2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_PCD_EP_SetStall+0x7e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e01c      	b.n	8002d3c <HAL_PCD_EP_SetStall+0xb8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68f9      	ldr	r1, [r7, #12]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 ffda 	bl	8006cca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d108      	bne.n	8002d32 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	f004 f8ff 	bl	8006f30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	7912      	ldrb	r2, [r2, #4]
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e040      	b.n	8002de4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	da0e      	bge.n	8002d88 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	f003 0207 	and.w	r2, r3, #7
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	3310      	adds	r3, #16
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	705a      	strb	r2, [r3, #1]
 8002d86:	e00e      	b.n	8002da6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	f003 0207 	and.w	r2, r3, #7
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_PCD_EP_ClrStall+0x82>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e00e      	b.n	8002de4 <HAL_PCD_EP_ClrStall+0xa0>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68f9      	ldr	r1, [r7, #12]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 ffc8 	bl	8006d6a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b096      	sub	sp, #88	@ 0x58
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002df4:	e3bb      	b.n	800356e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dfe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002e10:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f040 8175 	bne.w	8003104 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d14e      	bne.n	8002ec4 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e36:	81fb      	strh	r3, [r7, #14]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	89fb      	ldrh	r3, [r7, #14]
 8002e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3310      	adds	r3, #16
 8002e4e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	3302      	adds	r3, #2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	441a      	add	r2, r3
 8002e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e88:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f005 fca8 	bl	80087e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7b5b      	ldrb	r3, [r3, #13]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8368 	beq.w	800356e <PCD_EP_ISR_Handler+0x782>
 8002e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f040 8363 	bne.w	800356e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7b5b      	ldrb	r3, [r3, #13]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	735a      	strb	r2, [r3, #13]
 8002ec2:	e354      	b.n	800356e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002eca:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ed6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002eda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d034      	beq.n	8002f4c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3306      	adds	r3, #6
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f004 f855 	bl	8006fd0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f32:	4013      	ands	r3, r2
 8002f34:	823b      	strh	r3, [r7, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	8a3a      	ldrh	r2, [r7, #16]
 8002f3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f40:	b292      	uxth	r2, r2
 8002f42:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f005 fc1f 	bl	8008788 <HAL_PCD_SetupStageCallback>
 8002f4a:	e310      	b.n	800356e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f4c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f280 830c 	bge.w	800356e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f62:	4013      	ands	r3, r2
 8002f64:	83fb      	strh	r3, [r7, #30]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	8bfa      	ldrh	r2, [r7, #30]
 8002f6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f70:	b292      	uxth	r2, r2
 8002f72:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	3306      	adds	r3, #6
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d019      	beq.n	8002fdc <PCD_EP_ISR_Handler+0x1f0>
 8002fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d015      	beq.n	8002fdc <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	6959      	ldr	r1, [r3, #20]
 8002fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fbe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f004 f805 	bl	8006fd0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	441a      	add	r2, r3
 8002fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f005 fbe8 	bl	80087ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002fe6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002fea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 82bd 	bne.w	800356e <PCD_EP_ISR_Handler+0x782>
 8002ff4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ff8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002ffc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003000:	f000 82b5 	beq.w	800356e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003012:	b29b      	uxth	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4413      	add	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	b29b      	uxth	r3, r3
 800302a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800302e:	b29a      	uxth	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	801a      	strh	r2, [r3, #0]
 8003034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b3e      	cmp	r3, #62	@ 0x3e
 800303a:	d91d      	bls.n	8003078 <PCD_EP_ISR_Handler+0x28c>
 800303c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	647b      	str	r3, [r7, #68]	@ 0x44
 8003044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <PCD_EP_ISR_Handler+0x26a>
 8003050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003052:	3b01      	subs	r3, #1
 8003054:	647b      	str	r3, [r7, #68]	@ 0x44
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	b29a      	uxth	r2, r3
 800305c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800305e:	b29b      	uxth	r3, r3
 8003060:	029b      	lsls	r3, r3, #10
 8003062:	b29b      	uxth	r3, r3
 8003064:	4313      	orrs	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800306c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003070:	b29a      	uxth	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	801a      	strh	r2, [r3, #0]
 8003076:	e026      	b.n	80030c6 <PCD_EP_ISR_Handler+0x2da>
 8003078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <PCD_EP_ISR_Handler+0x2aa>
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800308a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308e:	b29a      	uxth	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	801a      	strh	r2, [r3, #0]
 8003094:	e017      	b.n	80030c6 <PCD_EP_ISR_Handler+0x2da>
 8003096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	085b      	lsrs	r3, r3, #1
 800309c:	647b      	str	r3, [r7, #68]	@ 0x44
 800309e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <PCD_EP_ISR_Handler+0x2c4>
 80030aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ac:	3301      	adds	r3, #1
 80030ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	029b      	lsls	r3, r3, #10
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4313      	orrs	r3, r2
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030d6:	827b      	strh	r3, [r7, #18]
 80030d8:	8a7b      	ldrh	r3, [r7, #18]
 80030da:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80030de:	827b      	strh	r3, [r7, #18]
 80030e0:	8a7b      	ldrh	r3, [r7, #18]
 80030e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030e6:	827b      	strh	r3, [r7, #18]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	8a7b      	ldrh	r3, [r7, #18]
 80030ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030fe:	b29b      	uxth	r3, r3
 8003100:	8013      	strh	r3, [r2, #0]
 8003102:	e234      	b.n	800356e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003118:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800311c:	2b00      	cmp	r3, #0
 800311e:	f280 80fc 	bge.w	800331a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b29a      	uxth	r2, r3
 8003134:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003138:	4013      	ands	r3, r2
 800313a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003150:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003154:	b292      	uxth	r2, r2
 8003156:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003158:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800316e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003170:	7b1b      	ldrb	r3, [r3, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d125      	bne.n	80031c2 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800317e:	b29b      	uxth	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	3306      	adds	r3, #6
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80031a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8092 	beq.w	80032d0 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b2:	6959      	ldr	r1, [r3, #20]
 80031b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b6:	88da      	ldrh	r2, [r3, #6]
 80031b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031bc:	f003 ff08 	bl	8006fd0 <USB_ReadPMA>
 80031c0:	e086      	b.n	80032d0 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80031c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c4:	78db      	ldrb	r3, [r3, #3]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d10a      	bne.n	80031e0 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80031ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031ce:	461a      	mov	r2, r3
 80031d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f9d9 	bl	800358a <HAL_PCD_EP_DB_Receive>
 80031d8:	4603      	mov	r3, r0
 80031da:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80031de:	e077      	b.n	80032d0 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031fa:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	441a      	add	r2, r3
 800320c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800321c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003220:	b29b      	uxth	r3, r3
 8003222:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d024      	beq.n	8003288 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	3302      	adds	r3, #2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003266:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800326a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800326e:	2b00      	cmp	r3, #0
 8003270:	d02e      	beq.n	80032d0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003278:	6959      	ldr	r1, [r3, #20]
 800327a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800327c:	891a      	ldrh	r2, [r3, #8]
 800327e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003282:	f003 fea5 	bl	8006fd0 <USB_ReadPMA>
 8003286:	e023      	b.n	80032d0 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003290:	b29b      	uxth	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	3306      	adds	r3, #6
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80032b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d009      	beq.n	80032d0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c2:	6959      	ldr	r1, [r3, #20]
 80032c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c6:	895a      	ldrh	r2, [r3, #10]
 80032c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032cc:	f003 fe80 	bl	8006fd0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80032d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032d8:	441a      	add	r2, r3
 80032da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80032de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032e6:	441a      	add	r2, r3
 80032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80032ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <PCD_EP_ISR_Handler+0x514>
 80032f4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80032f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d206      	bcs.n	800330e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f005 fa50 	bl	80087ac <HAL_PCD_DataOutStageCallback>
 800330c:	e005      	b.n	800331a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003314:	4618      	mov	r0, r3
 8003316:	f002 f927 	bl	8005568 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800331a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800331e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8123 	beq.w	800356e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003328:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	3310      	adds	r3, #16
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003356:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	441a      	add	r2, r3
 8003368:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800336c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003374:	b29b      	uxth	r3, r3
 8003376:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337a:	78db      	ldrb	r3, [r3, #3]
 800337c:	2b01      	cmp	r3, #1
 800337e:	f040 80a2 	bne.w	80034c6 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003384:	2200      	movs	r2, #0
 8003386:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800338a:	7b1b      	ldrb	r3, [r3, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8093 	beq.w	80034b8 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003392:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d046      	beq.n	800342c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800339e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a0:	785b      	ldrb	r3, [r3, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d126      	bne.n	80033f4 <PCD_EP_ISR_Handler+0x608>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	4413      	add	r3, r2
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	011a      	lsls	r2, r3, #4
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	4413      	add	r3, r2
 80033c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033cc:	623b      	str	r3, [r7, #32]
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d8:	b29a      	uxth	r2, r3
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	e061      	b.n	80034b8 <PCD_EP_ISR_Handler+0x6cc>
 80033f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d15d      	bne.n	80034b8 <PCD_EP_ISR_Handler+0x6cc>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800340a:	b29b      	uxth	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003410:	4413      	add	r3, r2
 8003412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	011a      	lsls	r2, r3, #4
 800341a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341c:	4413      	add	r3, r2
 800341e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	2200      	movs	r2, #0
 8003428:	801a      	strh	r2, [r3, #0]
 800342a:	e045      	b.n	80034b8 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003434:	785b      	ldrb	r3, [r3, #1]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d126      	bne.n	8003488 <PCD_EP_ISR_Handler+0x69c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003448:	b29b      	uxth	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344e:	4413      	add	r3, r2
 8003450:	637b      	str	r3, [r7, #52]	@ 0x34
 8003452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	011a      	lsls	r2, r3, #4
 8003458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345a:	4413      	add	r3, r2
 800345c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003460:	633b      	str	r3, [r7, #48]	@ 0x30
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800346c:	b29a      	uxth	r2, r3
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800347c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003480:	b29a      	uxth	r2, r3
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	801a      	strh	r2, [r3, #0]
 8003486:	e017      	b.n	80034b8 <PCD_EP_ISR_Handler+0x6cc>
 8003488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348a:	785b      	ldrb	r3, [r3, #1]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d113      	bne.n	80034b8 <PCD_EP_ISR_Handler+0x6cc>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003498:	b29b      	uxth	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800349e:	4413      	add	r3, r2
 80034a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	011a      	lsls	r2, r3, #4
 80034a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034aa:	4413      	add	r3, r2
 80034ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b4:	2200      	movs	r2, #0
 80034b6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f005 f98f 	bl	80087e2 <HAL_PCD_DataInStageCallback>
 80034c4:	e053      	b.n	800356e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80034c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d146      	bne.n	8003560 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034da:	b29b      	uxth	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	3302      	adds	r3, #2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80034fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003506:	429a      	cmp	r2, r3
 8003508:	d907      	bls.n	800351a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800350a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003512:	1ad2      	subs	r2, r2, r3
 8003514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003516:	619a      	str	r2, [r3, #24]
 8003518:	e002      	b.n	8003520 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800351a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800351c:	2200      	movs	r2, #0
 800351e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d106      	bne.n	8003536 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f005 f957 	bl	80087e2 <HAL_PCD_DataInStageCallback>
 8003534:	e01b      	b.n	800356e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800353e:	441a      	add	r2, r3
 8003540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003542:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800354c:	441a      	add	r2, r3
 800354e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003550:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003558:	4618      	mov	r0, r3
 800355a:	f002 f805 	bl	8005568 <USB_EPStartXfer>
 800355e:	e006      	b.n	800356e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003560:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003564:	461a      	mov	r2, r3
 8003566:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f91b 	bl	80037a4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003576:	b29b      	uxth	r3, r3
 8003578:	b21b      	sxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	f6ff ac3b 	blt.w	8002df6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3758      	adds	r7, #88	@ 0x58
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b088      	sub	sp, #32
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	4613      	mov	r3, r2
 8003596:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d07e      	beq.n	80036a0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	3302      	adds	r3, #2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	8b7b      	ldrh	r3, [r7, #26]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d306      	bcc.n	80035e4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	8b7b      	ldrh	r3, [r7, #26]
 80035dc:	1ad2      	subs	r2, r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	619a      	str	r2, [r3, #24]
 80035e2:	e002      	b.n	80035ea <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2200      	movs	r2, #0
 80035e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d123      	bne.n	800363a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360c:	833b      	strh	r3, [r7, #24]
 800360e:	8b3b      	ldrh	r3, [r7, #24]
 8003610:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003614:	833b      	strh	r3, [r7, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	441a      	add	r2, r3
 8003624:	8b3b      	ldrh	r3, [r7, #24]
 8003626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800362a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800362e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003636:	b29b      	uxth	r3, r3
 8003638:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01f      	beq.n	8003684 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800365a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800365e:	82fb      	strh	r3, [r7, #22]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	8afb      	ldrh	r3, [r7, #22]
 8003670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800367c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003680:	b29b      	uxth	r3, r3
 8003682:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003684:	8b7b      	ldrh	r3, [r7, #26]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8087 	beq.w	800379a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	6959      	ldr	r1, [r3, #20]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	891a      	ldrh	r2, [r3, #8]
 8003698:	8b7b      	ldrh	r3, [r7, #26]
 800369a:	f003 fc99 	bl	8006fd0 <USB_ReadPMA>
 800369e:	e07c      	b.n	800379a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	3306      	adds	r3, #6
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	8b7b      	ldrh	r3, [r7, #26]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d306      	bcc.n	80036e2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	8b7b      	ldrh	r3, [r7, #26]
 80036da:	1ad2      	subs	r2, r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	619a      	str	r2, [r3, #24]
 80036e0:	e002      	b.n	80036e8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2200      	movs	r2, #0
 80036e6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d123      	bne.n	8003738 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800370a:	83fb      	strh	r3, [r7, #30]
 800370c:	8bfb      	ldrh	r3, [r7, #30]
 800370e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003712:	83fb      	strh	r3, [r7, #30]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	441a      	add	r2, r3
 8003722:	8bfb      	ldrh	r3, [r7, #30]
 8003724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800372c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003734:	b29b      	uxth	r3, r3
 8003736:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d11f      	bne.n	8003782 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375c:	83bb      	strh	r3, [r7, #28]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	441a      	add	r2, r3
 800376c:	8bbb      	ldrh	r3, [r7, #28]
 800376e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003772:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800377a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800377e:	b29b      	uxth	r3, r3
 8003780:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003782:	8b7b      	ldrh	r3, [r7, #26]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	6959      	ldr	r1, [r3, #20]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	895a      	ldrh	r2, [r3, #10]
 8003794:	8b7b      	ldrh	r3, [r7, #26]
 8003796:	f003 fc1b 	bl	8006fd0 <USB_ReadPMA>
    }
  }

  return count;
 800379a:	8b7b      	ldrh	r3, [r7, #26]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b0a4      	sub	sp, #144	@ 0x90
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	4613      	mov	r3, r2
 80037b0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 81dd 	beq.w	8003b78 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	3302      	adds	r3, #2
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037e6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d907      	bls.n	8003806 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037fe:	1ad2      	subs	r2, r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	619a      	str	r2, [r3, #24]
 8003804:	e002      	b.n	800380c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2200      	movs	r2, #0
 800380a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f040 80b9 	bne.w	8003988 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	785b      	ldrb	r3, [r3, #1]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d126      	bne.n	800386c <HAL_PCD_EP_DB_Transmit+0xc8>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800382c:	b29b      	uxth	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003832:	4413      	add	r3, r2
 8003834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	011a      	lsls	r2, r3, #4
 800383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383e:	4413      	add	r3, r2
 8003840:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003850:	b29a      	uxth	r2, r3
 8003852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	b29b      	uxth	r3, r3
 800385c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003864:	b29a      	uxth	r2, r3
 8003866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003868:	801a      	strh	r2, [r3, #0]
 800386a:	e01a      	b.n	80038a2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	785b      	ldrb	r3, [r3, #1]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d116      	bne.n	80038a2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	637b      	str	r3, [r7, #52]	@ 0x34
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003882:	b29b      	uxth	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003888:	4413      	add	r3, r2
 800388a:	637b      	str	r3, [r7, #52]	@ 0x34
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	011a      	lsls	r2, r3, #4
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	4413      	add	r3, r2
 8003896:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800389a:	633b      	str	r3, [r7, #48]	@ 0x30
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389e:	2200      	movs	r2, #0
 80038a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	785b      	ldrb	r3, [r3, #1]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d126      	bne.n	80038fe <HAL_PCD_EP_DB_Transmit+0x15a>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038be:	b29b      	uxth	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	4413      	add	r3, r2
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	011a      	lsls	r2, r3, #4
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	801a      	strh	r2, [r3, #0]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	801a      	strh	r2, [r3, #0]
 80038fc:	e017      	b.n	800392e <HAL_PCD_EP_DB_Transmit+0x18a>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	785b      	ldrb	r3, [r3, #1]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d113      	bne.n	800392e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800390e:	b29b      	uxth	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	4413      	add	r3, r2
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	011a      	lsls	r2, r3, #4
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	4413      	add	r3, r2
 8003922:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003926:	623b      	str	r3, [r7, #32]
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	2200      	movs	r2, #0
 800392c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	4619      	mov	r1, r3
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f004 ff54 	bl	80087e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 82fc 	beq.w	8003f3e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800395c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003960:	82fb      	strh	r3, [r7, #22]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	441a      	add	r2, r3
 8003970:	8afb      	ldrh	r3, [r7, #22]
 8003972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800397a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800397e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003982:	b29b      	uxth	r3, r3
 8003984:	8013      	strh	r3, [r2, #0]
 8003986:	e2da      	b.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d021      	beq.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	441a      	add	r2, r3
 80039be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80039c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039dc:	2b01      	cmp	r3, #1
 80039de:	f040 82ae 	bne.w	8003f3e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039ea:	441a      	add	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039f8:	441a      	add	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6a1a      	ldr	r2, [r3, #32]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d30b      	bcc.n	8003a22 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6a1a      	ldr	r2, [r3, #32]
 8003a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a1a:	1ad2      	subs	r2, r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	621a      	str	r2, [r3, #32]
 8003a20:	e017      	b.n	8003a52 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d108      	bne.n	8003a3c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003a2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a3a:	e00a      	b.n	8003a52 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d165      	bne.n	8003b26 <HAL_PCD_EP_DB_Transmit+0x382>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a6e:	4413      	add	r3, r2
 8003a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	011a      	lsls	r2, r3, #4
 8003a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a96:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a98:	d91d      	bls.n	8003ad6 <HAL_PCD_EP_DB_Transmit+0x332>
 8003a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <HAL_PCD_EP_DB_Transmit+0x310>
 8003aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	029b      	lsls	r3, r3, #10
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad2:	801a      	strh	r2, [r3, #0]
 8003ad4:	e044      	b.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <HAL_PCD_EP_DB_Transmit+0x350>
 8003ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	e035      	b.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_PCD_EP_DB_Transmit+0x36a>
 8003b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	029b      	lsls	r3, r3, #10
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b22:	801a      	strh	r2, [r3, #0]
 8003b24:	e01c      	b.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	785b      	ldrb	r3, [r3, #1]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d118      	bne.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b42:	4413      	add	r3, r2
 8003b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	011a      	lsls	r2, r3, #4
 8003b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b4e:	4413      	add	r3, r2
 8003b50:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b54:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b5e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	6959      	ldr	r1, [r3, #20]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	891a      	ldrh	r2, [r3, #8]
 8003b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f003 f9e8 	bl	8006f46 <USB_WritePMA>
 8003b76:	e1e2      	b.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3306      	adds	r3, #6
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ba0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d307      	bcc.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003bb8:	1ad2      	subs	r2, r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	619a      	str	r2, [r3, #24]
 8003bbe:	e002      	b.n	8003bc6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 80c0 	bne.w	8003d50 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	785b      	ldrb	r3, [r3, #1]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d126      	bne.n	8003c26 <HAL_PCD_EP_DB_Transmit+0x482>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bec:	4413      	add	r3, r2
 8003bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	011a      	lsls	r2, r3, #4
 8003bf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003bfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c0e:	801a      	strh	r2, [r3, #0]
 8003c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c22:	801a      	strh	r2, [r3, #0]
 8003c24:	e01a      	b.n	8003c5c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	785b      	ldrb	r3, [r3, #1]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d116      	bne.n	8003c5c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c42:	4413      	add	r3, r2
 8003c44:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	011a      	lsls	r2, r3, #4
 8003c4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c4e:	4413      	add	r3, r2
 8003c50:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c54:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c58:	2200      	movs	r2, #0
 8003c5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d12b      	bne.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c7e:	4413      	add	r3, r2
 8003c80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	011a      	lsls	r2, r3, #4
 8003c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ca6:	801a      	strh	r2, [r3, #0]
 8003ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cbe:	801a      	strh	r2, [r3, #0]
 8003cc0:	e017      	b.n	8003cf2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	785b      	ldrb	r3, [r3, #1]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d113      	bne.n	8003cf2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cd8:	4413      	add	r3, r2
 8003cda:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	011a      	lsls	r2, r3, #4
 8003ce2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003cea:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cee:	2200      	movs	r2, #0
 8003cf0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f004 fd72 	bl	80087e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f040 811a 	bne.w	8003f3e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d24:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	441a      	add	r2, r3
 8003d36:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003d3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	8013      	strh	r3, [r2, #0]
 8003d4e:	e0f6      	b.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d121      	bne.n	8003d9e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d74:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	441a      	add	r2, r3
 8003d86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	f040 80ca 	bne.w	8003f3e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003db2:	441a      	add	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003dc0:	441a      	add	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d30b      	bcc.n	8003dea <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	6a1a      	ldr	r2, [r3, #32]
 8003dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de2:	1ad2      	subs	r2, r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	621a      	str	r2, [r3, #32]
 8003de8:	e017      	b.n	8003e1a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d108      	bne.n	8003e04 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003df2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003df6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e02:	e00a      	b.n	8003e1a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d165      	bne.n	8003ef4 <HAL_PCD_EP_DB_Transmit+0x750>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e3c:	4413      	add	r3, r2
 8003e3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	011a      	lsls	r2, r3, #4
 8003e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e48:	4413      	add	r3, r2
 8003e4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e5e:	801a      	strh	r2, [r3, #0]
 8003e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e64:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e66:	d91d      	bls.n	8003ea4 <HAL_PCD_EP_DB_Transmit+0x700>
 8003e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003e7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	029b      	lsls	r3, r3, #10
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4313      	orrs	r3, r2
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ea0:	801a      	strh	r2, [r3, #0]
 8003ea2:	e041      	b.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x784>
 8003ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ebe:	801a      	strh	r2, [r3, #0]
 8003ec0:	e032      	b.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x784>
 8003ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ec6:	085b      	lsrs	r3, r3, #1
 8003ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_PCD_EP_DB_Transmit+0x738>
 8003ed6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ed8:	3301      	adds	r3, #1
 8003eda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003edc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	029b      	lsls	r3, r3, #10
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	4313      	orrs	r3, r2
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	e019      	b.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x784>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d115      	bne.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x784>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0a:	4413      	add	r3, r2
 8003f0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	011a      	lsls	r2, r3, #4
 8003f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f16:	4413      	add	r3, r2
 8003f18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f26:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	6959      	ldr	r1, [r3, #20]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	895a      	ldrh	r2, [r3, #10]
 8003f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f003 f804 	bl	8006f46 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f58:	82bb      	strh	r3, [r7, #20]
 8003f5a:	8abb      	ldrh	r3, [r7, #20]
 8003f5c:	f083 0310 	eor.w	r3, r3, #16
 8003f60:	82bb      	strh	r3, [r7, #20]
 8003f62:	8abb      	ldrh	r3, [r7, #20]
 8003f64:	f083 0320 	eor.w	r3, r3, #32
 8003f68:	82bb      	strh	r3, [r7, #20]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	441a      	add	r2, r3
 8003f78:	8abb      	ldrh	r3, [r7, #20]
 8003f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3790      	adds	r7, #144	@ 0x90
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	817b      	strh	r3, [r7, #10]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003faa:	897b      	ldrh	r3, [r7, #10]
 8003fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb6:	897b      	ldrh	r3, [r7, #10]
 8003fb8:	f003 0207 	and.w	r2, r3, #7
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	3310      	adds	r3, #16
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4413      	add	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	e009      	b.n	8003fe2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fce:	897a      	ldrh	r2, [r7, #10]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003fe2:	893b      	ldrh	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d107      	bne.n	8003ff8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2200      	movs	r2, #0
 8003fec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	80da      	strh	r2, [r3, #6]
 8003ff6:	e00b      	b.n	8004010 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	b29a      	uxth	r2, r3
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	b29a      	uxth	r2, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e272      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8087 	beq.w	800414a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800403c:	4b92      	ldr	r3, [pc, #584]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b04      	cmp	r3, #4
 8004046:	d00c      	beq.n	8004062 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004048:	4b8f      	ldr	r3, [pc, #572]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d112      	bne.n	800407a <HAL_RCC_OscConfig+0x5e>
 8004054:	4b8c      	ldr	r3, [pc, #560]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004060:	d10b      	bne.n	800407a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004062:	4b89      	ldr	r3, [pc, #548]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d06c      	beq.n	8004148 <HAL_RCC_OscConfig+0x12c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d168      	bne.n	8004148 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e24c      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004082:	d106      	bne.n	8004092 <HAL_RCC_OscConfig+0x76>
 8004084:	4b80      	ldr	r3, [pc, #512]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a7f      	ldr	r2, [pc, #508]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 800408a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	e02e      	b.n	80040f0 <HAL_RCC_OscConfig+0xd4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x98>
 800409a:	4b7b      	ldr	r3, [pc, #492]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a7a      	ldr	r2, [pc, #488]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b78      	ldr	r3, [pc, #480]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a77      	ldr	r2, [pc, #476]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e01d      	b.n	80040f0 <HAL_RCC_OscConfig+0xd4>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0xbc>
 80040be:	4b72      	ldr	r3, [pc, #456]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a71      	ldr	r2, [pc, #452]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e00b      	b.n	80040f0 <HAL_RCC_OscConfig+0xd4>
 80040d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a6a      	ldr	r2, [pc, #424]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b68      	ldr	r3, [pc, #416]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a67      	ldr	r2, [pc, #412]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fd f960 	bl	80013bc <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fd f95c 	bl	80013bc <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	@ 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e200      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b5d      	ldr	r3, [pc, #372]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0xe4>
 800411e:	e014      	b.n	800414a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fd f94c 	bl	80013bc <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7fd f948 	bl	80013bc <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	@ 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e1ec      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413a:	4b53      	ldr	r3, [pc, #332]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x10c>
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d063      	beq.n	800421e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004156:	4b4c      	ldr	r3, [pc, #304]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004162:	4b49      	ldr	r3, [pc, #292]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b08      	cmp	r3, #8
 800416c:	d11c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x18c>
 800416e:	4b46      	ldr	r3, [pc, #280]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d116      	bne.n	80041a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	4b43      	ldr	r3, [pc, #268]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_RCC_OscConfig+0x176>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d001      	beq.n	8004192 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e1c0      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004192:	4b3d      	ldr	r3, [pc, #244]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4939      	ldr	r1, [pc, #228]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a6:	e03a      	b.n	800421e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d020      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b0:	4b36      	ldr	r3, [pc, #216]	@ (800428c <HAL_RCC_OscConfig+0x270>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b6:	f7fd f901 	bl	80013bc <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041be:	f7fd f8fd 	bl	80013bc <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e1a1      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4927      	ldr	r1, [pc, #156]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	600b      	str	r3, [r1, #0]
 80041f0:	e015      	b.n	800421e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f2:	4b26      	ldr	r3, [pc, #152]	@ (800428c <HAL_RCC_OscConfig+0x270>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fd f8e0 	bl	80013bc <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004200:	f7fd f8dc 	bl	80013bc <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e180      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004212:	4b1d      	ldr	r3, [pc, #116]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d03a      	beq.n	80042a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d019      	beq.n	8004266 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004232:	4b17      	ldr	r3, [pc, #92]	@ (8004290 <HAL_RCC_OscConfig+0x274>)
 8004234:	2201      	movs	r2, #1
 8004236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004238:	f7fd f8c0 	bl	80013bc <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004240:	f7fd f8bc 	bl	80013bc <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e160      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004252:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800425e:	2001      	movs	r0, #1
 8004260:	f000 fa9c 	bl	800479c <RCC_Delay>
 8004264:	e01c      	b.n	80042a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004266:	4b0a      	ldr	r3, [pc, #40]	@ (8004290 <HAL_RCC_OscConfig+0x274>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426c:	f7fd f8a6 	bl	80013bc <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004272:	e00f      	b.n	8004294 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004274:	f7fd f8a2 	bl	80013bc <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d908      	bls.n	8004294 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e146      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	42420000 	.word	0x42420000
 8004290:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004294:	4b92      	ldr	r3, [pc, #584]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e9      	bne.n	8004274 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80a6 	beq.w	80043fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b2:	4b8b      	ldr	r3, [pc, #556]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10d      	bne.n	80042da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042be:	4b88      	ldr	r3, [pc, #544]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	4a87      	ldr	r2, [pc, #540]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c8:	61d3      	str	r3, [r2, #28]
 80042ca:	4b85      	ldr	r3, [pc, #532]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042da:	4b82      	ldr	r3, [pc, #520]	@ (80044e4 <HAL_RCC_OscConfig+0x4c8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d118      	bne.n	8004318 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e6:	4b7f      	ldr	r3, [pc, #508]	@ (80044e4 <HAL_RCC_OscConfig+0x4c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a7e      	ldr	r2, [pc, #504]	@ (80044e4 <HAL_RCC_OscConfig+0x4c8>)
 80042ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f2:	f7fd f863 	bl	80013bc <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fa:	f7fd f85f 	bl	80013bc <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b64      	cmp	r3, #100	@ 0x64
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e103      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430c:	4b75      	ldr	r3, [pc, #468]	@ (80044e4 <HAL_RCC_OscConfig+0x4c8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d106      	bne.n	800432e <HAL_RCC_OscConfig+0x312>
 8004320:	4b6f      	ldr	r3, [pc, #444]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	4a6e      	ldr	r2, [pc, #440]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6213      	str	r3, [r2, #32]
 800432c:	e02d      	b.n	800438a <HAL_RCC_OscConfig+0x36e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10c      	bne.n	8004350 <HAL_RCC_OscConfig+0x334>
 8004336:	4b6a      	ldr	r3, [pc, #424]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	4a69      	ldr	r2, [pc, #420]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	6213      	str	r3, [r2, #32]
 8004342:	4b67      	ldr	r3, [pc, #412]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4a66      	ldr	r2, [pc, #408]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004348:	f023 0304 	bic.w	r3, r3, #4
 800434c:	6213      	str	r3, [r2, #32]
 800434e:	e01c      	b.n	800438a <HAL_RCC_OscConfig+0x36e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b05      	cmp	r3, #5
 8004356:	d10c      	bne.n	8004372 <HAL_RCC_OscConfig+0x356>
 8004358:	4b61      	ldr	r3, [pc, #388]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	4a60      	ldr	r2, [pc, #384]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 800435e:	f043 0304 	orr.w	r3, r3, #4
 8004362:	6213      	str	r3, [r2, #32]
 8004364:	4b5e      	ldr	r3, [pc, #376]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4a5d      	ldr	r2, [pc, #372]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6213      	str	r3, [r2, #32]
 8004370:	e00b      	b.n	800438a <HAL_RCC_OscConfig+0x36e>
 8004372:	4b5b      	ldr	r3, [pc, #364]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	4a5a      	ldr	r2, [pc, #360]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	6213      	str	r3, [r2, #32]
 800437e:	4b58      	ldr	r3, [pc, #352]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a57      	ldr	r2, [pc, #348]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	f023 0304 	bic.w	r3, r3, #4
 8004388:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d015      	beq.n	80043be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004392:	f7fd f813 	bl	80013bc <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004398:	e00a      	b.n	80043b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7fd f80f 	bl	80013bc <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e0b1      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b0:	4b4b      	ldr	r3, [pc, #300]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ee      	beq.n	800439a <HAL_RCC_OscConfig+0x37e>
 80043bc:	e014      	b.n	80043e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043be:	f7fc fffd 	bl	80013bc <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c4:	e00a      	b.n	80043dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7fc fff9 	bl	80013bc <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e09b      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043dc:	4b40      	ldr	r3, [pc, #256]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ee      	bne.n	80043c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d105      	bne.n	80043fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ee:	4b3c      	ldr	r3, [pc, #240]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	4a3b      	ldr	r2, [pc, #236]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 80043f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 8087 	beq.w	8004512 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004404:	4b36      	ldr	r3, [pc, #216]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 030c 	and.w	r3, r3, #12
 800440c:	2b08      	cmp	r3, #8
 800440e:	d061      	beq.n	80044d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d146      	bne.n	80044a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004418:	4b33      	ldr	r3, [pc, #204]	@ (80044e8 <HAL_RCC_OscConfig+0x4cc>)
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441e:	f7fc ffcd 	bl	80013bc <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004426:	f7fc ffc9 	bl	80013bc <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e06d      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004438:	4b29      	ldr	r3, [pc, #164]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f0      	bne.n	8004426 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800444c:	d108      	bne.n	8004460 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800444e:	4b24      	ldr	r3, [pc, #144]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	4921      	ldr	r1, [pc, #132]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004460:	4b1f      	ldr	r3, [pc, #124]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a19      	ldr	r1, [r3, #32]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	430b      	orrs	r3, r1
 8004472:	491b      	ldr	r1, [pc, #108]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004478:	4b1b      	ldr	r3, [pc, #108]	@ (80044e8 <HAL_RCC_OscConfig+0x4cc>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7fc ff9d 	bl	80013bc <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004486:	f7fc ff99 	bl	80013bc <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e03d      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004498:	4b11      	ldr	r3, [pc, #68]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x46a>
 80044a4:	e035      	b.n	8004512 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a6:	4b10      	ldr	r3, [pc, #64]	@ (80044e8 <HAL_RCC_OscConfig+0x4cc>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fc ff86 	bl	80013bc <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fc ff82 	bl	80013bc <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e026      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c6:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x498>
 80044d2:	e01e      	b.n	8004512 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d107      	bne.n	80044ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e019      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40007000 	.word	0x40007000
 80044e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044ec:	4b0b      	ldr	r3, [pc, #44]	@ (800451c <HAL_RCC_OscConfig+0x500>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d106      	bne.n	800450e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d001      	beq.n	8004512 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40021000 	.word	0x40021000

08004520 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0d0      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004534:	4b6a      	ldr	r3, [pc, #424]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d910      	bls.n	8004564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b67      	ldr	r3, [pc, #412]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 0207 	bic.w	r2, r3, #7
 800454a:	4965      	ldr	r1, [pc, #404]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c0>)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b63      	ldr	r3, [pc, #396]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0b8      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d020      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800457c:	4b59      	ldr	r3, [pc, #356]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a58      	ldr	r2, [pc, #352]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004582:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004586:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004594:	4b53      	ldr	r3, [pc, #332]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a52      	ldr	r2, [pc, #328]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 800459a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800459e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a0:	4b50      	ldr	r3, [pc, #320]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	494d      	ldr	r1, [pc, #308]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d040      	beq.n	8004640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c6:	4b47      	ldr	r3, [pc, #284]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d115      	bne.n	80045fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e07f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045de:	4b41      	ldr	r3, [pc, #260]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e073      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ee:	4b3d      	ldr	r3, [pc, #244]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e06b      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fe:	4b39      	ldr	r3, [pc, #228]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f023 0203 	bic.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	4936      	ldr	r1, [pc, #216]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004610:	f7fc fed4 	bl	80013bc <HAL_GetTick>
 8004614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	e00a      	b.n	800462e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004618:	f7fc fed0 	bl	80013bc <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e053      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	4b2d      	ldr	r3, [pc, #180]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 020c 	and.w	r2, r3, #12
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	429a      	cmp	r2, r3
 800463e:	d1eb      	bne.n	8004618 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004640:	4b27      	ldr	r3, [pc, #156]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d210      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b24      	ldr	r3, [pc, #144]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 0207 	bic.w	r2, r3, #7
 8004656:	4922      	ldr	r1, [pc, #136]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e032      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800467c:	4b19      	ldr	r3, [pc, #100]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4916      	ldr	r1, [pc, #88]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 800468a:	4313      	orrs	r3, r2
 800468c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800469a:	4b12      	ldr	r3, [pc, #72]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	490e      	ldr	r1, [pc, #56]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ae:	f000 f821 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	490a      	ldr	r1, [pc, #40]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c8>)
 80046c0:	5ccb      	ldrb	r3, [r1, r3]
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	4a09      	ldr	r2, [pc, #36]	@ (80046ec <HAL_RCC_ClockConfig+0x1cc>)
 80046c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046ca:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <HAL_RCC_ClockConfig+0x1d0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fc fe32 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40022000 	.word	0x40022000
 80046e4:	40021000 	.word	0x40021000
 80046e8:	08008cfc 	.word	0x08008cfc
 80046ec:	20000000 	.word	0x20000000
 80046f0:	20000004 	.word	0x20000004

080046f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	2300      	movs	r3, #0
 8004708:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800470e:	4b1e      	ldr	r3, [pc, #120]	@ (8004788 <HAL_RCC_GetSysClockFreq+0x94>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b04      	cmp	r3, #4
 800471c:	d002      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x30>
 800471e:	2b08      	cmp	r3, #8
 8004720:	d003      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x36>
 8004722:	e027      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004724:	4b19      	ldr	r3, [pc, #100]	@ (800478c <HAL_RCC_GetSysClockFreq+0x98>)
 8004726:	613b      	str	r3, [r7, #16]
      break;
 8004728:	e027      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	0c9b      	lsrs	r3, r3, #18
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	4a17      	ldr	r2, [pc, #92]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004734:	5cd3      	ldrb	r3, [r2, r3]
 8004736:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d010      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004742:	4b11      	ldr	r3, [pc, #68]	@ (8004788 <HAL_RCC_GetSysClockFreq+0x94>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	0c5b      	lsrs	r3, r3, #17
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	4a11      	ldr	r2, [pc, #68]	@ (8004794 <HAL_RCC_GetSysClockFreq+0xa0>)
 800474e:	5cd3      	ldrb	r3, [r2, r3]
 8004750:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a0d      	ldr	r2, [pc, #52]	@ (800478c <HAL_RCC_GetSysClockFreq+0x98>)
 8004756:	fb03 f202 	mul.w	r2, r3, r2
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	e004      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a0c      	ldr	r2, [pc, #48]	@ (8004798 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004768:	fb02 f303 	mul.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	613b      	str	r3, [r7, #16]
      break;
 8004772:	e002      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004774:	4b05      	ldr	r3, [pc, #20]	@ (800478c <HAL_RCC_GetSysClockFreq+0x98>)
 8004776:	613b      	str	r3, [r7, #16]
      break;
 8004778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800477a:	693b      	ldr	r3, [r7, #16]
}
 800477c:	4618      	mov	r0, r3
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	007a1200 	.word	0x007a1200
 8004790:	08008d0c 	.word	0x08008d0c
 8004794:	08008d1c 	.word	0x08008d1c
 8004798:	003d0900 	.word	0x003d0900

0800479c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047a4:	4b0a      	ldr	r3, [pc, #40]	@ (80047d0 <RCC_Delay+0x34>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a0a      	ldr	r2, [pc, #40]	@ (80047d4 <RCC_Delay+0x38>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	0a5b      	lsrs	r3, r3, #9
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047b8:	bf00      	nop
  }
  while (Delay --);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1e5a      	subs	r2, r3, #1
 80047be:	60fa      	str	r2, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f9      	bne.n	80047b8 <RCC_Delay+0x1c>
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr
 80047d0:	20000000 	.word	0x20000000
 80047d4:	10624dd3 	.word	0x10624dd3

080047d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d07d      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80047f4:	2300      	movs	r3, #0
 80047f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10d      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004804:	4b4c      	ldr	r3, [pc, #304]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4a4b      	ldr	r2, [pc, #300]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800480e:	61d3      	str	r3, [r2, #28]
 8004810:	4b49      	ldr	r3, [pc, #292]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800481c:	2301      	movs	r3, #1
 800481e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004820:	4b46      	ldr	r3, [pc, #280]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d118      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800482c:	4b43      	ldr	r3, [pc, #268]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a42      	ldr	r2, [pc, #264]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004838:	f7fc fdc0 	bl	80013bc <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483e:	e008      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004840:	f7fc fdbc 	bl	80013bc <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	@ 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e06d      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004852:	4b3a      	ldr	r3, [pc, #232]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800485e:	4b36      	ldr	r3, [pc, #216]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004866:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d02e      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	429a      	cmp	r2, r3
 800487a:	d027      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800487c:	4b2e      	ldr	r3, [pc, #184]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004884:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004886:	4b2e      	ldr	r3, [pc, #184]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800488c:	4b2c      	ldr	r3, [pc, #176]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004892:	4a29      	ldr	r2, [pc, #164]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d014      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a2:	f7fc fd8b 	bl	80013bc <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fc fd87 	bl	80013bc <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e036      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0ee      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4917      	ldr	r1, [pc, #92]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048de:	7dfb      	ldrb	r3, [r7, #23]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d105      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e4:	4b14      	ldr	r3, [pc, #80]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	4a13      	ldr	r2, [pc, #76]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	490b      	ldr	r1, [pc, #44]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490a:	4313      	orrs	r3, r2
 800490c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800491a:	4b07      	ldr	r3, [pc, #28]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	4904      	ldr	r1, [pc, #16]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004928:	4313      	orrs	r3, r2
 800492a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
 800493c:	40007000 	.word	0x40007000
 8004940:	42420440 	.word	0x42420440

08004944 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	4638      	mov	r0, r7
 800494e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr

0800495e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800496e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004972:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	b29a      	uxth	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004992:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004996:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	4013      	ands	r3, r2
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr

080049be <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	460b      	mov	r3, r1
 80049c8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	4638      	mov	r0, r7
 80049e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b09d      	sub	sp, #116	@ 0x74
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a36:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	78db      	ldrb	r3, [r3, #3]
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d81f      	bhi.n	8004a82 <USB_ActivateEndpoint+0x72>
 8004a42:	a201      	add	r2, pc, #4	@ (adr r2, 8004a48 <USB_ActivateEndpoint+0x38>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a59 	.word	0x08004a59
 8004a4c:	08004a75 	.word	0x08004a75
 8004a50:	08004a8b 	.word	0x08004a8b
 8004a54:	08004a67 	.word	0x08004a67
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004a58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004a64:	e012      	b.n	8004a8c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a6a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004a6e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004a72:	e00b      	b.n	8004a8c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004a80:	e004      	b.n	8004a8c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004a88:	e000      	b.n	8004a8c <USB_ActivateEndpoint+0x7c>
      break;
 8004a8a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	441a      	add	r2, r3
 8004a96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	7812      	ldrb	r2, [r2, #0]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	7b1b      	ldrb	r3, [r3, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f040 8178 	bne.w	8004dec <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	785b      	ldrb	r3, [r3, #1]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 8084 	beq.w	8004c0e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	4413      	add	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	011a      	lsls	r2, r3, #4
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	88db      	ldrh	r3, [r3, #6]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	827b      	strh	r3, [r7, #18]
 8004b48:	8a7b      	ldrh	r3, [r7, #18]
 8004b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01b      	beq.n	8004b8a <USB_ActivateEndpoint+0x17a>
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b68:	823b      	strh	r3, [r7, #16]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	8a3b      	ldrh	r3, [r7, #16]
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	78db      	ldrb	r3, [r3, #3]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d020      	beq.n	8004bd4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba8:	81bb      	strh	r3, [r7, #12]
 8004baa:	89bb      	ldrh	r3, [r7, #12]
 8004bac:	f083 0320 	eor.w	r3, r3, #32
 8004bb0:	81bb      	strh	r3, [r7, #12]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	89bb      	ldrh	r3, [r7, #12]
 8004bbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8013      	strh	r3, [r2, #0]
 8004bd2:	e2d5      	b.n	8005180 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004be6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bea:	81fb      	strh	r3, [r7, #14]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	441a      	add	r2, r3
 8004bf6:	89fb      	ldrh	r3, [r7, #14]
 8004bf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	8013      	strh	r3, [r2, #0]
 8004c0c:	e2b8      	b.n	8005180 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1e:	4413      	add	r3, r2
 8004c20:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	011a      	lsls	r2, r3, #4
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	88db      	ldrh	r3, [r3, #6]
 8004c36:	085b      	lsrs	r3, r3, #1
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c40:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c52:	4413      	add	r3, r2
 8004c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	011a      	lsls	r2, r3, #4
 8004c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5e:	4413      	add	r3, r2
 8004c60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	801a      	strh	r2, [r3, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c7c:	d91d      	bls.n	8004cba <USB_ActivateEndpoint+0x2aa>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d102      	bne.n	8004c98 <USB_ActivateEndpoint+0x288>
 8004c92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c94:	3b01      	subs	r3, #1
 8004c96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	029b      	lsls	r3, r3, #10
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	801a      	strh	r2, [r3, #0]
 8004cb8:	e026      	b.n	8004d08 <USB_ActivateEndpoint+0x2f8>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <USB_ActivateEndpoint+0x2c8>
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	801a      	strh	r2, [r3, #0]
 8004cd6:	e017      	b.n	8004d08 <USB_ActivateEndpoint+0x2f8>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	085b      	lsrs	r3, r3, #1
 8004cde:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <USB_ActivateEndpoint+0x2e2>
 8004cec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cee:	3301      	adds	r3, #1
 8004cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	029b      	lsls	r3, r3, #10
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	4313      	orrs	r3, r2
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004d16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <USB_ActivateEndpoint+0x348>
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d36:	843b      	strh	r3, [r7, #32]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	8c3b      	ldrh	r3, [r7, #32]
 8004d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d124      	bne.n	8004daa <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d76:	83bb      	strh	r3, [r7, #28]
 8004d78:	8bbb      	ldrh	r3, [r7, #28]
 8004d7a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004d7e:	83bb      	strh	r3, [r7, #28]
 8004d80:	8bbb      	ldrh	r3, [r7, #28]
 8004d82:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d86:	83bb      	strh	r3, [r7, #28]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	441a      	add	r2, r3
 8004d92:	8bbb      	ldrh	r3, [r7, #28]
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]
 8004da8:	e1ea      	b.n	8005180 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc0:	83fb      	strh	r3, [r7, #30]
 8004dc2:	8bfb      	ldrh	r3, [r7, #30]
 8004dc4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004dc8:	83fb      	strh	r3, [r7, #30]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	8bfb      	ldrh	r3, [r7, #30]
 8004dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8013      	strh	r3, [r2, #0]
 8004dea:	e1c9      	b.n	8005180 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	78db      	ldrb	r3, [r3, #3]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d11e      	bne.n	8004e32 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	441a      	add	r2, r3
 8004e18:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e24:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	8013      	strh	r3, [r2, #0]
 8004e30:	e01d      	b.n	8004e6e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e48:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e7e:	4413      	add	r3, r2
 8004e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	011a      	lsls	r2, r3, #4
 8004e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	891b      	ldrh	r3, [r3, #8]
 8004e96:	085b      	lsrs	r3, r3, #1
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb2:	4413      	add	r3, r2
 8004eb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	011a      	lsls	r2, r3, #4
 8004ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004ec4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	895b      	ldrh	r3, [r3, #10]
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ed4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f040 8093 	bne.w	8005006 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004ef0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01b      	beq.n	8004f34 <USB_ActivateEndpoint+0x524>
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f12:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004f42:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <USB_ActivateEndpoint+0x574>
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f62:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f9a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004f9c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004f9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004fa2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004fa4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004fa6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004faa:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004fb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fe2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ff0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ff4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005000:	b29b      	uxth	r3, r3
 8005002:	8013      	strh	r3, [r2, #0]
 8005004:	e0bc      	b.n	8005180 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005016:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800501a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01d      	beq.n	800505e <USB_ActivateEndpoint+0x64e>
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005038:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	441a      	add	r2, r3
 8005046:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800504a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800504e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005052:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800505a:	b29b      	uxth	r3, r3
 800505c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800506e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01d      	beq.n	80050b6 <USB_ActivateEndpoint+0x6a6>
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800508c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005090:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	441a      	add	r2, r3
 800509e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80050a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	78db      	ldrb	r3, [r3, #3]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d024      	beq.n	8005108 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050d4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80050d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80050dc:	f083 0320 	eor.w	r3, r3, #32
 80050e0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	441a      	add	r2, r3
 80050ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80050f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005102:	b29b      	uxth	r3, r3
 8005104:	8013      	strh	r3, [r2, #0]
 8005106:	e01d      	b.n	8005144 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	b29b      	uxth	r3, r3
 8005116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800511a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800511e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	441a      	add	r2, r3
 800512c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800513c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005140:	b29b      	uxth	r3, r3
 8005142:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	441a      	add	r2, r3
 8005168:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800516c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005170:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800517c:	b29b      	uxth	r3, r3
 800517e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005180:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005184:	4618      	mov	r0, r3
 8005186:	3774      	adds	r7, #116	@ 0x74
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop

08005190 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005190:	b480      	push	{r7}
 8005192:	b08d      	sub	sp, #52	@ 0x34
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	7b1b      	ldrb	r3, [r3, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f040 808e 	bne.w	80052c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d044      	beq.n	8005236 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	81bb      	strh	r3, [r7, #12]
 80051ba:	89bb      	ldrh	r3, [r7, #12]
 80051bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01b      	beq.n	80051fc <USB_DeactivateEndpoint+0x6c>
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051da:	817b      	strh	r3, [r7, #10]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	441a      	add	r2, r3
 80051e6:	897b      	ldrh	r3, [r7, #10]
 80051e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005212:	813b      	strh	r3, [r7, #8]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	893b      	ldrh	r3, [r7, #8]
 8005220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800522c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]
 8005234:	e192      	b.n	800555c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	827b      	strh	r3, [r7, #18]
 8005244:	8a7b      	ldrh	r3, [r7, #18]
 8005246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01b      	beq.n	8005286 <USB_DeactivateEndpoint+0xf6>
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29b      	uxth	r3, r3
 800525c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005264:	823b      	strh	r3, [r7, #16]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	441a      	add	r2, r3
 8005270:	8a3b      	ldrh	r3, [r7, #16]
 8005272:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005276:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800527a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800527e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005282:	b29b      	uxth	r3, r3
 8005284:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529c:	81fb      	strh	r3, [r7, #14]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	441a      	add	r2, r3
 80052a8:	89fb      	ldrh	r3, [r7, #14]
 80052aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8013      	strh	r3, [r2, #0]
 80052be:	e14d      	b.n	800555c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f040 80a5 	bne.w	8005414 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	843b      	strh	r3, [r7, #32]
 80052d8:	8c3b      	ldrh	r3, [r7, #32]
 80052da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d01b      	beq.n	800531a <USB_DeactivateEndpoint+0x18a>
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f8:	83fb      	strh	r3, [r7, #30]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	441a      	add	r2, r3
 8005304:	8bfb      	ldrh	r3, [r7, #30]
 8005306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800530a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800530e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005316:	b29b      	uxth	r3, r3
 8005318:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	83bb      	strh	r3, [r7, #28]
 8005328:	8bbb      	ldrh	r3, [r7, #28]
 800532a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01b      	beq.n	800536a <USB_DeactivateEndpoint+0x1da>
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005348:	837b      	strh	r3, [r7, #26]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	441a      	add	r2, r3
 8005354:	8b7b      	ldrh	r3, [r7, #26]
 8005356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800535a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800535e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005362:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005366:	b29b      	uxth	r3, r3
 8005368:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800537c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005380:	833b      	strh	r3, [r7, #24]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	441a      	add	r2, r3
 800538c:	8b3b      	ldrh	r3, [r7, #24]
 800538e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005392:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800539a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b8:	82fb      	strh	r3, [r7, #22]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	8afb      	ldrh	r3, [r7, #22]
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053f0:	82bb      	strh	r3, [r7, #20]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	441a      	add	r2, r3
 80053fc:	8abb      	ldrh	r3, [r7, #20]
 80053fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800540a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800540e:	b29b      	uxth	r3, r3
 8005410:	8013      	strh	r3, [r2, #0]
 8005412:	e0a3      	b.n	800555c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005422:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <USB_DeactivateEndpoint+0x2d4>
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800543e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005442:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	441a      	add	r2, r3
 800544e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005458:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800545c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005460:	b29b      	uxth	r3, r3
 8005462:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005472:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01b      	beq.n	80054b4 <USB_DeactivateEndpoint+0x324>
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29b      	uxth	r3, r3
 800548a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800548e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005492:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	441a      	add	r2, r3
 800549e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80054a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80054d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005502:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005510:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005514:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800551c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005520:	b29b      	uxth	r3, r3
 8005522:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800554c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005558:	b29b      	uxth	r3, r3
 800555a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3734      	adds	r7, #52	@ 0x34
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b0c2      	sub	sp, #264	@ 0x108
 800556c:	af00      	add	r7, sp, #0
 800556e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005572:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005576:	6018      	str	r0, [r3, #0]
 8005578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005580:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	2b01      	cmp	r3, #1
 8005590:	f040 86b7 	bne.w	8006302 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d908      	bls.n	80055c2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80055b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80055c0:	e007      	b.n	80055d2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80055c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	7b1b      	ldrb	r3, [r3, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d13a      	bne.n	8005658 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6959      	ldr	r1, [r3, #20]
 80055ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	88da      	ldrh	r2, [r3, #6]
 80055fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005604:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005608:	6800      	ldr	r0, [r0, #0]
 800560a:	f001 fc9c 	bl	8006f46 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800560e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005628:	b29b      	uxth	r3, r3
 800562a:	461a      	mov	r2, r3
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4413      	add	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	011a      	lsls	r2, r3, #4
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	801a      	strh	r2, [r3, #0]
 8005654:	f000 be1f 	b.w	8006296 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	78db      	ldrb	r3, [r3, #3]
 8005664:	2b02      	cmp	r3, #2
 8005666:	f040 8462 	bne.w	8005f2e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800566a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6a1a      	ldr	r2, [r3, #32]
 8005676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800567a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	429a      	cmp	r2, r3
 8005684:	f240 83df 	bls.w	8005e46 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ae:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80056b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	441a      	add	r2, r3
 80056cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80056d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056d8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80056dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80056e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6a1a      	ldr	r2, [r3, #32]
 80056f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f4:	1ad2      	subs	r2, r2, r3
 80056f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 81c7 	beq.w	8005ab8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800572a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	633b      	str	r3, [r7, #48]	@ 0x30
 8005736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d177      	bne.n	8005836 <USB_EPStartXfer+0x2ce>
 8005746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005756:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005760:	b29b      	uxth	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005766:	4413      	add	r3, r2
 8005768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800576a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	011a      	lsls	r2, r3, #4
 8005778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577a:	4413      	add	r3, r2
 800577c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005780:	627b      	str	r3, [r7, #36]	@ 0x24
 8005782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800578c:	b29a      	uxth	r2, r3
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005796:	2b3e      	cmp	r3, #62	@ 0x3e
 8005798:	d921      	bls.n	80057de <USB_EPStartXfer+0x276>
 800579a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80057a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <USB_EPStartXfer+0x252>
 80057b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80057b4:	3b01      	subs	r3, #1
 80057b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29a      	uxth	r2, r3
 80057c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	029b      	lsls	r3, r3, #10
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	4313      	orrs	r3, r2
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	801a      	strh	r2, [r3, #0]
 80057dc:	e050      	b.n	8005880 <USB_EPStartXfer+0x318>
 80057de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <USB_EPStartXfer+0x294>
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	e041      	b.n	8005880 <USB_EPStartXfer+0x318>
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005800:	085b      	lsrs	r3, r3, #1
 8005802:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <USB_EPStartXfer+0x2b4>
 8005812:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005816:	3301      	adds	r3, #1
 8005818:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	b29a      	uxth	r2, r3
 8005822:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005826:	b29b      	uxth	r3, r3
 8005828:	029b      	lsls	r3, r3, #10
 800582a:	b29b      	uxth	r3, r3
 800582c:	4313      	orrs	r3, r2
 800582e:	b29a      	uxth	r2, r3
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	e024      	b.n	8005880 <USB_EPStartXfer+0x318>
 8005836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d11c      	bne.n	8005880 <USB_EPStartXfer+0x318>
 8005846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005854:	b29b      	uxth	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585a:	4413      	add	r3, r2
 800585c:	633b      	str	r3, [r7, #48]	@ 0x30
 800585e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	011a      	lsls	r2, r3, #4
 800586c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586e:	4413      	add	r3, r2
 8005870:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587a:	b29a      	uxth	r2, r3
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	895b      	ldrh	r3, [r3, #10]
 800588c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6959      	ldr	r1, [r3, #20]
 800589c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058a6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058aa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058ae:	6800      	ldr	r0, [r0, #0]
 80058b0:	f001 fb49 	bl	8006f46 <USB_WritePMA>
            ep->xfer_buff += len;
 80058b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c4:	441a      	add	r2, r3
 80058c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6a1a      	ldr	r2, [r3, #32]
 80058de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d90f      	bls.n	800590e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80058ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6a1a      	ldr	r2, [r3, #32]
 80058fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	621a      	str	r2, [r3, #32]
 800590c:	e00e      	b.n	800592c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800590e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800591e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2200      	movs	r2, #0
 800592a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800592c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d177      	bne.n	8005a2c <USB_EPStartXfer+0x4c4>
 800593c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	61bb      	str	r3, [r7, #24]
 8005948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005956:	b29b      	uxth	r3, r3
 8005958:	461a      	mov	r2, r3
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	4413      	add	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
 8005960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	011a      	lsls	r2, r3, #4
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	4413      	add	r3, r2
 8005972:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005982:	b29a      	uxth	r2, r3
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	801a      	strh	r2, [r3, #0]
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598c:	2b3e      	cmp	r3, #62	@ 0x3e
 800598e:	d921      	bls.n	80059d4 <USB_EPStartXfer+0x46c>
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800599a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <USB_EPStartXfer+0x448>
 80059a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059aa:	3b01      	subs	r3, #1
 80059ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	029b      	lsls	r3, r3, #10
 80059be:	b29b      	uxth	r3, r3
 80059c0:	4313      	orrs	r3, r2
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	e056      	b.n	8005a82 <USB_EPStartXfer+0x51a>
 80059d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <USB_EPStartXfer+0x48a>
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e047      	b.n	8005a82 <USB_EPStartXfer+0x51a>
 80059f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <USB_EPStartXfer+0x4aa>
 8005a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	029b      	lsls	r3, r3, #10
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	4313      	orrs	r3, r2
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e02a      	b.n	8005a82 <USB_EPStartXfer+0x51a>
 8005a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d122      	bne.n	8005a82 <USB_EPStartXfer+0x51a>
 8005a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	623b      	str	r3, [r7, #32]
 8005a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	623b      	str	r3, [r7, #32]
 8005a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	011a      	lsls	r2, r3, #4
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	4413      	add	r3, r2
 8005a72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	891b      	ldrh	r3, [r3, #8]
 8005a8e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6959      	ldr	r1, [r3, #20]
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005aa8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005aac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ab0:	6800      	ldr	r0, [r0, #0]
 8005ab2:	f001 fa48 	bl	8006f46 <USB_WritePMA>
 8005ab6:	e3ee      	b.n	8006296 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d177      	bne.n	8005bb8 <USB_EPStartXfer+0x650>
 8005ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005acc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ae8:	4413      	add	r3, r2
 8005aea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	011a      	lsls	r2, r3, #4
 8005afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005afc:	4413      	add	r3, r2
 8005afe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b12:	801a      	strh	r2, [r3, #0]
 8005b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b18:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b1a:	d921      	bls.n	8005b60 <USB_EPStartXfer+0x5f8>
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2a:	f003 031f 	and.w	r3, r3, #31
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d104      	bne.n	8005b3c <USB_EPStartXfer+0x5d4>
 8005b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b36:	3b01      	subs	r3, #1
 8005b38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	029b      	lsls	r3, r3, #10
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	e056      	b.n	8005c0e <USB_EPStartXfer+0x6a6>
 8005b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <USB_EPStartXfer+0x616>
 8005b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b7a:	801a      	strh	r2, [r3, #0]
 8005b7c:	e047      	b.n	8005c0e <USB_EPStartXfer+0x6a6>
 8005b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <USB_EPStartXfer+0x636>
 8005b94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b98:	3301      	adds	r3, #1
 8005b9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	029b      	lsls	r3, r3, #10
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	e02a      	b.n	8005c0e <USB_EPStartXfer+0x6a6>
 8005bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d122      	bne.n	8005c0e <USB_EPStartXfer+0x6a6>
 8005bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005be8:	4413      	add	r3, r2
 8005bea:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	011a      	lsls	r2, r3, #4
 8005bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	891b      	ldrh	r3, [r3, #8]
 8005c1a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6959      	ldr	r1, [r3, #20]
 8005c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c34:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c38:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c3c:	6800      	ldr	r0, [r0, #0]
 8005c3e:	f001 f982 	bl	8006f46 <USB_WritePMA>
            ep->xfer_buff += len;
 8005c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695a      	ldr	r2, [r3, #20]
 8005c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c52:	441a      	add	r2, r3
 8005c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
 8005c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d90f      	bls.n	8005c9c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6a1a      	ldr	r2, [r3, #32]
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8c:	1ad2      	subs	r2, r2, r3
 8005c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	621a      	str	r2, [r3, #32]
 8005c9a:	e00e      	b.n	8005cba <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d177      	bne.n	8005dc6 <USB_EPStartXfer+0x85e>
 8005cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf6:	4413      	add	r3, r2
 8005cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	011a      	lsls	r2, r3, #4
 8005d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d26:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d28:	d921      	bls.n	8005d6e <USB_EPStartXfer+0x806>
 8005d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d38:	f003 031f 	and.w	r3, r3, #31
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d104      	bne.n	8005d4a <USB_EPStartXfer+0x7e2>
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d44:	3b01      	subs	r3, #1
 8005d46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	029b      	lsls	r3, r3, #10
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6a:	801a      	strh	r2, [r3, #0]
 8005d6c:	e050      	b.n	8005e10 <USB_EPStartXfer+0x8a8>
 8005d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10a      	bne.n	8005d8c <USB_EPStartXfer+0x824>
 8005d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	e041      	b.n	8005e10 <USB_EPStartXfer+0x8a8>
 8005d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <USB_EPStartXfer+0x844>
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da6:	3301      	adds	r3, #1
 8005da8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	029b      	lsls	r3, r3, #10
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e024      	b.n	8005e10 <USB_EPStartXfer+0x8a8>
 8005dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d11c      	bne.n	8005e10 <USB_EPStartXfer+0x8a8>
 8005dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dea:	4413      	add	r3, r2
 8005dec:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	011a      	lsls	r2, r3, #4
 8005dfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dfe:	4413      	add	r3, r2
 8005e00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	895b      	ldrh	r3, [r3, #10]
 8005e1c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6959      	ldr	r1, [r3, #20]
 8005e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e36:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e3a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e3e:	6800      	ldr	r0, [r0, #0]
 8005e40:	f001 f881 	bl	8006f46 <USB_WritePMA>
 8005e44:	e227      	b.n	8006296 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e7c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	441a      	add	r2, r3
 8005e9a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ed2:	4413      	add	r3, r2
 8005ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	011a      	lsls	r2, r3, #4
 8005ee4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005eec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ef6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	891b      	ldrh	r3, [r3, #8]
 8005f04:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6959      	ldr	r1, [r3, #20]
 8005f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f1e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f22:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f26:	6800      	ldr	r0, [r0, #0]
 8005f28:	f001 f80d 	bl	8006f46 <USB_WritePMA>
 8005f2c:	e1b3      	b.n	8006296 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 80c6 	beq.w	8006100 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d177      	bne.n	8006080 <USB_EPStartXfer+0xb18>
 8005f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	461a      	mov	r2, r3
 8005fae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fb0:	4413      	add	r3, r2
 8005fb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	011a      	lsls	r2, r3, #4
 8005fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fca:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fe2:	d921      	bls.n	8006028 <USB_EPStartXfer+0xac0>
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <USB_EPStartXfer+0xa9c>
 8005ffa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ffe:	3b01      	subs	r3, #1
 8006000:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29a      	uxth	r2, r3
 800600a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800600e:	b29b      	uxth	r3, r3
 8006010:	029b      	lsls	r3, r3, #10
 8006012:	b29b      	uxth	r3, r3
 8006014:	4313      	orrs	r3, r2
 8006016:	b29b      	uxth	r3, r3
 8006018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006020:	b29a      	uxth	r2, r3
 8006022:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006024:	801a      	strh	r2, [r3, #0]
 8006026:	e050      	b.n	80060ca <USB_EPStartXfer+0xb62>
 8006028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10a      	bne.n	8006046 <USB_EPStartXfer+0xade>
 8006030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603e:	b29a      	uxth	r2, r3
 8006040:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006042:	801a      	strh	r2, [r3, #0]
 8006044:	e041      	b.n	80060ca <USB_EPStartXfer+0xb62>
 8006046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800604a:	085b      	lsrs	r3, r3, #1
 800604c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <USB_EPStartXfer+0xafe>
 800605c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006060:	3301      	adds	r3, #1
 8006062:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006066:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29a      	uxth	r2, r3
 800606c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006070:	b29b      	uxth	r3, r3
 8006072:	029b      	lsls	r3, r3, #10
 8006074:	b29b      	uxth	r3, r3
 8006076:	4313      	orrs	r3, r2
 8006078:	b29a      	uxth	r2, r3
 800607a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	e024      	b.n	80060ca <USB_EPStartXfer+0xb62>
 8006080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d11c      	bne.n	80060ca <USB_EPStartXfer+0xb62>
 8006090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800609e:	b29b      	uxth	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060a4:	4413      	add	r3, r2
 80060a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80060a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	011a      	lsls	r2, r3, #4
 80060b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060b8:	4413      	add	r3, r2
 80060ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80060ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	895b      	ldrh	r3, [r3, #10]
 80060d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6959      	ldr	r1, [r3, #20]
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80060f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80060f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80060f8:	6800      	ldr	r0, [r0, #0]
 80060fa:	f000 ff24 	bl	8006f46 <USB_WritePMA>
 80060fe:	e0ca      	b.n	8006296 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d177      	bne.n	8006200 <USB_EPStartXfer+0xc98>
 8006110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006130:	4413      	add	r3, r2
 8006132:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	011a      	lsls	r2, r3, #4
 8006142:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006144:	4413      	add	r3, r2
 8006146:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800614a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800614c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006156:	b29a      	uxth	r2, r3
 8006158:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006160:	2b3e      	cmp	r3, #62	@ 0x3e
 8006162:	d921      	bls.n	80061a8 <USB_EPStartXfer+0xc40>
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800616e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2b00      	cmp	r3, #0
 8006178:	d104      	bne.n	8006184 <USB_EPStartXfer+0xc1c>
 800617a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800617e:	3b01      	subs	r3, #1
 8006180:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006184:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29a      	uxth	r2, r3
 800618a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800618e:	b29b      	uxth	r3, r3
 8006190:	029b      	lsls	r3, r3, #10
 8006192:	b29b      	uxth	r3, r3
 8006194:	4313      	orrs	r3, r2
 8006196:	b29b      	uxth	r3, r3
 8006198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	e05c      	b.n	8006262 <USB_EPStartXfer+0xcfa>
 80061a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <USB_EPStartXfer+0xc5e>
 80061b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061be:	b29a      	uxth	r2, r3
 80061c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	e04d      	b.n	8006262 <USB_EPStartXfer+0xcfa>
 80061c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <USB_EPStartXfer+0xc7e>
 80061dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80061e0:	3301      	adds	r3, #1
 80061e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	029b      	lsls	r3, r3, #10
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	4313      	orrs	r3, r2
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	e030      	b.n	8006262 <USB_EPStartXfer+0xcfa>
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d128      	bne.n	8006262 <USB_EPStartXfer+0xcfa>
 8006210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800621e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800622c:	b29b      	uxth	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006234:	4413      	add	r3, r2
 8006236:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800623a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	011a      	lsls	r2, r3, #4
 8006248:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800624c:	4413      	add	r3, r2
 800624e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006252:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625a:	b29a      	uxth	r2, r3
 800625c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006260:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	891b      	ldrh	r3, [r3, #8]
 800626e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6959      	ldr	r1, [r3, #20]
 800627e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006282:	b29b      	uxth	r3, r3
 8006284:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006288:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800628c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006290:	6800      	ldr	r0, [r0, #0]
 8006292:	f000 fe58 	bl	8006f46 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062bc:	817b      	strh	r3, [r7, #10]
 80062be:	897b      	ldrh	r3, [r7, #10]
 80062c0:	f083 0310 	eor.w	r3, r3, #16
 80062c4:	817b      	strh	r3, [r7, #10]
 80062c6:	897b      	ldrh	r3, [r7, #10]
 80062c8:	f083 0320 	eor.w	r3, r3, #32
 80062cc:	817b      	strh	r3, [r7, #10]
 80062ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	441a      	add	r2, r3
 80062e8:	897b      	ldrh	r3, [r7, #10]
 80062ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	8013      	strh	r3, [r2, #0]
 80062fe:	f000 bcde 	b.w	8006cbe <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	7b1b      	ldrb	r3, [r3, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f040 80bb 	bne.w	800648a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699a      	ldr	r2, [r3, #24]
 8006320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	429a      	cmp	r2, r3
 800632e:	d917      	bls.n	8006360 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006350:	1ad2      	subs	r2, r2, r3
 8006352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	619a      	str	r2, [r3, #24]
 800635e:	e00e      	b.n	800637e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2200      	movs	r2, #0
 800637c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800637e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800638c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006390:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800639a:	b29b      	uxth	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80063a2:	4413      	add	r3, r2
 80063a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	011a      	lsls	r2, r3, #4
 80063b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80063ba:	4413      	add	r3, r2
 80063bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80063c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063d6:	801a      	strh	r2, [r3, #0]
 80063d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80063de:	d924      	bls.n	800642a <USB_EPStartXfer+0xec2>
 80063e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e4:	095b      	lsrs	r3, r3, #5
 80063e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ee:	f003 031f 	and.w	r3, r3, #31
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <USB_EPStartXfer+0xe98>
 80063f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80063fa:	3b01      	subs	r3, #1
 80063fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006400:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29a      	uxth	r2, r3
 8006408:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800640c:	b29b      	uxth	r3, r3
 800640e:	029b      	lsls	r3, r3, #10
 8006410:	b29b      	uxth	r3, r3
 8006412:	4313      	orrs	r3, r2
 8006414:	b29b      	uxth	r3, r3
 8006416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641e:	b29a      	uxth	r2, r3
 8006420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006424:	801a      	strh	r2, [r3, #0]
 8006426:	f000 bc10 	b.w	8006c4a <USB_EPStartXfer+0x16e2>
 800642a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10c      	bne.n	800644c <USB_EPStartXfer+0xee4>
 8006432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006442:	b29a      	uxth	r2, r3
 8006444:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	e3fe      	b.n	8006c4a <USB_EPStartXfer+0x16e2>
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d004      	beq.n	800646c <USB_EPStartXfer+0xf04>
 8006462:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006466:	3301      	adds	r3, #1
 8006468:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800646c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29a      	uxth	r2, r3
 8006474:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006478:	b29b      	uxth	r3, r3
 800647a:	029b      	lsls	r3, r3, #10
 800647c:	b29b      	uxth	r3, r3
 800647e:	4313      	orrs	r3, r2
 8006480:	b29a      	uxth	r2, r3
 8006482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	e3df      	b.n	8006c4a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800648a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	78db      	ldrb	r3, [r3, #3]
 8006496:	2b02      	cmp	r3, #2
 8006498:	f040 8218 	bne.w	80068cc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800649c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f040 809d 	bne.w	80065e8 <USB_EPStartXfer+0x1080>
 80064ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064d2:	4413      	add	r3, r2
 80064d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	011a      	lsls	r2, r3, #4
 80064e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ea:	4413      	add	r3, r2
 80064ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006500:	b29a      	uxth	r2, r3
 8006502:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b3e      	cmp	r3, #62	@ 0x3e
 8006516:	d92b      	bls.n	8006570 <USB_EPStartXfer+0x1008>
 8006518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800652a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 031f 	and.w	r3, r3, #31
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <USB_EPStartXfer+0xfe0>
 800653e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006542:	3b01      	subs	r3, #1
 8006544:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29a      	uxth	r2, r3
 8006550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006554:	b29b      	uxth	r3, r3
 8006556:	029b      	lsls	r3, r3, #10
 8006558:	b29b      	uxth	r3, r3
 800655a:	4313      	orrs	r3, r2
 800655c:	b29b      	uxth	r3, r3
 800655e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006566:	b29a      	uxth	r2, r3
 8006568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800656c:	801a      	strh	r2, [r3, #0]
 800656e:	e070      	b.n	8006652 <USB_EPStartXfer+0x10ea>
 8006570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10c      	bne.n	800659a <USB_EPStartXfer+0x1032>
 8006580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006590:	b29a      	uxth	r2, r3
 8006592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	e05b      	b.n	8006652 <USB_EPStartXfer+0x10ea>
 800659a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <USB_EPStartXfer+0x1062>
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c4:	3301      	adds	r3, #1
 80065c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	029b      	lsls	r3, r3, #10
 80065da:	b29b      	uxth	r3, r3
 80065dc:	4313      	orrs	r3, r2
 80065de:	b29a      	uxth	r2, r3
 80065e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80065e4:	801a      	strh	r2, [r3, #0]
 80065e6:	e034      	b.n	8006652 <USB_EPStartXfer+0x10ea>
 80065e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d12c      	bne.n	8006652 <USB_EPStartXfer+0x10ea>
 80065f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006614:	b29b      	uxth	r3, r3
 8006616:	461a      	mov	r2, r3
 8006618:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800661c:	4413      	add	r3, r2
 800661e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	011a      	lsls	r2, r3, #4
 8006630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006634:	4413      	add	r3, r2
 8006636:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800663a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800663e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	b29a      	uxth	r2, r3
 800664c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006650:	801a      	strh	r2, [r3, #0]
 8006652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	785b      	ldrb	r3, [r3, #1]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f040 809d 	bne.w	80067ac <USB_EPStartXfer+0x1244>
 8006672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800668e:	b29b      	uxth	r3, r3
 8006690:	461a      	mov	r2, r3
 8006692:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006696:	4413      	add	r3, r2
 8006698:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800669c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	011a      	lsls	r2, r3, #4
 80066aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066ae:	4413      	add	r3, r2
 80066b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80066da:	d92b      	bls.n	8006734 <USB_EPStartXfer+0x11cc>
 80066dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d104      	bne.n	800670c <USB_EPStartXfer+0x11a4>
 8006702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006706:	3b01      	subs	r3, #1
 8006708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800670c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	b29a      	uxth	r2, r3
 8006714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006718:	b29b      	uxth	r3, r3
 800671a:	029b      	lsls	r3, r3, #10
 800671c:	b29b      	uxth	r3, r3
 800671e:	4313      	orrs	r3, r2
 8006720:	b29b      	uxth	r3, r3
 8006722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672a:	b29a      	uxth	r2, r3
 800672c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006730:	801a      	strh	r2, [r3, #0]
 8006732:	e069      	b.n	8006808 <USB_EPStartXfer+0x12a0>
 8006734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10c      	bne.n	800675e <USB_EPStartXfer+0x11f6>
 8006744:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006754:	b29a      	uxth	r2, r3
 8006756:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800675a:	801a      	strh	r2, [r3, #0]
 800675c:	e054      	b.n	8006808 <USB_EPStartXfer+0x12a0>
 800675e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d004      	beq.n	800678e <USB_EPStartXfer+0x1226>
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006788:	3301      	adds	r3, #1
 800678a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800678e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29a      	uxth	r2, r3
 8006796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800679a:	b29b      	uxth	r3, r3
 800679c:	029b      	lsls	r3, r3, #10
 800679e:	b29b      	uxth	r3, r3
 80067a0:	4313      	orrs	r3, r2
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	e02d      	b.n	8006808 <USB_EPStartXfer+0x12a0>
 80067ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d125      	bne.n	8006808 <USB_EPStartXfer+0x12a0>
 80067bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80067d2:	4413      	add	r3, r2
 80067d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80067d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	011a      	lsls	r2, r3, #4
 80067e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80067ea:	4413      	add	r3, r2
 80067ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	b29a      	uxth	r2, r3
 8006802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006806:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8218 	beq.w	8006c4a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800681a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800683a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800683e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <USB_EPStartXfer+0x12ea>
 8006846:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800684a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10d      	bne.n	800686e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006852:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800685a:	2b00      	cmp	r3, #0
 800685c:	f040 81f5 	bne.w	8006c4a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006860:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	f040 81ee 	bne.w	8006c4a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800686e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006872:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006894:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	441a      	add	r2, r3
 80068b2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80068b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	8013      	strh	r3, [r2, #0]
 80068ca:	e1be      	b.n	8006c4a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80068cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	78db      	ldrb	r3, [r3, #3]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	f040 81b4 	bne.w	8006c46 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80068de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699a      	ldr	r2, [r3, #24]
 80068ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d917      	bls.n	800692a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80068fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800690a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691a:	1ad2      	subs	r2, r2, r3
 800691c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	619a      	str	r2, [r3, #24]
 8006928:	e00e      	b.n	8006948 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800692a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800693a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2200      	movs	r2, #0
 8006946:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 8085 	bne.w	8006a64 <USB_EPStartXfer+0x14fc>
 800695a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006976:	b29b      	uxth	r3, r3
 8006978:	461a      	mov	r2, r3
 800697a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800697e:	4413      	add	r3, r2
 8006980:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	011a      	lsls	r2, r3, #4
 8006992:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006996:	4413      	add	r3, r2
 8006998:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800699c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80069ba:	d923      	bls.n	8006a04 <USB_EPStartXfer+0x149c>
 80069bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80069c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ca:	f003 031f 	and.w	r3, r3, #31
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d104      	bne.n	80069dc <USB_EPStartXfer+0x1474>
 80069d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069d6:	3b01      	subs	r3, #1
 80069d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80069dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	029b      	lsls	r3, r3, #10
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e060      	b.n	8006ac6 <USB_EPStartXfer+0x155e>
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10c      	bne.n	8006a26 <USB_EPStartXfer+0x14be>
 8006a0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a22:	801a      	strh	r2, [r3, #0]
 8006a24:	e04f      	b.n	8006ac6 <USB_EPStartXfer+0x155e>
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <USB_EPStartXfer+0x14de>
 8006a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a40:	3301      	adds	r3, #1
 8006a42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	029b      	lsls	r3, r3, #10
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	e030      	b.n	8006ac6 <USB_EPStartXfer+0x155e>
 8006a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	785b      	ldrb	r3, [r3, #1]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d128      	bne.n	8006ac6 <USB_EPStartXfer+0x155e>
 8006a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a98:	4413      	add	r3, r2
 8006a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	011a      	lsls	r2, r3, #4
 8006aac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ab6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f040 8085 	bne.w	8006bf0 <USB_EPStartXfer+0x1688>
 8006ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	011a      	lsls	r2, r3, #4
 8006b1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006b22:	4413      	add	r3, r2
 8006b24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b3e:	801a      	strh	r2, [r3, #0]
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b44:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b46:	d923      	bls.n	8006b90 <USB_EPStartXfer+0x1628>
 8006b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4c:	095b      	lsrs	r3, r3, #5
 8006b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d104      	bne.n	8006b68 <USB_EPStartXfer+0x1600>
 8006b5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b62:	3b01      	subs	r3, #1
 8006b64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	029b      	lsls	r3, r3, #10
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b8c:	801a      	strh	r2, [r3, #0]
 8006b8e:	e05c      	b.n	8006c4a <USB_EPStartXfer+0x16e2>
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10c      	bne.n	8006bb2 <USB_EPStartXfer+0x164a>
 8006b98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	e04b      	b.n	8006c4a <USB_EPStartXfer+0x16e2>
 8006bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <USB_EPStartXfer+0x166a>
 8006bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bcc:	3301      	adds	r3, #1
 8006bce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	029b      	lsls	r3, r3, #10
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	4313      	orrs	r3, r2
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006bec:	801a      	strh	r2, [r3, #0]
 8006bee:	e02c      	b.n	8006c4a <USB_EPStartXfer+0x16e2>
 8006bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	785b      	ldrb	r3, [r3, #1]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d124      	bne.n	8006c4a <USB_EPStartXfer+0x16e2>
 8006c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c16:	4413      	add	r3, r2
 8006c18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	011a      	lsls	r2, r3, #4
 8006c2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c2e:	4413      	add	r3, r2
 8006c30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c42:	801a      	strh	r2, [r3, #0]
 8006c44:	e001      	b.n	8006c4a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e03a      	b.n	8006cc0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c70:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c78:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c7c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b085      	sub	sp, #20
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	785b      	ldrb	r3, [r3, #1]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d020      	beq.n	8006d1e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cf2:	81bb      	strh	r3, [r7, #12]
 8006cf4:	89bb      	ldrh	r3, [r7, #12]
 8006cf6:	f083 0310 	eor.w	r3, r3, #16
 8006cfa:	81bb      	strh	r3, [r7, #12]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	441a      	add	r2, r3
 8006d06:	89bb      	ldrh	r3, [r7, #12]
 8006d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	8013      	strh	r3, [r2, #0]
 8006d1c:	e01f      	b.n	8006d5e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d34:	81fb      	strh	r3, [r7, #14]
 8006d36:	89fb      	ldrh	r3, [r7, #14]
 8006d38:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d3c:	81fb      	strh	r3, [r7, #14]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	441a      	add	r2, r3
 8006d48:	89fb      	ldrh	r3, [r7, #14]
 8006d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr

08006d6a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b087      	sub	sp, #28
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	7b1b      	ldrb	r3, [r3, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f040 809d 	bne.w	8006eb8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	785b      	ldrb	r3, [r3, #1]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d04c      	beq.n	8006e20 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	823b      	strh	r3, [r7, #16]
 8006d94:	8a3b      	ldrh	r3, [r7, #16]
 8006d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d01b      	beq.n	8006dd6 <USB_EPClearStall+0x6c>
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db4:	81fb      	strh	r3, [r7, #14]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	441a      	add	r2, r3
 8006dc0:	89fb      	ldrh	r3, [r7, #14]
 8006dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	78db      	ldrb	r3, [r3, #3]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d06c      	beq.n	8006eb8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006df4:	81bb      	strh	r3, [r7, #12]
 8006df6:	89bb      	ldrh	r3, [r7, #12]
 8006df8:	f083 0320 	eor.w	r3, r3, #32
 8006dfc:	81bb      	strh	r3, [r7, #12]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	441a      	add	r2, r3
 8006e08:	89bb      	ldrh	r3, [r7, #12]
 8006e0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	8013      	strh	r3, [r2, #0]
 8006e1e:	e04b      	b.n	8006eb8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	82fb      	strh	r3, [r7, #22]
 8006e2e:	8afb      	ldrh	r3, [r7, #22]
 8006e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01b      	beq.n	8006e70 <USB_EPClearStall+0x106>
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e4e:	82bb      	strh	r3, [r7, #20]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	441a      	add	r2, r3
 8006e5a:	8abb      	ldrh	r3, [r7, #20]
 8006e5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e86:	827b      	strh	r3, [r7, #18]
 8006e88:	8a7b      	ldrh	r3, [r7, #18]
 8006e8a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e8e:	827b      	strh	r3, [r7, #18]
 8006e90:	8a7b      	ldrh	r3, [r7, #18]
 8006e92:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e96:	827b      	strh	r3, [r7, #18]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	441a      	add	r2, r3
 8006ea2:	8a7b      	ldrh	r3, [r7, #18]
 8006ea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr

08006ec4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d103      	bne.n	8006ede <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2280      	movs	r2, #128	@ 0x80
 8006eda:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr

08006eea <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr

08006efe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bc80      	pop	{r7}
 8006f10:	4770      	bx	lr

08006f12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006f24:	68fb      	ldr	r3, [r7, #12]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr

08006f30 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr

08006f46 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b08b      	sub	sp, #44	@ 0x2c
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	4611      	mov	r1, r2
 8006f52:	461a      	mov	r2, r3
 8006f54:	460b      	mov	r3, r1
 8006f56:	80fb      	strh	r3, [r7, #6]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f5c:	88bb      	ldrh	r3, [r7, #4]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	005a      	lsls	r2, r3, #1
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f78:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f7e:	e01e      	b.n	8006fbe <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	021b      	lsls	r3, r3, #8
 8006f8e:	b21a      	sxth	r2, r3
 8006f90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	b21b      	sxth	r3, r3
 8006f98:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	8a7a      	ldrh	r2, [r7, #18]
 8006f9e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	3302      	adds	r3, #2
 8006fa4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	3302      	adds	r3, #2
 8006faa:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1dd      	bne.n	8006f80 <USB_WritePMA+0x3a>
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	372c      	adds	r7, #44	@ 0x2c
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr

08006fd0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b08b      	sub	sp, #44	@ 0x2c
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4611      	mov	r1, r2
 8006fdc:	461a      	mov	r2, r3
 8006fde:	460b      	mov	r3, r1
 8006fe0:	80fb      	strh	r3, [r7, #6]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006fe6:	88bb      	ldrh	r3, [r7, #4]
 8006fe8:	085b      	lsrs	r3, r3, #1
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	005a      	lsls	r2, r3, #1
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007002:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	627b      	str	r3, [r7, #36]	@ 0x24
 8007008:	e01b      	b.n	8007042 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	3302      	adds	r3, #2
 8007016:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	b2da      	uxtb	r2, r3
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	3301      	adds	r3, #1
 8007024:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	0a1b      	lsrs	r3, r3, #8
 800702a:	b2da      	uxtb	r2, r3
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	3301      	adds	r3, #1
 8007034:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	3302      	adds	r3, #2
 800703a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703e:	3b01      	subs	r3, #1
 8007040:	627b      	str	r3, [r7, #36]	@ 0x24
 8007042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e0      	bne.n	800700a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007048:	88bb      	ldrh	r3, [r7, #4]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	b29b      	uxth	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	b2da      	uxtb	r2, r3
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	701a      	strb	r2, [r3, #0]
  }
}
 8007064:	bf00      	nop
 8007066:	372c      	adds	r7, #44	@ 0x2c
 8007068:	46bd      	mov	sp, r7
 800706a:	bc80      	pop	{r7}
 800706c:	4770      	bx	lr

0800706e <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800707a:	2304      	movs	r3, #4
 800707c:	2203      	movs	r2, #3
 800707e:	2181      	movs	r1, #129	@ 0x81
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 fc80 	bl	8008986 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800708c:	2010      	movs	r0, #16
 800708e:	f001 fd8d 	bl	8008bac <USBD_static_malloc>
 8007092:	4602      	mov	r2, r0
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80070a4:	2302      	movs	r3, #2
 80070a6:	e005      	b.n	80070b4 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ae:	2200      	movs	r2, #0
 80070b0:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80070c8:	2181      	movs	r1, #129	@ 0x81
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 fc81 	bl	80089d2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d009      	beq.n	80070f4 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070e6:	4618      	mov	r0, r3
 80070e8:	f001 fd6c 	bl	8008bc4 <USBD_static_free>
    pdev->pClassData = NULL;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007110:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007116:	2300      	movs	r3, #0
 8007118:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800712a:	2b00      	cmp	r3, #0
 800712c:	d045      	beq.n	80071ba <USBD_HID_Setup+0xba>
 800712e:	2b20      	cmp	r3, #32
 8007130:	f040 80d3 	bne.w	80072da <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	785b      	ldrb	r3, [r3, #1]
 8007138:	3b02      	subs	r3, #2
 800713a:	2b09      	cmp	r3, #9
 800713c:	d835      	bhi.n	80071aa <USBD_HID_Setup+0xaa>
 800713e:	a201      	add	r2, pc, #4	@ (adr r2, 8007144 <USBD_HID_Setup+0x44>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	0800719b 	.word	0x0800719b
 8007148:	0800717b 	.word	0x0800717b
 800714c:	080071ab 	.word	0x080071ab
 8007150:	080071ab 	.word	0x080071ab
 8007154:	080071ab 	.word	0x080071ab
 8007158:	080071ab 	.word	0x080071ab
 800715c:	080071ab 	.word	0x080071ab
 8007160:	080071ab 	.word	0x080071ab
 8007164:	08007189 	.word	0x08007189
 8007168:	0800716d 	.word	0x0800716d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	885b      	ldrh	r3, [r3, #2]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	461a      	mov	r2, r3
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	601a      	str	r2, [r3, #0]
          break;
 8007178:	e01e      	b.n	80071b8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2201      	movs	r2, #1
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 f941 	bl	8008408 <USBD_CtlSendData>
          break;
 8007186:	e017      	b.n	80071b8 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	885b      	ldrh	r3, [r3, #2]
 800718c:	0a1b      	lsrs	r3, r3, #8
 800718e:	b29b      	uxth	r3, r3
 8007190:	b2db      	uxtb	r3, r3
 8007192:	461a      	mov	r2, r3
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	605a      	str	r2, [r3, #4]
          break;
 8007198:	e00e      	b.n	80071b8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	3304      	adds	r3, #4
 800719e:	2201      	movs	r2, #1
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f001 f930 	bl	8008408 <USBD_CtlSendData>
          break;
 80071a8:	e006      	b.n	80071b8 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 f8c1 	bl	8008334 <USBD_CtlError>
          ret = USBD_FAIL;
 80071b2:	2302      	movs	r3, #2
 80071b4:	75fb      	strb	r3, [r7, #23]
          break;
 80071b6:	bf00      	nop
      }
      break;
 80071b8:	e096      	b.n	80072e8 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	785b      	ldrb	r3, [r3, #1]
 80071be:	2b0b      	cmp	r3, #11
 80071c0:	f200 8083 	bhi.w	80072ca <USBD_HID_Setup+0x1ca>
 80071c4:	a201      	add	r2, pc, #4	@ (adr r2, 80071cc <USBD_HID_Setup+0xcc>)
 80071c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ca:	bf00      	nop
 80071cc:	080071fd 	.word	0x080071fd
 80071d0:	080072cb 	.word	0x080072cb
 80071d4:	080072cb 	.word	0x080072cb
 80071d8:	080072cb 	.word	0x080072cb
 80071dc:	080072cb 	.word	0x080072cb
 80071e0:	080072cb 	.word	0x080072cb
 80071e4:	08007225 	.word	0x08007225
 80071e8:	080072cb 	.word	0x080072cb
 80071ec:	080072cb 	.word	0x080072cb
 80071f0:	080072cb 	.word	0x080072cb
 80071f4:	0800727d 	.word	0x0800727d
 80071f8:	080072a5 	.word	0x080072a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007202:	2b03      	cmp	r3, #3
 8007204:	d107      	bne.n	8007216 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007206:	f107 030e 	add.w	r3, r7, #14
 800720a:	2202      	movs	r2, #2
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 f8fa 	bl	8008408 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007214:	e060      	b.n	80072d8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 f88b 	bl	8008334 <USBD_CtlError>
            ret = USBD_FAIL;
 800721e:	2302      	movs	r3, #2
 8007220:	75fb      	strb	r3, [r7, #23]
          break;
 8007222:	e059      	b.n	80072d8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	885b      	ldrh	r3, [r3, #2]
 8007228:	0a1b      	lsrs	r3, r3, #8
 800722a:	b29b      	uxth	r3, r3
 800722c:	2b22      	cmp	r3, #34	@ 0x22
 800722e:	d108      	bne.n	8007242 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	88db      	ldrh	r3, [r3, #6]
 8007234:	2b4a      	cmp	r3, #74	@ 0x4a
 8007236:	bf28      	it	cs
 8007238:	234a      	movcs	r3, #74	@ 0x4a
 800723a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800723c:	4b2d      	ldr	r3, [pc, #180]	@ (80072f4 <USBD_HID_Setup+0x1f4>)
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	e015      	b.n	800726e <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	885b      	ldrh	r3, [r3, #2]
 8007246:	0a1b      	lsrs	r3, r3, #8
 8007248:	b29b      	uxth	r3, r3
 800724a:	2b21      	cmp	r3, #33	@ 0x21
 800724c:	d108      	bne.n	8007260 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800724e:	4b2a      	ldr	r3, [pc, #168]	@ (80072f8 <USBD_HID_Setup+0x1f8>)
 8007250:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	88db      	ldrh	r3, [r3, #6]
 8007256:	2b09      	cmp	r3, #9
 8007258:	bf28      	it	cs
 800725a:	2309      	movcs	r3, #9
 800725c:	83fb      	strh	r3, [r7, #30]
 800725e:	e006      	b.n	800726e <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 f866 	bl	8008334 <USBD_CtlError>
            ret = USBD_FAIL;
 8007268:	2302      	movs	r3, #2
 800726a:	75fb      	strb	r3, [r7, #23]
            break;
 800726c:	e034      	b.n	80072d8 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800726e:	8bfb      	ldrh	r3, [r7, #30]
 8007270:	461a      	mov	r2, r3
 8007272:	69b9      	ldr	r1, [r7, #24]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 f8c7 	bl	8008408 <USBD_CtlSendData>
          break;
 800727a:	e02d      	b.n	80072d8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007282:	2b03      	cmp	r3, #3
 8007284:	d107      	bne.n	8007296 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	3308      	adds	r3, #8
 800728a:	2201      	movs	r2, #1
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 f8ba 	bl	8008408 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007294:	e020      	b.n	80072d8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f84b 	bl	8008334 <USBD_CtlError>
            ret = USBD_FAIL;
 800729e:	2302      	movs	r3, #2
 80072a0:	75fb      	strb	r3, [r7, #23]
          break;
 80072a2:	e019      	b.n	80072d8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d106      	bne.n	80072bc <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	885b      	ldrh	r3, [r3, #2]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072ba:	e00d      	b.n	80072d8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 f838 	bl	8008334 <USBD_CtlError>
            ret = USBD_FAIL;
 80072c4:	2302      	movs	r3, #2
 80072c6:	75fb      	strb	r3, [r7, #23]
          break;
 80072c8:	e006      	b.n	80072d8 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 f831 	bl	8008334 <USBD_CtlError>
          ret = USBD_FAIL;
 80072d2:	2302      	movs	r3, #2
 80072d4:	75fb      	strb	r3, [r7, #23]
          break;
 80072d6:	bf00      	nop
      }
      break;
 80072d8:	e006      	b.n	80072e8 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f829 	bl	8008334 <USBD_CtlError>
      ret = USBD_FAIL;
 80072e2:	2302      	movs	r3, #2
 80072e4:	75fb      	strb	r3, [r7, #23]
      break;
 80072e6:	bf00      	nop
  }

  return ret;
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3720      	adds	r7, #32
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	200000c8 	.word	0x200000c8
 80072f8:	200000b0 	.word	0x200000b0

080072fc <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007310:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007318:	2b03      	cmp	r3, #3
 800731a:	d10c      	bne.n	8007336 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	7b1b      	ldrb	r3, [r3, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d108      	bne.n	8007336 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2201      	movs	r2, #1
 8007328:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800732a:	88fb      	ldrh	r3, [r7, #6]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	2181      	movs	r1, #129	@ 0x81
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f001 fbf5 	bl	8008b20 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2222      	movs	r2, #34	@ 0x22
 800734c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800734e:	4b03      	ldr	r3, [pc, #12]	@ (800735c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007350:	4618      	mov	r0, r3
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	bc80      	pop	{r7}
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	20000044 	.word	0x20000044

08007360 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2222      	movs	r2, #34	@ 0x22
 800736c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800736e:	4b03      	ldr	r3, [pc, #12]	@ (800737c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20000068 	.word	0x20000068

08007380 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2222      	movs	r2, #34	@ 0x22
 800738c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800738e:	4b03      	ldr	r3, [pc, #12]	@ (800739c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	2000008c 	.word	0x2000008c

080073a0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073b2:	2200      	movs	r2, #0
 80073b4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr
	...

080073c4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	220a      	movs	r2, #10
 80073d0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80073d2:	4b03      	ldr	r3, [pc, #12]	@ (80073e0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	bc80      	pop	{r7}
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	200000bc 	.word	0x200000bc

080073e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80073f8:	2302      	movs	r3, #2
 80073fa:	e01a      	b.n	8007432 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	79fa      	ldrb	r2, [r7, #7]
 8007428:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f001 fa48 	bl	80088c0 <USBD_LL_Init>

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800743a:	b480      	push	{r7}
 800743c:	b085      	sub	sp, #20
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d006      	beq.n	800745c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]
 800745a:	e001      	b.n	8007460 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800745c:	2302      	movs	r3, #2
 800745e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr

0800746c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 fa6b 	bl	8008950 <USBD_LL_Start>

  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	bc80      	pop	{r7}
 8007496:	4770      	bx	lr

08007498 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80074a4:	2302      	movs	r3, #2
 80074a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00c      	beq.n	80074cc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	4611      	mov	r1, r2
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	78fa      	ldrb	r2, [r7, #3]
 80074ec:	4611      	mov	r1, r2
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3

  return USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fed7 	bl	80082c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007522:	461a      	mov	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007530:	f003 031f 	and.w	r3, r3, #31
 8007534:	2b02      	cmp	r3, #2
 8007536:	d016      	beq.n	8007566 <USBD_LL_SetupStage+0x6a>
 8007538:	2b02      	cmp	r3, #2
 800753a:	d81c      	bhi.n	8007576 <USBD_LL_SetupStage+0x7a>
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <USBD_LL_SetupStage+0x4a>
 8007540:	2b01      	cmp	r3, #1
 8007542:	d008      	beq.n	8007556 <USBD_LL_SetupStage+0x5a>
 8007544:	e017      	b.n	8007576 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f9ca 	bl	80078e8 <USBD_StdDevReq>
      break;
 8007554:	e01a      	b.n	800758c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fa2c 	bl	80079bc <USBD_StdItfReq>
      break;
 8007564:	e012      	b.n	800758c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa6c 	bl	8007a4c <USBD_StdEPReq>
      break;
 8007574:	e00a      	b.n	800758c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800757c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007580:	b2db      	uxtb	r3, r3
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 fa43 	bl	8008a10 <USBD_LL_StallEP>
      break;
 800758a:	bf00      	nop
  }

  return USBD_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b086      	sub	sp, #24
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	460b      	mov	r3, r1
 80075a0:	607a      	str	r2, [r7, #4]
 80075a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075a4:	7afb      	ldrb	r3, [r7, #11]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d14b      	bne.n	8007642 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80075b0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d134      	bne.n	8007626 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	68da      	ldr	r2, [r3, #12]
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d919      	bls.n	80075fc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	68da      	ldr	r2, [r3, #12]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	1ad2      	subs	r2, r2, r3
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075de:	429a      	cmp	r2, r3
 80075e0:	d203      	bcs.n	80075ea <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	e002      	b.n	80075f0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	461a      	mov	r2, r3
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 ff35 	bl	8008464 <USBD_CtlContinueRx>
 80075fa:	e038      	b.n	800766e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800760e:	2b03      	cmp	r3, #3
 8007610:	d105      	bne.n	800761e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 ff32 	bl	8008488 <USBD_CtlSendStatus>
 8007624:	e023      	b.n	800766e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800762c:	2b05      	cmp	r3, #5
 800762e:	d11e      	bne.n	800766e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007638:	2100      	movs	r1, #0
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f001 f9e8 	bl	8008a10 <USBD_LL_StallEP>
 8007640:	e015      	b.n	800766e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00d      	beq.n	800766a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007654:	2b03      	cmp	r3, #3
 8007656:	d108      	bne.n	800766a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	7afa      	ldrb	r2, [r7, #11]
 8007662:	4611      	mov	r1, r2
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	4798      	blx	r3
 8007668:	e001      	b.n	800766e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800766a:	2302      	movs	r3, #2
 800766c:	e000      	b.n	8007670 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	460b      	mov	r3, r1
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d17f      	bne.n	800778c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3314      	adds	r3, #20
 8007690:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007698:	2b02      	cmp	r3, #2
 800769a:	d15c      	bne.n	8007756 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d915      	bls.n	80076d4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	1ad2      	subs	r2, r2, r3
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 febd 	bl	8008440 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076c6:	2300      	movs	r3, #0
 80076c8:	2200      	movs	r2, #0
 80076ca:	2100      	movs	r1, #0
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f001 fa4a 	bl	8008b66 <USBD_LL_PrepareReceive>
 80076d2:	e04e      	b.n	8007772 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	6912      	ldr	r2, [r2, #16]
 80076dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80076e0:	fb01 f202 	mul.w	r2, r1, r2
 80076e4:	1a9b      	subs	r3, r3, r2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d11c      	bne.n	8007724 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d316      	bcc.n	8007724 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007700:	429a      	cmp	r2, r3
 8007702:	d20f      	bcs.n	8007724 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007704:	2200      	movs	r2, #0
 8007706:	2100      	movs	r1, #0
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 fe99 	bl	8008440 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007716:	2300      	movs	r3, #0
 8007718:	2200      	movs	r2, #0
 800771a:	2100      	movs	r1, #0
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f001 fa22 	bl	8008b66 <USBD_LL_PrepareReceive>
 8007722:	e026      	b.n	8007772 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00a      	beq.n	8007746 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007736:	2b03      	cmp	r3, #3
 8007738:	d105      	bne.n	8007746 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007746:	2180      	movs	r1, #128	@ 0x80
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f001 f961 	bl	8008a10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 fead 	bl	80084ae <USBD_CtlReceiveStatus>
 8007754:	e00d      	b.n	8007772 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800775c:	2b04      	cmp	r3, #4
 800775e:	d004      	beq.n	800776a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007766:	2b00      	cmp	r3, #0
 8007768:	d103      	bne.n	8007772 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800776a:	2180      	movs	r1, #128	@ 0x80
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f001 f94f 	bl	8008a10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007778:	2b01      	cmp	r3, #1
 800777a:	d11d      	bne.n	80077b8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f7ff fe81 	bl	8007484 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800778a:	e015      	b.n	80077b8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00d      	beq.n	80077b4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d108      	bne.n	80077b4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	7afa      	ldrb	r2, [r7, #11]
 80077ac:	4611      	mov	r1, r2
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	4798      	blx	r3
 80077b2:	e001      	b.n	80077b8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077b4:	2302      	movs	r3, #2
 80077b6:	e000      	b.n	80077ba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077ca:	2340      	movs	r3, #64	@ 0x40
 80077cc:	2200      	movs	r2, #0
 80077ce:	2100      	movs	r1, #0
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f8d8 	bl	8008986 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2240      	movs	r2, #64	@ 0x40
 80077e2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077e6:	2340      	movs	r3, #64	@ 0x40
 80077e8:	2200      	movs	r2, #0
 80077ea:	2180      	movs	r1, #128	@ 0x80
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 f8ca 	bl	8008986 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2240      	movs	r2, #64	@ 0x40
 80077fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6852      	ldr	r2, [r2, #4]
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	4611      	mov	r1, r2
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
  }

  return USBD_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	bc80      	pop	{r7}
 8007860:	4770      	bx	lr

08007862 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2204      	movs	r2, #4
 800787a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr

0800788a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007898:	2b04      	cmp	r3, #4
 800789a:	d105      	bne.n	80078a8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bc80      	pop	{r7}
 80078b2:	4770      	bx	lr

080078b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d10b      	bne.n	80078de <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d005      	beq.n	80078de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078fe:	2b40      	cmp	r3, #64	@ 0x40
 8007900:	d005      	beq.n	800790e <USBD_StdDevReq+0x26>
 8007902:	2b40      	cmp	r3, #64	@ 0x40
 8007904:	d84f      	bhi.n	80079a6 <USBD_StdDevReq+0xbe>
 8007906:	2b00      	cmp	r3, #0
 8007908:	d009      	beq.n	800791e <USBD_StdDevReq+0x36>
 800790a:	2b20      	cmp	r3, #32
 800790c:	d14b      	bne.n	80079a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	4798      	blx	r3
      break;
 800791c:	e048      	b.n	80079b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2b09      	cmp	r3, #9
 8007924:	d839      	bhi.n	800799a <USBD_StdDevReq+0xb2>
 8007926:	a201      	add	r2, pc, #4	@ (adr r2, 800792c <USBD_StdDevReq+0x44>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	0800797d 	.word	0x0800797d
 8007930:	08007991 	.word	0x08007991
 8007934:	0800799b 	.word	0x0800799b
 8007938:	08007987 	.word	0x08007987
 800793c:	0800799b 	.word	0x0800799b
 8007940:	0800795f 	.word	0x0800795f
 8007944:	08007955 	.word	0x08007955
 8007948:	0800799b 	.word	0x0800799b
 800794c:	08007973 	.word	0x08007973
 8007950:	08007969 	.word	0x08007969
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f9dc 	bl	8007d14 <USBD_GetDescriptor>
          break;
 800795c:	e022      	b.n	80079a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fb3f 	bl	8007fe4 <USBD_SetAddress>
          break;
 8007966:	e01d      	b.n	80079a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fb7e 	bl	800806c <USBD_SetConfig>
          break;
 8007970:	e018      	b.n	80079a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fc07 	bl	8008188 <USBD_GetConfig>
          break;
 800797a:	e013      	b.n	80079a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fc37 	bl	80081f2 <USBD_GetStatus>
          break;
 8007984:	e00e      	b.n	80079a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fc65 	bl	8008258 <USBD_SetFeature>
          break;
 800798e:	e009      	b.n	80079a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fc74 	bl	8008280 <USBD_ClrFeature>
          break;
 8007998:	e004      	b.n	80079a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fcc9 	bl	8008334 <USBD_CtlError>
          break;
 80079a2:	bf00      	nop
      }
      break;
 80079a4:	e004      	b.n	80079b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fcc3 	bl	8008334 <USBD_CtlError>
      break;
 80079ae:	bf00      	nop
  }

  return ret;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop

080079bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079d2:	2b40      	cmp	r3, #64	@ 0x40
 80079d4:	d005      	beq.n	80079e2 <USBD_StdItfReq+0x26>
 80079d6:	2b40      	cmp	r3, #64	@ 0x40
 80079d8:	d82e      	bhi.n	8007a38 <USBD_StdItfReq+0x7c>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <USBD_StdItfReq+0x26>
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d12a      	bne.n	8007a38 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079e8:	3b01      	subs	r3, #1
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d81d      	bhi.n	8007a2a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	889b      	ldrh	r3, [r3, #4]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d813      	bhi.n	8007a20 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	88db      	ldrh	r3, [r3, #6]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d110      	bne.n	8007a34 <USBD_StdItfReq+0x78>
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10d      	bne.n	8007a34 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fd35 	bl	8008488 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a1e:	e009      	b.n	8007a34 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fc86 	bl	8008334 <USBD_CtlError>
          break;
 8007a28:	e004      	b.n	8007a34 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fc81 	bl	8008334 <USBD_CtlError>
          break;
 8007a32:	e000      	b.n	8007a36 <USBD_StdItfReq+0x7a>
          break;
 8007a34:	bf00      	nop
      }
      break;
 8007a36:	e004      	b.n	8007a42 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fc7a 	bl	8008334 <USBD_CtlError>
      break;
 8007a40:	bf00      	nop
  }

  return USBD_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	889b      	ldrh	r3, [r3, #4]
 8007a5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a68:	2b40      	cmp	r3, #64	@ 0x40
 8007a6a:	d007      	beq.n	8007a7c <USBD_StdEPReq+0x30>
 8007a6c:	2b40      	cmp	r3, #64	@ 0x40
 8007a6e:	f200 8146 	bhi.w	8007cfe <USBD_StdEPReq+0x2b2>
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <USBD_StdEPReq+0x40>
 8007a76:	2b20      	cmp	r3, #32
 8007a78:	f040 8141 	bne.w	8007cfe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	4798      	blx	r3
      break;
 8007a8a:	e13d      	b.n	8007d08 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	d10a      	bne.n	8007aae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	e12d      	b.n	8007d0a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d007      	beq.n	8007ac6 <USBD_StdEPReq+0x7a>
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	f300 811b 	bgt.w	8007cf2 <USBD_StdEPReq+0x2a6>
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d072      	beq.n	8007ba6 <USBD_StdEPReq+0x15a>
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d03a      	beq.n	8007b3a <USBD_StdEPReq+0xee>
 8007ac4:	e115      	b.n	8007cf2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d002      	beq.n	8007ad6 <USBD_StdEPReq+0x8a>
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d015      	beq.n	8007b00 <USBD_StdEPReq+0xb4>
 8007ad4:	e02b      	b.n	8007b2e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00c      	beq.n	8007af6 <USBD_StdEPReq+0xaa>
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	2b80      	cmp	r3, #128	@ 0x80
 8007ae0:	d009      	beq.n	8007af6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 ff92 	bl	8008a10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007aec:	2180      	movs	r1, #128	@ 0x80
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 ff8e 	bl	8008a10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007af4:	e020      	b.n	8007b38 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fc1b 	bl	8008334 <USBD_CtlError>
              break;
 8007afe:	e01b      	b.n	8007b38 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	885b      	ldrh	r3, [r3, #2]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10e      	bne.n	8007b26 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <USBD_StdEPReq+0xda>
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b80      	cmp	r3, #128	@ 0x80
 8007b12:	d008      	beq.n	8007b26 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	88db      	ldrh	r3, [r3, #6]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d104      	bne.n	8007b26 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 ff75 	bl	8008a10 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fcae 	bl	8008488 <USBD_CtlSendStatus>

              break;
 8007b2c:	e004      	b.n	8007b38 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fbff 	bl	8008334 <USBD_CtlError>
              break;
 8007b36:	bf00      	nop
          }
          break;
 8007b38:	e0e0      	b.n	8007cfc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d002      	beq.n	8007b4a <USBD_StdEPReq+0xfe>
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d015      	beq.n	8007b74 <USBD_StdEPReq+0x128>
 8007b48:	e026      	b.n	8007b98 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00c      	beq.n	8007b6a <USBD_StdEPReq+0x11e>
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	2b80      	cmp	r3, #128	@ 0x80
 8007b54:	d009      	beq.n	8007b6a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 ff58 	bl	8008a10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b60:	2180      	movs	r1, #128	@ 0x80
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 ff54 	bl	8008a10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b68:	e01c      	b.n	8007ba4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fbe1 	bl	8008334 <USBD_CtlError>
              break;
 8007b72:	e017      	b.n	8007ba4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	885b      	ldrh	r3, [r3, #2]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d112      	bne.n	8007ba2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d004      	beq.n	8007b90 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 ff5f 	bl	8008a4e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fc79 	bl	8008488 <USBD_CtlSendStatus>
              }
              break;
 8007b96:	e004      	b.n	8007ba2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fbca 	bl	8008334 <USBD_CtlError>
              break;
 8007ba0:	e000      	b.n	8007ba4 <USBD_StdEPReq+0x158>
              break;
 8007ba2:	bf00      	nop
          }
          break;
 8007ba4:	e0aa      	b.n	8007cfc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d002      	beq.n	8007bb6 <USBD_StdEPReq+0x16a>
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d032      	beq.n	8007c1a <USBD_StdEPReq+0x1ce>
 8007bb4:	e097      	b.n	8007ce6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d007      	beq.n	8007bcc <USBD_StdEPReq+0x180>
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	2b80      	cmp	r3, #128	@ 0x80
 8007bc0:	d004      	beq.n	8007bcc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fbb5 	bl	8008334 <USBD_CtlError>
                break;
 8007bca:	e091      	b.n	8007cf0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da0b      	bge.n	8007bec <USBD_StdEPReq+0x1a0>
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bda:	4613      	mov	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	3310      	adds	r3, #16
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	4413      	add	r3, r2
 8007be8:	3304      	adds	r3, #4
 8007bea:	e00b      	b.n	8007c04 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	4413      	add	r3, r2
 8007c02:	3304      	adds	r3, #4
 8007c04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fbf8 	bl	8008408 <USBD_CtlSendData>
              break;
 8007c18:	e06a      	b.n	8007cf0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	da11      	bge.n	8007c46 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	f003 020f 	and.w	r2, r3, #15
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	440b      	add	r3, r1
 8007c34:	3318      	adds	r3, #24
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d117      	bne.n	8007c6c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fb78 	bl	8008334 <USBD_CtlError>
                  break;
 8007c44:	e054      	b.n	8007cf0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	f003 020f 	and.w	r2, r3, #15
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d104      	bne.n	8007c6c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fb65 	bl	8008334 <USBD_CtlError>
                  break;
 8007c6a:	e041      	b.n	8007cf0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	da0b      	bge.n	8007c8c <USBD_StdEPReq+0x240>
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4413      	add	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	3310      	adds	r3, #16
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	4413      	add	r3, r2
 8007c88:	3304      	adds	r3, #4
 8007c8a:	e00b      	b.n	8007ca4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c92:	4613      	mov	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <USBD_StdEPReq+0x266>
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
 8007cae:	2b80      	cmp	r3, #128	@ 0x80
 8007cb0:	d103      	bne.n	8007cba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	e00e      	b.n	8007cd8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fee4 	bl	8008a8c <USBD_LL_IsStallEP>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	e002      	b.n	8007cd8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fb92 	bl	8008408 <USBD_CtlSendData>
              break;
 8007ce4:	e004      	b.n	8007cf0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fb23 	bl	8008334 <USBD_CtlError>
              break;
 8007cee:	bf00      	nop
          }
          break;
 8007cf0:	e004      	b.n	8007cfc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fb1d 	bl	8008334 <USBD_CtlError>
          break;
 8007cfa:	bf00      	nop
      }
      break;
 8007cfc:	e004      	b.n	8007d08 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fb17 	bl	8008334 <USBD_CtlError>
      break;
 8007d06:	bf00      	nop
  }

  return ret;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d22:	2300      	movs	r3, #0
 8007d24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	885b      	ldrh	r3, [r3, #2]
 8007d2e:	0a1b      	lsrs	r3, r3, #8
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	2b06      	cmp	r3, #6
 8007d36:	f200 8128 	bhi.w	8007f8a <USBD_GetDescriptor+0x276>
 8007d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d40 <USBD_GetDescriptor+0x2c>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d5d 	.word	0x08007d5d
 8007d44:	08007d75 	.word	0x08007d75
 8007d48:	08007db5 	.word	0x08007db5
 8007d4c:	08007f8b 	.word	0x08007f8b
 8007d50:	08007f8b 	.word	0x08007f8b
 8007d54:	08007f2b 	.word	0x08007f2b
 8007d58:	08007f57 	.word	0x08007f57
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7c12      	ldrb	r2, [r2, #16]
 8007d68:	f107 0108 	add.w	r1, r7, #8
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
 8007d70:	60f8      	str	r0, [r7, #12]
      break;
 8007d72:	e112      	b.n	8007f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	7c1b      	ldrb	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10d      	bne.n	8007d98 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d84:	f107 0208 	add.w	r2, r7, #8
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4798      	blx	r3
 8007d8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3301      	adds	r3, #1
 8007d92:	2202      	movs	r2, #2
 8007d94:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d96:	e100      	b.n	8007f9a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da0:	f107 0208 	add.w	r2, r7, #8
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3
 8007da8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3301      	adds	r3, #1
 8007dae:	2202      	movs	r2, #2
 8007db0:	701a      	strb	r2, [r3, #0]
      break;
 8007db2:	e0f2      	b.n	8007f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	885b      	ldrh	r3, [r3, #2]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b05      	cmp	r3, #5
 8007dbc:	f200 80ac 	bhi.w	8007f18 <USBD_GetDescriptor+0x204>
 8007dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc8 <USBD_GetDescriptor+0xb4>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007de1 	.word	0x08007de1
 8007dcc:	08007e15 	.word	0x08007e15
 8007dd0:	08007e49 	.word	0x08007e49
 8007dd4:	08007e7d 	.word	0x08007e7d
 8007dd8:	08007eb1 	.word	0x08007eb1
 8007ddc:	08007ee5 	.word	0x08007ee5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00b      	beq.n	8007e04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	7c12      	ldrb	r2, [r2, #16]
 8007df8:	f107 0108 	add.w	r1, r7, #8
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	4798      	blx	r3
 8007e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e02:	e091      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa94 	bl	8008334 <USBD_CtlError>
            err++;
 8007e0c:	7afb      	ldrb	r3, [r7, #11]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	72fb      	strb	r3, [r7, #11]
          break;
 8007e12:	e089      	b.n	8007f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00b      	beq.n	8007e38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	7c12      	ldrb	r2, [r2, #16]
 8007e2c:	f107 0108 	add.w	r1, r7, #8
 8007e30:	4610      	mov	r0, r2
 8007e32:	4798      	blx	r3
 8007e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e36:	e077      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fa7a 	bl	8008334 <USBD_CtlError>
            err++;
 8007e40:	7afb      	ldrb	r3, [r7, #11]
 8007e42:	3301      	adds	r3, #1
 8007e44:	72fb      	strb	r3, [r7, #11]
          break;
 8007e46:	e06f      	b.n	8007f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	7c12      	ldrb	r2, [r2, #16]
 8007e60:	f107 0108 	add.w	r1, r7, #8
 8007e64:	4610      	mov	r0, r2
 8007e66:	4798      	blx	r3
 8007e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e6a:	e05d      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa60 	bl	8008334 <USBD_CtlError>
            err++;
 8007e74:	7afb      	ldrb	r3, [r7, #11]
 8007e76:	3301      	adds	r3, #1
 8007e78:	72fb      	strb	r3, [r7, #11]
          break;
 8007e7a:	e055      	b.n	8007f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00b      	beq.n	8007ea0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	7c12      	ldrb	r2, [r2, #16]
 8007e94:	f107 0108 	add.w	r1, r7, #8
 8007e98:	4610      	mov	r0, r2
 8007e9a:	4798      	blx	r3
 8007e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e9e:	e043      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa46 	bl	8008334 <USBD_CtlError>
            err++;
 8007ea8:	7afb      	ldrb	r3, [r7, #11]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	72fb      	strb	r3, [r7, #11]
          break;
 8007eae:	e03b      	b.n	8007f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00b      	beq.n	8007ed4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	7c12      	ldrb	r2, [r2, #16]
 8007ec8:	f107 0108 	add.w	r1, r7, #8
 8007ecc:	4610      	mov	r0, r2
 8007ece:	4798      	blx	r3
 8007ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ed2:	e029      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fa2c 	bl	8008334 <USBD_CtlError>
            err++;
 8007edc:	7afb      	ldrb	r3, [r7, #11]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ee2:	e021      	b.n	8007f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00b      	beq.n	8007f08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	7c12      	ldrb	r2, [r2, #16]
 8007efc:	f107 0108 	add.w	r1, r7, #8
 8007f00:	4610      	mov	r0, r2
 8007f02:	4798      	blx	r3
 8007f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f06:	e00f      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa12 	bl	8008334 <USBD_CtlError>
            err++;
 8007f10:	7afb      	ldrb	r3, [r7, #11]
 8007f12:	3301      	adds	r3, #1
 8007f14:	72fb      	strb	r3, [r7, #11]
          break;
 8007f16:	e007      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fa0a 	bl	8008334 <USBD_CtlError>
          err++;
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	3301      	adds	r3, #1
 8007f24:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007f26:	e038      	b.n	8007f9a <USBD_GetDescriptor+0x286>
 8007f28:	e037      	b.n	8007f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	7c1b      	ldrb	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f3a:	f107 0208 	add.w	r2, r7, #8
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4798      	blx	r3
 8007f42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f44:	e029      	b.n	8007f9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f9f3 	bl	8008334 <USBD_CtlError>
        err++;
 8007f4e:	7afb      	ldrb	r3, [r7, #11]
 8007f50:	3301      	adds	r3, #1
 8007f52:	72fb      	strb	r3, [r7, #11]
      break;
 8007f54:	e021      	b.n	8007f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	7c1b      	ldrb	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10d      	bne.n	8007f7a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f66:	f107 0208 	add.w	r2, r7, #8
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	4798      	blx	r3
 8007f6e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3301      	adds	r3, #1
 8007f74:	2207      	movs	r2, #7
 8007f76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f78:	e00f      	b.n	8007f9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f9d9 	bl	8008334 <USBD_CtlError>
        err++;
 8007f82:	7afb      	ldrb	r3, [r7, #11]
 8007f84:	3301      	adds	r3, #1
 8007f86:	72fb      	strb	r3, [r7, #11]
      break;
 8007f88:	e007      	b.n	8007f9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f9d1 	bl	8008334 <USBD_CtlError>
      err++;
 8007f92:	7afb      	ldrb	r3, [r7, #11]
 8007f94:	3301      	adds	r3, #1
 8007f96:	72fb      	strb	r3, [r7, #11]
      break;
 8007f98:	bf00      	nop
  }

  if (err != 0U)
 8007f9a:	7afb      	ldrb	r3, [r7, #11]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d11c      	bne.n	8007fda <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007fa0:	893b      	ldrh	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d011      	beq.n	8007fca <USBD_GetDescriptor+0x2b6>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	88db      	ldrh	r3, [r3, #6]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00d      	beq.n	8007fca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	88da      	ldrh	r2, [r3, #6]
 8007fb2:	893b      	ldrh	r3, [r7, #8]
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	bf28      	it	cs
 8007fb8:	4613      	movcs	r3, r2
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fbe:	893b      	ldrh	r3, [r7, #8]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	68f9      	ldr	r1, [r7, #12]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fa1f 	bl	8008408 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	88db      	ldrh	r3, [r3, #6]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d104      	bne.n	8007fdc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fa58 	bl	8008488 <USBD_CtlSendStatus>
 8007fd8:	e000      	b.n	8007fdc <USBD_GetDescriptor+0x2c8>
    return;
 8007fda:	bf00      	nop
    }
  }
}
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop

08007fe4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	889b      	ldrh	r3, [r3, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d130      	bne.n	8008058 <USBD_SetAddress+0x74>
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	88db      	ldrh	r3, [r3, #6]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d12c      	bne.n	8008058 <USBD_SetAddress+0x74>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	885b      	ldrh	r3, [r3, #2]
 8008002:	2b7f      	cmp	r3, #127	@ 0x7f
 8008004:	d828      	bhi.n	8008058 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	885b      	ldrh	r3, [r3, #2]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008010:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008018:	2b03      	cmp	r3, #3
 800801a:	d104      	bne.n	8008026 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f988 	bl	8008334 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008024:	e01d      	b.n	8008062 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	7bfa      	ldrb	r2, [r7, #15]
 800802a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fd55 	bl	8008ae2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fa25 	bl	8008488 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d004      	beq.n	800804e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800804c:	e009      	b.n	8008062 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008056:	e004      	b.n	8008062 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f96a 	bl	8008334 <USBD_CtlError>
  }
}
 8008060:	bf00      	nop
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	885b      	ldrh	r3, [r3, #2]
 800807a:	b2da      	uxtb	r2, r3
 800807c:	4b41      	ldr	r3, [pc, #260]	@ (8008184 <USBD_SetConfig+0x118>)
 800807e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008080:	4b40      	ldr	r3, [pc, #256]	@ (8008184 <USBD_SetConfig+0x118>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d904      	bls.n	8008092 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f952 	bl	8008334 <USBD_CtlError>
 8008090:	e075      	b.n	800817e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008098:	2b02      	cmp	r3, #2
 800809a:	d002      	beq.n	80080a2 <USBD_SetConfig+0x36>
 800809c:	2b03      	cmp	r3, #3
 800809e:	d023      	beq.n	80080e8 <USBD_SetConfig+0x7c>
 80080a0:	e062      	b.n	8008168 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80080a2:	4b38      	ldr	r3, [pc, #224]	@ (8008184 <USBD_SetConfig+0x118>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d01a      	beq.n	80080e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80080aa:	4b36      	ldr	r3, [pc, #216]	@ (8008184 <USBD_SetConfig+0x118>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2203      	movs	r2, #3
 80080b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080bc:	4b31      	ldr	r3, [pc, #196]	@ (8008184 <USBD_SetConfig+0x118>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff f9e8 	bl	8007498 <USBD_SetClassConfig>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d104      	bne.n	80080d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f92f 	bl	8008334 <USBD_CtlError>
            return;
 80080d6:	e052      	b.n	800817e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f9d5 	bl	8008488 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080de:	e04e      	b.n	800817e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f9d1 	bl	8008488 <USBD_CtlSendStatus>
        break;
 80080e6:	e04a      	b.n	800817e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80080e8:	4b26      	ldr	r3, [pc, #152]	@ (8008184 <USBD_SetConfig+0x118>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d112      	bne.n	8008116 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80080f8:	4b22      	ldr	r3, [pc, #136]	@ (8008184 <USBD_SetConfig+0x118>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008102:	4b20      	ldr	r3, [pc, #128]	@ (8008184 <USBD_SetConfig+0x118>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff f9e4 	bl	80074d6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f9ba 	bl	8008488 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008114:	e033      	b.n	800817e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008116:	4b1b      	ldr	r3, [pc, #108]	@ (8008184 <USBD_SetConfig+0x118>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	429a      	cmp	r2, r3
 8008122:	d01d      	beq.n	8008160 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff f9d2 	bl	80074d6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008132:	4b14      	ldr	r3, [pc, #80]	@ (8008184 <USBD_SetConfig+0x118>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800813c:	4b11      	ldr	r3, [pc, #68]	@ (8008184 <USBD_SetConfig+0x118>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff f9a8 	bl	8007498 <USBD_SetClassConfig>
 8008148:	4603      	mov	r3, r0
 800814a:	2b02      	cmp	r3, #2
 800814c:	d104      	bne.n	8008158 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f8ef 	bl	8008334 <USBD_CtlError>
            return;
 8008156:	e012      	b.n	800817e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f995 	bl	8008488 <USBD_CtlSendStatus>
        break;
 800815e:	e00e      	b.n	800817e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f991 	bl	8008488 <USBD_CtlSendStatus>
        break;
 8008166:	e00a      	b.n	800817e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f8e2 	bl	8008334 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008170:	4b04      	ldr	r3, [pc, #16]	@ (8008184 <USBD_SetConfig+0x118>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7ff f9ad 	bl	80074d6 <USBD_ClrClassConfig>
        break;
 800817c:	bf00      	nop
    }
  }
}
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20000208 	.word	0x20000208

08008188 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	88db      	ldrh	r3, [r3, #6]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d004      	beq.n	80081a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f8c9 	bl	8008334 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081a2:	e022      	b.n	80081ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	dc02      	bgt.n	80081b4 <USBD_GetConfig+0x2c>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	dc03      	bgt.n	80081ba <USBD_GetConfig+0x32>
 80081b2:	e015      	b.n	80081e0 <USBD_GetConfig+0x58>
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d00b      	beq.n	80081d0 <USBD_GetConfig+0x48>
 80081b8:	e012      	b.n	80081e0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3308      	adds	r3, #8
 80081c4:	2201      	movs	r2, #1
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f91d 	bl	8008408 <USBD_CtlSendData>
        break;
 80081ce:	e00c      	b.n	80081ea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3304      	adds	r3, #4
 80081d4:	2201      	movs	r2, #1
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f915 	bl	8008408 <USBD_CtlSendData>
        break;
 80081de:	e004      	b.n	80081ea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f8a6 	bl	8008334 <USBD_CtlError>
        break;
 80081e8:	bf00      	nop
}
 80081ea:	bf00      	nop
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008202:	3b01      	subs	r3, #1
 8008204:	2b02      	cmp	r3, #2
 8008206:	d81e      	bhi.n	8008246 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	88db      	ldrh	r3, [r3, #6]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d004      	beq.n	800821a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f88e 	bl	8008334 <USBD_CtlError>
        break;
 8008218:	e01a      	b.n	8008250 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008226:	2b00      	cmp	r3, #0
 8008228:	d005      	beq.n	8008236 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f043 0202 	orr.w	r2, r3, #2
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	330c      	adds	r3, #12
 800823a:	2202      	movs	r2, #2
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f8e2 	bl	8008408 <USBD_CtlSendData>
      break;
 8008244:	e004      	b.n	8008250 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f873 	bl	8008334 <USBD_CtlError>
      break;
 800824e:	bf00      	nop
  }
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	885b      	ldrh	r3, [r3, #2]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d106      	bne.n	8008278 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f908 	bl	8008488 <USBD_CtlSendStatus>
  }
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008290:	3b01      	subs	r3, #1
 8008292:	2b02      	cmp	r3, #2
 8008294:	d80b      	bhi.n	80082ae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d10c      	bne.n	80082b8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f8ee 	bl	8008488 <USBD_CtlSendStatus>
      }
      break;
 80082ac:	e004      	b.n	80082b8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f83f 	bl	8008334 <USBD_CtlError>
      break;
 80082b6:	e000      	b.n	80082ba <USBD_ClrFeature+0x3a>
      break;
 80082b8:	bf00      	nop
  }
}
 80082ba:	bf00      	nop
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b083      	sub	sp, #12
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	781a      	ldrb	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	785a      	ldrb	r2, [r3, #1]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	3302      	adds	r3, #2
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	3303      	adds	r3, #3
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	021b      	lsls	r3, r3, #8
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	4413      	add	r3, r2
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	3304      	adds	r3, #4
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	461a      	mov	r2, r3
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	3305      	adds	r3, #5
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	021b      	lsls	r3, r3, #8
 8008306:	b29b      	uxth	r3, r3
 8008308:	4413      	add	r3, r2
 800830a:	b29a      	uxth	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	3306      	adds	r3, #6
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	3307      	adds	r3, #7
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	021b      	lsls	r3, r3, #8
 8008320:	b29b      	uxth	r3, r3
 8008322:	4413      	add	r3, r2
 8008324:	b29a      	uxth	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	80da      	strh	r2, [r3, #6]

}
 800832a:	bf00      	nop
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr

08008334 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800833e:	2180      	movs	r1, #128	@ 0x80
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fb65 	bl	8008a10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008346:	2100      	movs	r1, #0
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fb61 	bl	8008a10 <USBD_LL_StallEP>
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b086      	sub	sp, #24
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d032      	beq.n	80083d2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 f834 	bl	80083da <USBD_GetLen>
 8008372:	4603      	mov	r3, r0
 8008374:	3301      	adds	r3, #1
 8008376:	b29b      	uxth	r3, r3
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	b29a      	uxth	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	75fa      	strb	r2, [r7, #23]
 8008386:	461a      	mov	r2, r3
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	4413      	add	r3, r2
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7812      	ldrb	r2, [r2, #0]
 8008390:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	75fa      	strb	r2, [r7, #23]
 8008398:	461a      	mov	r2, r3
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	4413      	add	r3, r2
 800839e:	2203      	movs	r2, #3
 80083a0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80083a2:	e012      	b.n	80083ca <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	60fa      	str	r2, [r7, #12]
 80083aa:	7dfa      	ldrb	r2, [r7, #23]
 80083ac:	1c51      	adds	r1, r2, #1
 80083ae:	75f9      	strb	r1, [r7, #23]
 80083b0:	4611      	mov	r1, r2
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	440a      	add	r2, r1
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	75fa      	strb	r2, [r7, #23]
 80083c0:	461a      	mov	r2, r3
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	4413      	add	r3, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e8      	bne.n	80083a4 <USBD_GetString+0x4e>
    }
  }
}
 80083d2:	bf00      	nop
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083da:	b480      	push	{r7}
 80083dc:	b085      	sub	sp, #20
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80083e6:	e005      	b.n	80083f4 <USBD_GetLen+0x1a>
  {
    len++;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	3301      	adds	r3, #1
 80083ec:	73fb      	strb	r3, [r7, #15]
    buf++;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3301      	adds	r3, #1
 80083f2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1f5      	bne.n	80083e8 <USBD_GetLen+0xe>
  }

  return len;
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	bc80      	pop	{r7}
 8008406:	4770      	bx	lr

08008408 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	4613      	mov	r3, r2
 8008414:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2202      	movs	r2, #2
 800841a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800841e:	88fa      	ldrh	r2, [r7, #6]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008424:	88fa      	ldrh	r2, [r7, #6]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800842a:	88fb      	ldrh	r3, [r7, #6]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	2100      	movs	r1, #0
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 fb75 	bl	8008b20 <USBD_LL_Transmit>

  return USBD_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	4613      	mov	r3, r2
 800844c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800844e:	88fb      	ldrh	r3, [r7, #6]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	2100      	movs	r1, #0
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 fb63 	bl	8008b20 <USBD_LL_Transmit>

  return USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	4613      	mov	r3, r2
 8008470:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008472:	88fb      	ldrh	r3, [r7, #6]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	2100      	movs	r1, #0
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 fb74 	bl	8008b66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2204      	movs	r2, #4
 8008494:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008498:	2300      	movs	r3, #0
 800849a:	2200      	movs	r2, #0
 800849c:	2100      	movs	r1, #0
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fb3e 	bl	8008b20 <USBD_LL_Transmit>

  return USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2205      	movs	r2, #5
 80084ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084be:	2300      	movs	r3, #0
 80084c0:	2200      	movs	r2, #0
 80084c2:	2100      	movs	r1, #0
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fb4e 	bl	8008b66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084d8:	2200      	movs	r2, #0
 80084da:	490e      	ldr	r1, [pc, #56]	@ (8008514 <MX_USB_DEVICE_Init+0x40>)
 80084dc:	480e      	ldr	r0, [pc, #56]	@ (8008518 <MX_USB_DEVICE_Init+0x44>)
 80084de:	f7fe ff81 	bl	80073e4 <USBD_Init>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084e8:	f7f8 fe03 	bl	80010f2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80084ec:	490b      	ldr	r1, [pc, #44]	@ (800851c <MX_USB_DEVICE_Init+0x48>)
 80084ee:	480a      	ldr	r0, [pc, #40]	@ (8008518 <MX_USB_DEVICE_Init+0x44>)
 80084f0:	f7fe ffa3 	bl	800743a <USBD_RegisterClass>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084fa:	f7f8 fdfa 	bl	80010f2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084fe:	4806      	ldr	r0, [pc, #24]	@ (8008518 <MX_USB_DEVICE_Init+0x44>)
 8008500:	f7fe ffb4 	bl	800746c <USBD_Start>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800850a:	f7f8 fdf2 	bl	80010f2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800850e:	bf00      	nop
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000114 	.word	0x20000114
 8008518:	2000020c 	.word	0x2000020c
 800851c:	2000000c 	.word	0x2000000c

08008520 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	6039      	str	r1, [r7, #0]
 800852a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2212      	movs	r2, #18
 8008530:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008532:	4b03      	ldr	r3, [pc, #12]	@ (8008540 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	20000130 	.word	0x20000130

08008544 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	6039      	str	r1, [r7, #0]
 800854e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2204      	movs	r2, #4
 8008554:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008556:	4b03      	ldr	r3, [pc, #12]	@ (8008564 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20000144 	.word	0x20000144

08008568 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008574:	79fb      	ldrb	r3, [r7, #7]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d105      	bne.n	8008586 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	4907      	ldr	r1, [pc, #28]	@ (800859c <USBD_FS_ProductStrDescriptor+0x34>)
 800857e:	4808      	ldr	r0, [pc, #32]	@ (80085a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008580:	f7ff fee9 	bl	8008356 <USBD_GetString>
 8008584:	e004      	b.n	8008590 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	4904      	ldr	r1, [pc, #16]	@ (800859c <USBD_FS_ProductStrDescriptor+0x34>)
 800858a:	4805      	ldr	r0, [pc, #20]	@ (80085a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800858c:	f7ff fee3 	bl	8008356 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008590:	4b02      	ldr	r3, [pc, #8]	@ (800859c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	200004d0 	.word	0x200004d0
 80085a0:	08008cb4 	.word	0x08008cb4

080085a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4603      	mov	r3, r0
 80085ac:	6039      	str	r1, [r7, #0]
 80085ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	4904      	ldr	r1, [pc, #16]	@ (80085c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085b4:	4804      	ldr	r0, [pc, #16]	@ (80085c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085b6:	f7ff fece 	bl	8008356 <USBD_GetString>
  return USBD_StrDesc;
 80085ba:	4b02      	ldr	r3, [pc, #8]	@ (80085c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	200004d0 	.word	0x200004d0
 80085c8:	08008ccc 	.word	0x08008ccc

080085cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	6039      	str	r1, [r7, #0]
 80085d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	221a      	movs	r2, #26
 80085dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085de:	f000 f843 	bl	8008668 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085e2:	4b02      	ldr	r3, [pc, #8]	@ (80085ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20000148 	.word	0x20000148

080085f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	6039      	str	r1, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	4907      	ldr	r1, [pc, #28]	@ (8008624 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008606:	4808      	ldr	r0, [pc, #32]	@ (8008628 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008608:	f7ff fea5 	bl	8008356 <USBD_GetString>
 800860c:	e004      	b.n	8008618 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	4904      	ldr	r1, [pc, #16]	@ (8008624 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008612:	4805      	ldr	r0, [pc, #20]	@ (8008628 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008614:	f7ff fe9f 	bl	8008356 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008618:	4b02      	ldr	r3, [pc, #8]	@ (8008624 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	200004d0 	.word	0x200004d0
 8008628:	08008ce0 	.word	0x08008ce0

0800862c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008638:	79fb      	ldrb	r3, [r7, #7]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d105      	bne.n	800864a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	4907      	ldr	r1, [pc, #28]	@ (8008660 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008642:	4808      	ldr	r0, [pc, #32]	@ (8008664 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008644:	f7ff fe87 	bl	8008356 <USBD_GetString>
 8008648:	e004      	b.n	8008654 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	4904      	ldr	r1, [pc, #16]	@ (8008660 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800864e:	4805      	ldr	r0, [pc, #20]	@ (8008664 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008650:	f7ff fe81 	bl	8008356 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008654:	4b02      	ldr	r3, [pc, #8]	@ (8008660 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200004d0 	.word	0x200004d0
 8008664:	08008cec 	.word	0x08008cec

08008668 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800866e:	4b0f      	ldr	r3, [pc, #60]	@ (80086ac <Get_SerialNum+0x44>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008674:	4b0e      	ldr	r3, [pc, #56]	@ (80086b0 <Get_SerialNum+0x48>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800867a:	4b0e      	ldr	r3, [pc, #56]	@ (80086b4 <Get_SerialNum+0x4c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4413      	add	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800868e:	2208      	movs	r2, #8
 8008690:	4909      	ldr	r1, [pc, #36]	@ (80086b8 <Get_SerialNum+0x50>)
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 f814 	bl	80086c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008698:	2204      	movs	r2, #4
 800869a:	4908      	ldr	r1, [pc, #32]	@ (80086bc <Get_SerialNum+0x54>)
 800869c:	68b8      	ldr	r0, [r7, #8]
 800869e:	f000 f80f 	bl	80086c0 <IntToUnicode>
  }
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	1ffff7e8 	.word	0x1ffff7e8
 80086b0:	1ffff7ec 	.word	0x1ffff7ec
 80086b4:	1ffff7f0 	.word	0x1ffff7f0
 80086b8:	2000014a 	.word	0x2000014a
 80086bc:	2000015a 	.word	0x2000015a

080086c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	4613      	mov	r3, r2
 80086cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086d2:	2300      	movs	r3, #0
 80086d4:	75fb      	strb	r3, [r7, #23]
 80086d6:	e027      	b.n	8008728 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	0f1b      	lsrs	r3, r3, #28
 80086dc:	2b09      	cmp	r3, #9
 80086de:	d80b      	bhi.n	80086f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	0f1b      	lsrs	r3, r3, #28
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	4619      	mov	r1, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	440b      	add	r3, r1
 80086f0:	3230      	adds	r2, #48	@ 0x30
 80086f2:	b2d2      	uxtb	r2, r2
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	e00a      	b.n	800870e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	0f1b      	lsrs	r3, r3, #28
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	4619      	mov	r1, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	440b      	add	r3, r1
 8008708:	3237      	adds	r2, #55	@ 0x37
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	011b      	lsls	r3, r3, #4
 8008712:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	3301      	adds	r3, #1
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4413      	add	r3, r2
 800871e:	2200      	movs	r2, #0
 8008720:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	3301      	adds	r3, #1
 8008726:	75fb      	strb	r3, [r7, #23]
 8008728:	7dfa      	ldrb	r2, [r7, #23]
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	429a      	cmp	r2, r3
 800872e:	d3d3      	bcc.n	80086d8 <IntToUnicode+0x18>
  }
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	bc80      	pop	{r7}
 800873a:	4770      	bx	lr

0800873c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a0d      	ldr	r2, [pc, #52]	@ (8008780 <HAL_PCD_MspInit+0x44>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d113      	bne.n	8008776 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800874e:	4b0d      	ldr	r3, [pc, #52]	@ (8008784 <HAL_PCD_MspInit+0x48>)
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	4a0c      	ldr	r2, [pc, #48]	@ (8008784 <HAL_PCD_MspInit+0x48>)
 8008754:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008758:	61d3      	str	r3, [r2, #28]
 800875a:	4b0a      	ldr	r3, [pc, #40]	@ (8008784 <HAL_PCD_MspInit+0x48>)
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008766:	2200      	movs	r2, #0
 8008768:	2100      	movs	r1, #0
 800876a:	2014      	movs	r0, #20
 800876c:	f7f9 fb4d 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008770:	2014      	movs	r0, #20
 8008772:	f7f9 fb66 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008776:	bf00      	nop
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	40005c00 	.word	0x40005c00
 8008784:	40021000 	.word	0x40021000

08008788 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	f7fe feac 	bl	80074fc <USBD_LL_SetupStage>
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80087be:	78fa      	ldrb	r2, [r7, #3]
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	00db      	lsls	r3, r3, #3
 80087ca:	440b      	add	r3, r1
 80087cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	78fb      	ldrb	r3, [r7, #3]
 80087d4:	4619      	mov	r1, r3
 80087d6:	f7fe fede 	bl	8007596 <USBD_LL_DataOutStage>
}
 80087da:	bf00      	nop
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	460b      	mov	r3, r1
 80087ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80087f4:	78fa      	ldrb	r2, [r7, #3]
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	00db      	lsls	r3, r3, #3
 8008800:	440b      	add	r3, r1
 8008802:	3324      	adds	r3, #36	@ 0x24
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	78fb      	ldrb	r3, [r7, #3]
 8008808:	4619      	mov	r1, r3
 800880a:	f7fe ff35 	bl	8007678 <USBD_LL_DataInStage>
}
 800880e:	bf00      	nop
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff f845 	bl	80078b4 <USBD_LL_SOF>
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800883a:	2301      	movs	r3, #1
 800883c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	799b      	ldrb	r3, [r3, #6]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d001      	beq.n	800884a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008846:	f7f8 fc54 	bl	80010f2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008850:	7bfa      	ldrb	r2, [r7, #15]
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe fff5 	bl	8007844 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe ffae 	bl	80077c2 <USBD_LL_Reset>
}
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe ffef 	bl	8007862 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	7a9b      	ldrb	r3, [r3, #10]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d005      	beq.n	8008898 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800888c:	4b04      	ldr	r3, [pc, #16]	@ (80088a0 <HAL_PCD_SuspendCallback+0x30>)
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	4a03      	ldr	r2, [pc, #12]	@ (80088a0 <HAL_PCD_SuspendCallback+0x30>)
 8008892:	f043 0306 	orr.w	r3, r3, #6
 8008896:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008898:	bf00      	nop
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	e000ed00 	.word	0xe000ed00

080088a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe ffe9 	bl	800788a <USBD_LL_Resume>
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80088c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008948 <USBD_LL_Init+0x88>)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a1d      	ldr	r2, [pc, #116]	@ (8008948 <USBD_LL_Init+0x88>)
 80088d4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80088d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008948 <USBD_LL_Init+0x88>)
 80088da:	4a1c      	ldr	r2, [pc, #112]	@ (800894c <USBD_LL_Init+0x8c>)
 80088dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80088de:	4b1a      	ldr	r3, [pc, #104]	@ (8008948 <USBD_LL_Init+0x88>)
 80088e0:	2208      	movs	r2, #8
 80088e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80088e4:	4b18      	ldr	r3, [pc, #96]	@ (8008948 <USBD_LL_Init+0x88>)
 80088e6:	2202      	movs	r2, #2
 80088e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80088ea:	4b17      	ldr	r3, [pc, #92]	@ (8008948 <USBD_LL_Init+0x88>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80088f0:	4b15      	ldr	r3, [pc, #84]	@ (8008948 <USBD_LL_Init+0x88>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80088f6:	4b14      	ldr	r3, [pc, #80]	@ (8008948 <USBD_LL_Init+0x88>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80088fc:	4812      	ldr	r0, [pc, #72]	@ (8008948 <USBD_LL_Init+0x88>)
 80088fe:	f7f9 fe44 	bl	800258a <HAL_PCD_Init>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008908:	f7f8 fbf3 	bl	80010f2 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008912:	2318      	movs	r3, #24
 8008914:	2200      	movs	r2, #0
 8008916:	2100      	movs	r1, #0
 8008918:	f7fb fb3e 	bl	8003f98 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008922:	2358      	movs	r3, #88	@ 0x58
 8008924:	2200      	movs	r2, #0
 8008926:	2180      	movs	r1, #128	@ 0x80
 8008928:	f7fb fb36 	bl	8003f98 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008936:	2200      	movs	r2, #0
 8008938:	2181      	movs	r1, #129	@ 0x81
 800893a:	f7fb fb2d 	bl	8003f98 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	200006d0 	.word	0x200006d0
 800894c:	40005c00 	.word	0x40005c00

08008950 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008966:	4618      	mov	r0, r3
 8008968:	f7f9 ff05 	bl	8002776 <HAL_PCD_Start>
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 f93a 	bl	8008bec <USBD_Get_USB_Status>
 8008978:	4603      	mov	r3, r0
 800897a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800897c:	7bbb      	ldrb	r3, [r7, #14]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	4608      	mov	r0, r1
 8008990:	4611      	mov	r1, r2
 8008992:	461a      	mov	r2, r3
 8008994:	4603      	mov	r3, r0
 8008996:	70fb      	strb	r3, [r7, #3]
 8008998:	460b      	mov	r3, r1
 800899a:	70bb      	strb	r3, [r7, #2]
 800899c:	4613      	mov	r3, r2
 800899e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80089ae:	78bb      	ldrb	r3, [r7, #2]
 80089b0:	883a      	ldrh	r2, [r7, #0]
 80089b2:	78f9      	ldrb	r1, [r7, #3]
 80089b4:	f7fa f859 	bl	8002a6a <HAL_PCD_EP_Open>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 f914 	bl	8008bec <USBD_Get_USB_Status>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80089ec:	78fa      	ldrb	r2, [r7, #3]
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fa f897 	bl	8002b24 <HAL_PCD_EP_Close>
 80089f6:	4603      	mov	r3, r0
 80089f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 f8f5 	bl	8008bec <USBD_Get_USB_Status>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fa f928 	bl	8002c84 <HAL_PCD_EP_SetStall>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 f8d6 	bl	8008bec <USBD_Get_USB_Status>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a68:	78fa      	ldrb	r2, [r7, #3]
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fa f969 	bl	8002d44 <HAL_PCD_EP_ClrStall>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 f8b7 	bl	8008bec <USBD_Get_USB_Status>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da0b      	bge.n	8008ac0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008aae:	68f9      	ldr	r1, [r7, #12]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	440b      	add	r3, r1
 8008aba:	3312      	adds	r3, #18
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	e00b      	b.n	8008ad8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ac6:	68f9      	ldr	r1, [r7, #12]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	440b      	add	r3, r1
 8008ad2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008ad6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bc80      	pop	{r7}
 8008ae0:	4770      	bx	lr

08008ae2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008afc:	78fa      	ldrb	r2, [r7, #3]
 8008afe:	4611      	mov	r1, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7f9 ff8e 	bl	8002a22 <HAL_PCD_SetAddress>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 f86d 	bl	8008bec <USBD_Get_USB_Status>
 8008b12:	4603      	mov	r3, r0
 8008b14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	72fb      	strb	r3, [r7, #11]
 8008b30:	4613      	mov	r3, r2
 8008b32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b42:	893b      	ldrh	r3, [r7, #8]
 8008b44:	7af9      	ldrb	r1, [r7, #11]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	f7fa f865 	bl	8002c16 <HAL_PCD_EP_Transmit>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f84a 	bl	8008bec <USBD_Get_USB_Status>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	461a      	mov	r2, r3
 8008b72:	460b      	mov	r3, r1
 8008b74:	72fb      	strb	r3, [r7, #11]
 8008b76:	4613      	mov	r3, r2
 8008b78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b88:	893b      	ldrh	r3, [r7, #8]
 8008b8a:	7af9      	ldrb	r1, [r7, #11]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	f7fa f811 	bl	8002bb4 <HAL_PCD_EP_Receive>
 8008b92:	4603      	mov	r3, r0
 8008b94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 f827 	bl	8008bec <USBD_Get_USB_Status>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ba2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bb4:	4b02      	ldr	r3, [pc, #8]	@ (8008bc0 <USBD_static_malloc+0x14>)
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bc80      	pop	{r7}
 8008bbe:	4770      	bx	lr
 8008bc0:	200009a8 	.word	0x200009a8

08008bc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]

}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bc80      	pop	{r7}
 8008bd4:	4770      	bx	lr

08008bd6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b083      	sub	sp, #12
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	460b      	mov	r3, r1
 8008be0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bc80      	pop	{r7}
 8008bea:	4770      	bx	lr

08008bec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d817      	bhi.n	8008c30 <USBD_Get_USB_Status+0x44>
 8008c00:	a201      	add	r2, pc, #4	@ (adr r2, 8008c08 <USBD_Get_USB_Status+0x1c>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c19 	.word	0x08008c19
 8008c0c:	08008c1f 	.word	0x08008c1f
 8008c10:	08008c25 	.word	0x08008c25
 8008c14:	08008c2b 	.word	0x08008c2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c1c:	e00b      	b.n	8008c36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c1e:	2302      	movs	r3, #2
 8008c20:	73fb      	strb	r3, [r7, #15]
    break;
 8008c22:	e008      	b.n	8008c36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c24:	2301      	movs	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
    break;
 8008c28:	e005      	b.n	8008c36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2e:	e002      	b.n	8008c36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c30:	2302      	movs	r3, #2
 8008c32:	73fb      	strb	r3, [r7, #15]
    break;
 8008c34:	bf00      	nop
  }
  return usb_status;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bc80      	pop	{r7}
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop

08008c44 <memset>:
 8008c44:	4603      	mov	r3, r0
 8008c46:	4402      	add	r2, r0
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d100      	bne.n	8008c4e <memset+0xa>
 8008c4c:	4770      	bx	lr
 8008c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c52:	e7f9      	b.n	8008c48 <memset+0x4>

08008c54 <__libc_init_array>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	2600      	movs	r6, #0
 8008c58:	4d0c      	ldr	r5, [pc, #48]	@ (8008c8c <__libc_init_array+0x38>)
 8008c5a:	4c0d      	ldr	r4, [pc, #52]	@ (8008c90 <__libc_init_array+0x3c>)
 8008c5c:	1b64      	subs	r4, r4, r5
 8008c5e:	10a4      	asrs	r4, r4, #2
 8008c60:	42a6      	cmp	r6, r4
 8008c62:	d109      	bne.n	8008c78 <__libc_init_array+0x24>
 8008c64:	f000 f81a 	bl	8008c9c <_init>
 8008c68:	2600      	movs	r6, #0
 8008c6a:	4d0a      	ldr	r5, [pc, #40]	@ (8008c94 <__libc_init_array+0x40>)
 8008c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8008c98 <__libc_init_array+0x44>)
 8008c6e:	1b64      	subs	r4, r4, r5
 8008c70:	10a4      	asrs	r4, r4, #2
 8008c72:	42a6      	cmp	r6, r4
 8008c74:	d105      	bne.n	8008c82 <__libc_init_array+0x2e>
 8008c76:	bd70      	pop	{r4, r5, r6, pc}
 8008c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c7c:	4798      	blx	r3
 8008c7e:	3601      	adds	r6, #1
 8008c80:	e7ee      	b.n	8008c60 <__libc_init_array+0xc>
 8008c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c86:	4798      	blx	r3
 8008c88:	3601      	adds	r6, #1
 8008c8a:	e7f2      	b.n	8008c72 <__libc_init_array+0x1e>
 8008c8c:	08008d20 	.word	0x08008d20
 8008c90:	08008d20 	.word	0x08008d20
 8008c94:	08008d20 	.word	0x08008d20
 8008c98:	08008d24 	.word	0x08008d24

08008c9c <_init>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	bf00      	nop
 8008ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca2:	bc08      	pop	{r3}
 8008ca4:	469e      	mov	lr, r3
 8008ca6:	4770      	bx	lr

08008ca8 <_fini>:
 8008ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008caa:	bf00      	nop
 8008cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cae:	bc08      	pop	{r3}
 8008cb0:	469e      	mov	lr, r3
 8008cb2:	4770      	bx	lr
